%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: button-backward.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Nick La
%%CreationDate: 2/26/10
%%BoundingBox: 0 0 128 64
%%HiResBoundingBox: 0 0 128 64
%%CropBox: 0 0 128 64
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 64 8%%BeginData: 9832 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD18FFCFC2C8C1C2C1C1BBFD04C1C2C2C9C9FD6CFFCAC9C1C1C1C8%C2CACAFFCFFFCAFFCFCFC9C9C2C299C2C9FD67FFCFC2C1C1C9CFFD11FFC9%C2C1C8CAFD62FFC9C299C8CAFD05FFCAFFCAFFCAFFCACFCAFFCAFFCAFD04%FFCFC2C19FCFFD5FFFC2C1C2FD05FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA%FFCFFFCFFFFFFFCFC9C1C8FD5CFFC999C2CAFFFFFFCACFCACFCACFCACFCA%CFCACFCACFCACFCACFCACFCACFCAFFCFFFFFFFC1C1C9FD59FFC9C1C9FFFF%CFCFCACFCACFCACFCACFCACFCACFCACFCACFCACFCACFCACFCACFCACFCFFF%FFFFC9C1C2FD57FFC199FFFFFFCACFC9CFC9CFCACFC9CFCACFC9CFCACFC9%CFCACFC9CFCACFC9CFCACFC9CFC9CFCAFFCAC19FFD55FFC2C1FFFFFFCACF%CACFCACFCACFCACFCACFCACFCACFCACFCACFCACFCACFCACFCACFCACFCACF%CACFCFFFFFC8C1FD52FFCAC1C2FFCACFC9CAC9CFC9CAC9CFC9CAC9CFC9CA%C9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFCAFFFFC8C1FD51FF%C1C2FFCFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFCAFFFFC8C1FD4FFFC2C1FFCACAC9CAC9CA%C9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CA%C9CAC9CAC9CAC9CFFFC2C1FD4DFFC9C1FFCFCFC9CFC9CFC9CFC9CFC9CFC9%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9%CFC9FFFFC1C2FD4BFFC998CFCAC9C9CAC9C9C9CAC9C9C9CAC9C9C9CAC9C9%C9CAC9C9C9CAC9C9C9CAC9C9C9CAC9C9C9CAC9C9C9CAC9C9C9CAC9C9C9FF%CAC1C9FD4AFFC1C9CFCFC9C9C9CAC9C9C9CAC9C9C9CAC9C9C9CAC9C9C9CA%C9C9C9CAC9C9C9CAC9C9C9CAC9C9C9CAC9C9C9CAC9C9C9CAC9C9C9FFC9C1%FD49FFA0C2CAC9C3FD30C9FFC1C2FD47FFCAC1C9CFFD32C9CACFBBCFFD46%FFC2C1CFFD0CC9A7C9A1C9A7C9A1C9A7FD11C9C2FD0DC9CAC2C1FD45FFCF%C1CFFD0DC9FD097DA1FD11C97DFD0CC9CAC9C1CAFD44FFA0C2C9C9A0C9C2%C9A0C9C2C9A0C9C2C9527D597D527D597D52A7C2C9A0C9C2C9A0C9C2C9A0%C9C2C9A0A77D7DA0C9C2C9A0C9C2C9A0C9C2C9A0CFC1C2FD43FFCFC1C9C9%C8FD0CC9FD097DA1FD0DC9C8A77D7D7DFD0FC9C1FD43FFC999CAC2C9C2C9%C2C9C2C9C2C9C2C9C2C9527D537D527D537D52A7C2C9C2C9C2C9C2C9C2C9%C2C9A07D527D527DA0C9C2C9C2C9C2C9C2C9C2C9C2C9C9C1C9FD42FFC2C8%C9C9C8C9C2C9C8C9C2C9C8C9C2C9C87D527D7D7D527D7D7DA0C9C8C9C2C9%C8C9C2C9C8C9A07D527D527D7DC9C2C9C8C9C2C9C8C9C2C9C8C9C2C9C2C2%FD41FFCAC1C2C9A0C9C2C8A0C9C2C8A0C9C2C8A0C95259527D527D527D52%A1A0C9C2C8A0C9C2C8A0C87C59527D527D527DA0C8A0C9C2C8A0C9C2C8A0%C9C2C8A0C9BBFD41FFCFC1C9C2C9C8C9C2C9C8C9C2C9C8C9C2C9C27D527D%527D527D527DA0C9C8C9C2C9C8C9C2C97D7D527D527D527D7DC9C2C9C8C9%C2C9C8C9C2C9C8C9C2C9C9C1C9FD40FFC2C1C2C8C2C8C2C8C2C8C2C8C2C8%C2C8C2C95252527D5253527D52A1C2C8C2C8C2C8C2A152535253527D5253%527DC2C8C2C8C2C8C2C8C2C8C2C8C2C8C2C9C1C9FD40FFC8C1C9C2C8C2C9%C2C8C2C9C2C8C2C9C2C8C27D527D527D527D527DA0C8C2C9C2C8C2A15253%527D527D527D527D52C9C2C8C2C9C2C8C2C9C2C8C2C9C2C8C2C2C2FD40FF%C1C2A0C8C2C2A0C8C2C2A0C8C2C2A0C8C2C2FD0952A1C2C2A0C2A07CFD0C%52A0C8C2C2A0C8C2C2A0C8C2C2A0C8C2C89FC2FD40FFC1C2C9C2C8C2C9C2%C8C2C8C2C8C2C8C2C8C27D5259527D52595253A0C8C2C8A07D527D525952%7D5259527D525352C9C2C8C2C8C2C8C2C8C2C8C2C9C2C9C2C8C1FD40FFBB%C199C2C1C2C2C8C2C2C2C8C2C2C2C8C2C2FD08522EA0C1C276FD0F52A0C8%C2C2C2C8C2C2C2C8C2C2C1C2C1C198C1CFFD3FFFC1BBC1BAFD04C1C2C2C8%C2C8C2C8C2C8C2FD0952A0C876FD1052C8C2C8C2C8C2C8C2C2C1C2C1C1BA%C1BBC1BBFD40FF98C198C198C198BB98C1BBC199C2C1C29FC2FD06522852%527CFD045228525252285252522E52525228529FC29FC2C1C199C198C198%C198C198C198C1CAFD2DFFCAFFCAFFCFFD0DFFC1BBC1BBC1BBC1BBC1BBC1%BBC1BBC1BBC1C14B2752275227525252767627FD095227522752272827C1%BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBFD2AFFCFC2C8FD05C1C2C1C9CA%FD0AFF98C1BAC198C1BAC198C1BAC198C1BAC198C1F827F827F827F827F8%759851F827F827F827F827F827F827F827F82799C198C1BAC198C1BAC198%C1BAC198C1BAC1CAFD27FFC9C2C1C2C9CFCFFFCAFFCAC9C2C1C1C9FD08FF%C1BAC1BBC1BAC1BBC1BAC1BBC1BAC1BBC19927F827F827F827F82775C1BA%76F827F827F827F827F827F827F82720C1BBC1BAC1BBC1BAC1BBC1BAC1BB%C1BAC1C1FD27FFC1C1C9FD0CFFC9C1C2CFFD06FFBBBB98C198C198C198C1%98C198C198C198C1F827F827F827F827F87598C198992027F827F827F827%F827F827F82798C198C198C198C198C198C198C198C198C1FD25FFC998C8%CFFFCACFCACFCACFCACFCACFCACFFFFFC2C1C9FD05FFC2BBC1BBC1BBC1BB%C1BBC1BBC1BBC1BBC19927F827F827F827F82775C1BBC1BBC12727F827F8%27F827F827F82727C1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1C1FD24FFCA%BBC9FFFFCACFCACFCACFCACFCACFCACFCACFCFFFC9C1C9FD04FFC2BB98C1%BAC198C1BAC198C1BAC198C1BAC1F827F827F827F827F875BAC198C1BAC1%4B27F827F827F827F827F82798C1BAC198C1BAC198C1BAC198C1BAC198C8%FD23FFCABBC9CACFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9FFC9C1C9FF%FFFFC9BBC1BAC1BBC1BAC1BBC1BAC1BBC1BAC1BB27F827F827F827F82775%C1BBC1BAC1BBC17527F827F827F827F82727C1BAC1BBC1BAC1BBC1BAC1BB%C1BAC1BBC1C8FD23FFBBC9CFCAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9%CFC9FFC8C1CFFFFFC9C198C198C198C198C198C198C198C198C1F827F827%F827F827F87598C1BAC198C1BABB984BF827F827F827F82798C198C198C1%98C198C198C198C198C198CAFD22FFC1C2CAFD07C9C3FD0EC9CF9FC2FFFF%FFC1C1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BB27F827F827F827F82775FD0A%C176F827F827F82727C1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1FD22FFC9%C1FD08C9A7FD10C9CFC1CFFFFFC8BAC198C1BAC198C1BAC198C1BAC198C1%F827F827F827F827F87598C1C0C1BAC1C0C198C1BA75F827F827F82799C1%98C1BAC198C1BAC198C1BAC198C1C2FD22FFC2C2C9C2C9C2C9A07D597D52%A1C2C9C2C9C2C9C2C97DC9C2C9C2C9C9C8C1FFFFC9C1BBC1BAC1BBC1BAC1%BBC1BAC1BBC19927F827F827F827F82775FD0DC12727F82720C1BBC1BAC1%BBC1BAC1BBC1BAC1BBC1BACAFD21FFCFC1C9C8C9C2C9C8C9527D537D7CC9%C8C9C2C9C2A7527DC2C9C2C9C8C9C8C1CAFFFF99C198C198C198C198C198%C198C198C1F827F827F827F827F875C0C19EC1C0C19EC1C0C198C1BAC14B%27F82798C198C198C198C198C198C198C198C1CAFD21FFC2C1A0C8C2C8A0%C8A0535259527DA0C8C2C2A0A1525252C8C2C8A0C8C2C999C9FFFFC9BBC1%BBC1BBC1BBC1BBC1BBC1C1C19927F827F827F827F82775C1C1C7C1C1C1C7%FD08C17527F8C1C1C1BBC1BBC1BBC1BBC1BBC1BBC1C2FD22FFC2C1C9C2C8%C2C8C2C8527D525276C8C2C8C27D5253527DC2C8C2C8C2C8C2C8C2FFFFCA%C1BAC198C1BAC198C1BAC198C1BAC1F827F827F827F827F87CC0C1C0C1C0%C1C0C1C0C1C0C1C0C1C0C1995199C1BAC198C1BAC198C1BAC198C1BACFFD%22FFC1C2C1C2C2C2C1C2A05228522876C1C2A05227FD0452C2C1C2C1C2C2%C2C1C1FFFFFFC2C1BBC1BAC1BBC1BAC1BBC1BAC1C19F99FD089FC7C1C7C1%C7C1C7C1C7FD0AC1C0C1C1C1BAC1BBC1BAC1BBC1BAC8FD22FFCFC1C1C2C1%C8C2C2C1C25252285276C276522852285252529FC2C2C2C1C8C1C2BBFFFF%FFCF98C198C198C198C198C1BAC198C1C0C198C1C0C19EC1C0C19EC1C0C1%9EC1C0C19EC1C0C19EC1C0C19EC1C0C198C1BAC198C198C198C198C1CAFD%23FF98C198C199C1C1C1995227522752522727522752275227C299C1BBC1%98C198C1FD04FFC9BBC1BBC1BBC1BBFD08C1C7C1C7C1C7C1C7C1C7C1C7C1%C7C1C7C1C7C1C7C1C7C1C1C1C7FD06C1BBC1BBC1BBC1BBC1C2FD23FFCFC1%BBC1BBC1BBC1BBC1FD04275152F8FD072799C1BBC1BBC1BBC1BBFD05FFC1%BAC198C1BAC198C1C0C1C0C1C0C1C0C1C0C1C0C7C0C1C0C7C0C7C0C7C0C7%C0C7C0C1C0C1C0C1C0C1C0C1BAC1BAC198C1BAC198C1C1FD25FF98C1BAC1%98C1BAC19827F827F851BA75F827F827F827F8C198C1BAC198C1BAC1FD05%FFC9C1BBC1BAFD0CC1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7%FD0AC1BAC1BBC1BACFFD25FFC1BAC1BBC1BAC1BBC12027F82727C1BB9F27%27F827F827BBC1BAC1BBC1BAC1C1FD06FFA0BB98C198C1BAC198C1C0C19E%C1C0C1C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C19EC1C0C19EC1C0%C198C1BAC198C198C9FD26FFC1BB98C198C198C19827F827F84B98C1989F%2727F827F8C198C198C198C198C2FD07FFC2C1BBFD08C1C7C1C7C1C7C1C7%C1FD0BC7C1C7C1C7C1C7C1C7C1C7FD08C1BBC8FD27FFC9BBC1BBC1BBC1BB%C12727F82727FD05C15127F827BBC1BBC1BBC1BBC1C9FD08FFC1BB98C1C0%C1C0C1C0C1C0C7C0C7C0C7C0C7C0C7C1C7C1C7C7C7C1C7C1C7C0C7C0C7C0%C7C0C1C0C1C0C1C0C1C0C198C2FD28FFCAC198C1BAC198C19927F827F84B%BAC1C0C1BAC17527F8C1BAC198C1BAC198CFFD09FFFD07C1C7C1C7C1C7C1%C7C1FD0FC7C1C7C1C7C1C7C1C7C1C7FD04C1BBC2FD2AFFC2C1BAC1BBC1BA%C12727F8274BC1C1C7FD04C19F5299C1BBC1BAC1BBC2FD0BFFC1BB98C1C0%C19EC1C0C1C0C7C0C7C0FD0BC7C1C7C1C7C0C7C0C7C0C7C0C19EC1C0C198%C2FD2BFFCA98C198C198C1989F999F999FC0C19EC1C0C19EC1C0C198C198%C198C1C9FD0CFFC2C1C1C7C1C7C1C7C1FD08C7CDC7CDC7CDC7CDC7CDFD06%C7C1C7C1C7C1C7C1C1BBC8FD2DFFC8BBC1BBFD06C1C7C1C7C1C7C1C7C1C7%FD06C1BBC1C2FD0EFFC2C1BAC1C0C7C0C7C0C7C1C7C1FD04C7CDC7C8C7CD%FD06C7C1C7C1C7C0C7C0C1C0C1BAC9FD2EFFCFC198C1BAC1C0C1C0C1C0C7%C0C7C0C7C0C7C0C7C0C1C0C1BABB99FD10FFC9C1BBC1C1C7C1C7C1FD04C7%CDC7CDC7CDC8CDC7CDC7CDC7C8FD04C7C1C7C1C7C1C1C1CFFD30FFCAC1BA%FD04C1C7C1C7C1FD05C7C1C7C1C7FD04C1BBCFFD11FFCFC898C19EC7C0C7%C1FD04C7CDC7CDC7CDC7CDC7CDFD06C7C0C7C0C198C1C2FD33FFC9C198C1%C0C1C0C7C1C7C1C7C7C7C1C7C0C7C0C1C0C198CAFD14FFCFC2C1C1C7C7C8%C7C8C7CDC8CDC8FD07CDC7CDFD04C7C1C1BBC8CFFD35FFCAC1BBC1C1FD04%C7CDC7CDC7CDC7C7C1C7C1C1C1CFFD17FFCAC8BBC1C0FD04C7CDCDCDC8CD%CDCDC8CDC8CDC7C7C1C198C1C2CFFD38FFCAC2BAC1C0C7C7C8C7CDC8CDC7%CDC7C198C1C2FD1CFFC9C2BBFD04C1C8C8CDC7CDC8CDC7C7C1C1BAC1C2C9%CFFD3CFFCFC1C1BAC7C7C8C7CDC8C7C1C1BBC2C9FD20FFC9C9C2C199C198%C198C198C199C2C2CACAFD41FFCAC99FC198C198C1BBC2A0CFFD09FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">button-backward</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2010-02-26T07:01:03-05:00</xmp:CreateDate>
         <xmp:ModifyDate>2010-02-26T07:01:03-05:00</xmp:ModifyDate>
         <xmp:MetadataDate>2010-02-26T07:01:03-05:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>128</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAgAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FUn1LzXpdl&#xA;N9VjL3t/2s7VfVkqP5qbL9OYGftHHjPCPXPujuXOwdn5Mg4j6Yd8tghA3nXUN1FvosB6cgLm4+7a&#xA;PKb1eX+biH+ml+purSYv52U/6WP63HylFLvqWrXt2T9qMzenHX2RAKffiezgf7zJOXxofJf5RI/u&#xA;8cI/Cz8ytPkfyaTVrPkfEzTk/wDE8H8l6X+b9sv1p/lXVfzvsj+pw8j+TQarZ8T4iacH/ieP8l6X&#xA;+b9sv1r/ACrqv532R/UuHlKKLfTdWvbQj7MYm9SOvujg1+/COzgP7vJOPxsfJH8ok/3mOEvhR+Yc&#xA;W866fuwt9agHXiBbXH3bx43q8X83KP8ASy/UtaTL/OxH/TR/Wi9M81aXezi1fnZX+1bO6X05Kn+W&#xA;uzfRl+DtDHkPCbjPulsWnP2fkxjiFSh/OjuE4zOcF2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KqN5e2tlbPc3UqwwRiru3Qf1PtleXLHHEykaAbMWKWSQjEWSxr19b8yfFE76&#xA;VoZ6SDa5uF8R/vtCP8zmp48uq5fu8P8AspfqH43drwYtLzrJl/2Mf1lMrC20rSYPQ06BUH7Tjcsf&#xA;FmPxNmTijiwjhxhxcs8mY8UyqPeSt1ag8BthOYliMQCn6uQ42XC71ceNeF3q48a8LvVx414VRLyV&#xA;ejVHgd8mMxDE4gVO/ttK1aD0NRgVx+y52KnxVh8S4MscWYcOQMsU8mE8UClvr615cFZWfVdDHWQ/&#xA;FdQL4n/fiDx/VmPx5dLzvJi/2Uf1j8bOVwYtVyrHl/2Mv1FktneWt7bJc2sqzQSCqOvQ5tcWWOSI&#xA;lE2C6rLiljkYyFEK2WNbsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqje3ltZWst1c&#xA;uI4IV5O57D+p7ZXlyxxxMpGgGzFilkkIxFksUhjl1yddW1dTHpsZ5adpzd/CWUftE9hmliDqD4uX&#xA;bGPpj+ku5kRpx4WLfIfql+gJlPfvKafZTsv9cyJ5zL3OLDCAoerlXE2cLvVx4l4XerjxLwu9XHiX&#xA;hd6uPEvC71ceJeF3q48S8LvVx4l4VeC/eI0+0ndf6ZbDOY+5rnhBS6aOXQpn1bSUMmmyHlqOnL28&#xA;ZYh2Ydx/mMc3pz4uLfGfqj+kOTEjUDwsu2QfTL9BZVZ3lte2sV1bOJIJl5I47jN1iyxyREomwXT5&#xA;cUscjGQohWyxrdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirDNRuV17WHiY10TSn/e/y&#xA;z3I7HxVP8+uaDUZPzGWv8lj/ANlL9n45u9wY/wAviv8AyuT/AGMf1lXuLxpnqdlH2V8BjPKZFjDF&#xA;whS9XIcTPhd6uPEvC71ceJeF3q48S8LvVx4l4XerjxLwu9XHiXhd6uPEvC71ceJeF3q48S8Krb3j&#xA;QvUbqftL4jJwymJYTxcQUdOuV0HWEhU00TVX/dfywXJ/ZHgr/wCfTHT5Rp8tf5LJ/sZft/HJlnxn&#xA;UYr/AMrj/wBlH9YZlm/dE7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkvm7VZdP0hhbn/T&#xA;bthbWg785NuX+xG+a/tLUHFi9P1S2Hxc/s3TjJl9X0R3PuDHYo4rGzhsIT8EI+Nv5nO7MfpzUACE&#xA;RAdPvdpInJIzPX7nerg4k8LvVx4l4Uq1vXm0z0aRiT1eXVqU409j/NmXpNP4t71TianP4VbXaV/4&#xA;4f8A5Zh/wZ/pmZ/Jo/nOL/KB7ley84Pc3cMBtwvqsF5c60r9GQy6ARiZXyZ49aZSArmyL1c1fE7L&#xA;hd6uPEvC71ceJeFa86opZ2CqoqWJoAMQSTQQRW5QdhrVtfTTpb1ZIOP7zsxavT/gcvzYJYwDLq04&#xA;swyEgdEd6uUcTfwu9XHiXhdLHFfWc1hMfgmHwN/K43Vh9OEgTiYHr96Ik45CY6fcyLyjq0uoaQou&#xA;T/ptoxtrsHrzj25f7Ib5uOzdQcuL1fXHY/B1faOnGLL6foluPcU6zPcB2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KsH8yXn1jzSsdaxaTBy49vXn6f8ACUzne0MvFqK6Yx9p/Y9BocXDp765JfZH&#xA;9qAMtTUnfMPicrhd6uDiXhd6uPEvCxTz3Px+o79fV/40zc9kn6vh+l1Pag+n4/oYp9a983DqUbod&#xA;zXV7MV6yr+vKNV/dS9xb9N/eR94ek+rnK8T0vC71ceJeFC6hq9np8BmuZAo/ZXqzHwUZdhxSyGot&#xA;WbLHGLkwbWPNFzqLla+lbA/DED192PfOg02kjiHfLvdFqNVLIe4dyceRJ+X17fp6X/G+YXax+n4/&#xA;oczssfV8P0sr9XNNxO24XerjxLwuEtDUHfDxLwo/y3efV/NLR1pFq0HLj29eDr/wlczOz8vDqK6Z&#xA;B9o/Y4uuxcWnvrjl9kv2s4zonn3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8sN3697qN1Wv&#xA;1i7kKn/IQ8U/DOMlk4pzl/Okfl0ewGPhhCP82A+Z5t+rgteF3q42vC71cbXhYd+YU/H9H/8APb/j&#xA;TN32Ofr+H6XT9rj6fj+hh31n3zdumTDQLiut2Qr/ALuT9eY+r/upe4t+l/vY+8PUvVzkbeq4Uj1/&#xA;zdZ6YDDGRPedogdl93P8M2Gk0Msu52j+OTgavWxxbDeTAb3WLq9nM9zIZJD49APADsM6LFijAVEU&#xA;HQZMkpm5HdD/AFn3yxgzH8vZ+X6Q/wCeP/G+aTtg/R8f0O57IH1fD9LMfVzSW7jhd6uNrwu9XG14&#xA;Whd+he6ddVp9Xu4yx/yHPF/wwxycM4S/myHy6qcfFCcf50D8xyep52bx7sVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVeCw6tdQqFUhl3JUjuSSelM85jmkH0aWnjJFx68h/vYyPdTX9dMtGp7w0y0&#xA;ncUSmrWb/wC7OJ8GBGWDNEtR08h0V0uoX+w6t8iDkxMFrOMjowv8yp+P6O9/W/5l5v8AsQ/X8P0u&#xA;i7ZH0fH9DCfrPvm9dImHl+7RNbsmdgqLMpZiaAAHcknMfVgnFIDuLfpSBliT3hkfmP8AMDlytdJa&#xA;i9Hu+hP/ABj8P9b7s1mj7Lr1ZPl+t2Ws7Tv04/n+phrXZZizEliakk1JJzduma+s++Ku+s++Ks2/&#xA;LWfl+kfb0f8AmZmi7bP0fH9Du+xh9fw/SzR7qFPtuq/MgZoDMB3oxk9FB9Ws0/3ZyPgoJyBzRDYN&#xA;PI9ENJryD+6jJ92NP1Vys6nuDbHSd5Qk2rXUylWIVdiFA7ggjrXKpZpFujp4xe9Z6M+cuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV88spVip6qaH6M80L6YC1irsVdiry7877u6g/QnozPFX61X&#xA;gxX/AHz4HOm9nf4/839LzPtEPo/zv9680TX9aTpeyn/WYt+uudLbzSf+S/MOsT+adMgmuPUhlnRZ&#xA;I2VCCpO4NVzG1kiMMyOYifucjRwEs0AeRkPvZ3518o+YYueoeXbgug+KXTiiEjx9Ilan/VJ+Xhmn&#xA;7P7bEvRl2P8AO/W7ntDsQxueLcd36nl0nmrzEjsr3JRlJDIY4wQR1FCudDbz1LG81a+3W7P0Kg/U&#xA;uNrSi+v60/W9lH+qxX9VMbV6X+SF3dT/AKb9aZ5afVac2Lf7+8TnNe0X8H+d+h6X2dH1/wCb/vnq&#xA;Ocy9M7FXYq2qlmCjqxoPpxCkvoYAAUGwHQZ6W+ZuxV2KuxV2KuxV2KuxV2KpXrXmKy0spCVa5vp/&#xA;957KEcpH96fsr7nMPVa2GGh9UzyiObmaXRTzWfpgOcjySv6r5l1H49S1D9FwN0s7Gnqiv80xrQ/6&#xA;u2YfBny75J+GP5sefzcvxMGLbHDxD/Oly/0rX+DfKr73EEt1J3lmnlLH7mUZH+TtN1BkfMn9af5S&#xA;1I+kiI8oj9Tv8G+VU3t4JbWTtLDPKGH3swx/k7TdAYnyJ/Wv8pak/URIecR+psWvmTTvj02//SkC&#xA;9bK+I9UgfyTCm/8ArbZLgz4t8c/EH82XP5o8TBl2yQ8M/wA6PL/SppovmKy1TnEFa2vof96LKb4Z&#xA;E96d19xmZpdbDNY+mY5xPNxNVop4aP1QPKQ5JpmY4bwjzDaG012/t6UEc8nEf5JYlf8AhTnnmrx8&#xA;GWUe6RfQ9Hk48MZd8Ql+Y7kuxV2KvKfz1/6Un/R1/wAyc6X2d/j/AM3/AHzzXtF/B/nf715TnTPM&#xA;p75E/wCUx0j/AJiU/XmJrv7if9U/c5Wh/v4f1h976Q4Nnn1voNsQ87fltp/mFGubfjaaqBtcAfDJ&#xA;TtKB/wAS6j36Zt+z+15YfTL1Q+0e79Tp+0OyoZvVH0z+w+/9bw/WdE1PRr57LUYGgnTpX7LL/Mjd&#xA;GHuM6/DnhljxQNh5HNhnjlwyFFA5c1PVvyK/6Xf/AEa/8zs5n2i/g/zv969N7O/x/wCb/vnq2c09&#xA;K7FXYqmHl60N3rthb0qJJ4+Q/wAkMC3/AAozI0mPjyxj3yDjazJwYZS7ol7vnob547FXYq7FXYq7&#xA;FXYq7FUq8x64NJsQ8aete3DelZ2/88jdK/5K9TmFrtX4MLG8ztEebmaLSeNOjtAbyPkkGnRCxaS4&#xA;mk+s6tc73d4dzU/7rj8EXNXhHh3IniyS5y/QPJ2eaXiVEDhxx5R/SfNF/Xj45Z4zT4Tvr3vj4q+E&#xA;76974+KvhO+vHxx8ZfCQuoxC+aO4hk+ratb72l4NjX/fcnijZXl/eVIHhyR5S/QfJtwnw7iRxY5c&#xA;4/pHmn3lzXBq1iXkT0b23b0r23/kkHWn+SeozaaHV+NCztMbSHm63W6TwZ0N4HeJ8mAfmjphg1qK&#xA;+Ufu7yMBj/xZFRT/AMLxzne3sHDlE+kh9o/Aek7Bz8WIw6xP2H9tsMzRu8dirsVeU/nqP+OH/wBH&#xA;X/MnOl9nf4/83/fPNe0X8H+d/vXlOdM8yn/kEV86aMPG6j/XmJr/AO4n/VP3OTov76H9Yfe+nBB7&#xA;Z5xxPd8TjB7Y8S8SU+YvKuka/Ymz1KASJ1jkG0kbfzI3Y/h45l6TW5MEuKB+HQuPqdNjzxqY/WHg&#xA;3nb8u9Y8sStMQbrS2akV4g6V6LKP2W/A/hna6DtPHqBttPu/V3vJa3s+eA77x72VfkUP+O5/0a/8&#xA;zs1ftF/B/nf712/s7/H/AJv++erZzT0rsVdirM/yu0wz61LfMP3dnGQp/wCLJaqP+F5ZvOwcHFlM&#xA;+kR9p/BdH29n4cQh1kfsH7aeqZ17x7sVdirsVdirsVdirsVee6tqP1vzLd3JNY9P/wBDtB4P/u5v&#xA;nX4c5fVZ+PPKXSHpH6XptNg4NPGPWfqPu6KX1z3ynxGzwmF+YfN2pWmsXFvDcFI04cVoppVFJ6j3&#xA;ze6LT454hIjff73SavNOGQxB2/Ym3lLzBd6hbTvcS+oyOApNBQEV7AZh9owjjI4RTl9nylkBs2nc&#xA;2pRQxNLNII40FWdjQAZgRkZGhuXOlERFnYMftfO6X2uQWVptbMX5SN1fijEUHYVGbHJo/DwmUvq2&#xA;+91+PVeJlEY/T+xkf1z3zWeI7LwlbSdS+qeZbS5BpHqFLO7HjJ/ul/n+zl2lz8GeMuk/Sf0Nepwc&#xA;eCUesPUPd/EyTzroh1fQpoo1rcwfvrfxLKN1/wBktRm37U0vjYSB9Q3Dquy9V4OYE/Sdi8V6Zwr3&#xA;bsVXIhJwEoJYz5+/L2XzYLD071bP6l6teUZk5erw8GWlPTzY9mdpjTcVji4q+y/1un7T0J1HDRrh&#xA;v7aYoP8AnHy7P/S7T/pHP/VTNp/omh/MPzdV/Icv5wTTy5+Rt1pGu2OqNq6TLZzLKYhAVLcTWleZ&#xA;pmPqfaKGTHKAgfUCOfezw9kShMS4hsbesiHOV4ne8TjDjxLxLGhyQkyEkNc2kM0TwzRrJFICskbg&#xA;MrKdiCD1yyGQxNg0Qk1IUdwxry/5H0zy7falPpxZLfUPSJtjusbRc68D14n1Oh6ZsdX2jPURiJ84&#xA;3v33X6nH0ejjglIx5Srbuq/1ps6UzFBdkCswpd1xV7V5L0M6RoUMMi8bqb99cA9QzDZT/qrQfPO6&#xA;7L0vg4QD9R3Lwnamq8bMSPpGwT3Ni652KuxV2KuxV2KuxVxIAqdgOpxV4lbatHwPqNSSR3kevdnY&#xA;k755/HOOvN7+enN7chsiVv0b7LA/IjLPFDUcRDyrzxqvDzRerXp6X/JlM67ss3p4/H7y8n2mKzy+&#xA;H3BM/J3nDTtL0e8nvJfiMoEUS7u5C9FH8cx+0dNPNkiI93Nv7P1EMUJGXwCSa556vdXmrI3pW6n9&#xA;3bqfhHuf5j75m6XRwwjbc97h6nVzzHfl3IjyPqvPzRZLXr6v/Jl8q7UNaeXw+8NvZgvPH4/cXqrX&#xA;6L9pgPmRnI+KHrBiJQ1zq0fAem1ZI3SRKdmRgRvlcs46c22GnN78js9tz0B4B5R+Yflg6ffHUrZP&#xA;9Cu2q4A2jlO5HybqM47tnQ+FPjj9EvsL2PY2v8WHhy+uP2j9jEFWpzSEu7KLijyuRapFFxx5SS0k&#xA;opIsrMmslWWLIEsCV4i9sjaOJxi9sbRxLGiyQLIFReLJgswUNJHlgLYCg5Y8tiW6JQjrQ5aC2gsw&#xA;/Lvyw2oXw1O5T/QrRqxgjaSUbgfJepzedjaDxZ8cvoj9pdJ2zr/Dh4cfrl9g/a9WzsHjnYq7FXYq&#xA;7FXYq7FXYq7FXz3PE8M0kL7PGxRh7qaHPNpRokHo+lxkJAEdVmRS8C/M+4nTz3qYSR1H7jYMR/x7&#xA;x+Gdx2P/AItH4/7ovD9sf4zL4f7kMk/LTRLfzD5a1G3v3lMi3A9G5RyJIyYx9lvD2O2Yvautnp8k&#xA;DHlRsd7k9laLHqMcxLntR7mLebvK3mfy1cf6RNLNYuaQ3qM/A+zb/C3sfozYaPX49RG48+odfrNB&#xA;PBKpcuhVfywuJ3896YHkdh+/2Zif+PeTxyntj/FpfD/dBv7H/wAZj8f9yXvucO9wvgieaaOFN3kY&#xA;Io92NBkoxsgDqiUhEEno+hM9JfNFG9s7a9tZbW5QSQTLxdD3H9R2yvLijkiYyFgtmLLLHISiaIeP&#xA;eZfK91oN6QwMlhK3+j3P48Wp0YfjnDdo9nz08u+PQ/jq9vodfHUQ7pjmEHCnTNRIuRIoyJMpkWkl&#xA;FRx5WS1koqOCuCmmU0Qttt0w01HI5rb2xpRkQ8kFMFNsZoWSPEFuBQ0qZbEtgKCmTrl0S3RKN8s+&#xA;V7rXr2i1jsIm/wBIufx4rXqx/DNv2d2fLUS7ojmXG12vjp4d8zyD2Cys7aytYrW2QRwQrxRB2H9T&#xA;3zucWKOOIjEUA8TlyyySMpGyVbLGt2KuxV2KuxV2KuxV2KuxV47+YOkNYeYppQKQXv7+M/5Tf3g+&#xA;fLf6c4jtjT+HnJ6S3/X9r2/Y+o8TAB1jt+r7GNAEmgzVu1eQef8A8vvOGqebr++0/TnuLSb0fTlD&#xA;xgHjCinZmB2ZSM6vsztHBjwRjKQEhf3l5DtTR5Z55SjEkGvuDNfye8p65oul38Or2jWsss6vErMj&#xA;VXgBX4C3fNT29rcWWUfDlxUC5nZGKeIS4hV0zq90i2u7aS2uoVmt5QVkicBlYHsQc0eLUShISiaI&#xA;dvPhmOGQsF5xaflQdD87WOr6U/LS1M3rW7n44i8LqvEn7S8mA8R750GTtkZ9NKE9p7e47j5Oqwdm&#xA;+DqIzh9G/wANizcgg0OaZ6Fkv5faQ1/5ihlIrBZfv5D/AJS/3Y+fLf6M2nY+n8TOD0jv+r7XVdsa&#xA;jw8BHWW36/sexZ27xDsVUbyytb22e2uolmgkFHRuh/offK8uKOSJjIWC2YssschKJoh5tr3kfUdJ&#xA;ZrjTg17p/Vo+s0Y+Q+0PcZx/aPYc4XKHqj9oeq0fa0M3pn6Z/YUptJ4Zh8DfEOqnYj6M5jJEx5uf&#xA;OJHNMYI65WHFnJMoIK5MBxZzRsdrt0yYi4xyNva7dMTFRkQM8FMgQ5EJpdcR0yBcuEktu54YR8bf&#xA;Eeijcn6MsxxMuTlQiTyTfQfI+o6s63GpK1lp/VYuk0g+R+yPn/bnT9ndhyn6snpj9pdfrO1oYRw4&#xA;/VP7B+t6RZ2VrZWyW1rEsMEYoiL0H9T752GLFHHERiKAeWy5ZZJGUjZKtljW7FXYq7FXYq7FXYq7&#xA;FXYq7FUn81eXYdd0trYkJcx/HbSn9l6dD/kt0OYPaGiGox8P8Q5Od2frTp8nF/Cebx1rC4tLyS0u&#xA;ozFcRHi8bdfo8RnBZ8csZMZCiHtxljOIlE3Epnb24oNswJyaJzTCKyZh0yvdxpZabksWUdMd1jlB&#xA;S+4txQ7ZZGTkQmlq6fcXl7HZ2kZluZTRI1/WfAZn6fHLJIRiLJcg5owiZSNRD2Dyr5dh0LS1tgQ9&#xA;xJ8dzKP2np0H+SvQZ3vZ+iGnx8P8R5vEdoa06jJxfwjknGZzguxV2KuxVIta8maHqrGV4jb3R3+s&#xA;wURyfFuzfSK5rtX2VhzbkVLvDsdL2pmw7A8Ue4sbuPJvmiwatnLFqUI6I/7qWn0nj/w2c3qfZvIP&#xA;oIl9n37fa7WHamnyfWDA/Mfj4KC6jf2RpqGkXcAHV0T1E/4LYZqcnZubHzifk2nDDJ9GSJ+NIhPO&#xA;WgIKPJIjd1aNq/qyjwyGo9m5jyr5ufzloDiiSSO3ZVjav6sfDJUdm5hzr5odtSv7000/SLucHYO6&#xA;emn/AAW4y/H2bmycon5Ngwwx/XkiPjavB5N80X5BvJYtNhPVE/ey0+g8f+Gzbab2byHedR+37tvt&#xA;a59qafH9AMz8h+PgyXRfJmh6UwmjiNxdjf6zP8bg+K9l+gVzpNJ2XhwbgXLvLqdV2nmzbE1HuCeZ&#xA;sXXuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpP5h8raZrkQ+sKY7lBSG6j2dfY/zD2OYOt7Px6geraX&#xA;e52i7Qyac+nePUMIufLHmXSn3tv0jbDpLb7vT3j+1X5D6c4/V9gZoG4jiHl+rm9Dj7QwZhz4Jef6&#xA;27fzBpEPwXazW0g6pJGwP4VzUnTyiaIRPSZZbxqQ96648w6PN8Fos1zIeiRxsT+NMRp5SNAIhpMs&#xA;d5VEeZW23lnzLq0m1t+jbY9Zbj+8p7R/ar8/vzbaTsDNM3IcI8/1c05O0MGEc+OXly+bNvL3lbTN&#xA;DiP1dTJcuKTXUm7t7D+VfYZ2Gi7Px6ceneXe8/rdfk1B9W0eg6Jxmc4L/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:E761EC9D0B2068118F62AD85486E0984</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:E761EC9D0B2068118F62AD85486E0984</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b1b7865a-7525-2a4f-9cae-1640e96d0873</stRef:instanceID>
            <stRef:documentID>uuid:76E907432BEEDD11AF8BBF931F055AD6</stRef:documentID>
            <stRef:originalDocumentID>uuid:76E907432BEEDD11AF8BBF931F055AD6</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:OriginalDocumentID>uuid:76E907432BEEDD11AF8BBF931F055AD6</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:E761EC9D0B2068118F62AD85486E0984</stEvt:instanceID>
                  <stEvt:when>2010-02-26T07:01:03-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>128.000000</stDim:w>
            <stDim:h>64.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 8.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -64 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 64 li
128 64 li
128 0 li
cp
clp
[1 0 0 1 0 0 ]ct
112 63 mo
103.729 63 97 56.2715 97 48 cv
97 48.168 97.0195 48.332 97.0254 48.5 cv
97.0468 47.8528 97.1094 47.2152 97.2104 46.591 cv
99.6313 47.2577 102.245 47.7689 105 48.0938 cv
105 55.0088 li
109.667 55.0088 li
109.667 48.4556 li
109.874 48.4635 110.081 48.4704 110.288 48.4762 cv
119 55.0283 li
119 48.0938 li
121.755 47.7688 124.369 47.2575 126.789 46.5906 cv
126.89 47.2153 126.953 47.8523 126.975 48.5 cv
126.98 48.332 127 48.168 127 48 cv
127 56.2715 120.27 63 112 63 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
gsave
[12.6896 0 0 12.6896 111.905 63.5 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
0 <~zzzzzzzz!<E6(!sAc2"pP;<#RLhF$OdFQ%Ls![&.oKe',)&p'c%T%(`4,/)B0Y9*?H7D+<VgO+sS<X,p
alc-R^Dm.P*,&/M8\00JP:;1G^jF2)[?O3&ioZ3]fGd4[)%o5<h@t5X7S#5sdn*6UO4/6q'O67Ros=7n
?0B8P2TJ92&#R9hnGZ:Jakb;,U:j;cH^r<E<.%='/R-=^#!5>?b?;?!UcC?XI2K@:<VTA7T7_AnG[gBP
;*oC2.O#D/F0.Df9T6EH-#?FEDYJG'8(RG^+L[H[C-fI=6Qn~>
<~Z*CR=Z*CR=Z*CR=Z*CR=Z*CR=Z*CR=Z*CR=Z*CR?['[6L[^WfX]"5Md]Y;.q^qmk(_o0O5`lH-Ab0%oO
bg"GZd*U1gdaQ^rf%8O+g"P39gtgfChr*JQioB+\jlbgjkiqBum-X3.n*fc:o(2JFp%A(Sq"ad_qu-Km
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
0 ]
>>
0 0 0 0 0 1 [
]true true []
/DeviceCMYK
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
np
112 32 mo
103.16 32 96 39.168 96 48 cv
96 56.8359 103.16 64 112 64 cv
120.832 64 128 56.8359 128 48 cv
128 39.168 120.832 32 112 32 cv
112 33 mo
120.27 33 127 39.7285 127 48 cv
127 56.2715 120.27 63 112 63 cv
103.729 63 97 56.2715 97 48 cv
97 39.7285 103.729 33 112 33 cv
0 .5 1 0 cmyk
f
105 40.9717 mo
105 55.0088 li
109.667 55.0088 li
109.667 48.0088 li
109.667 40.9717 li
105 40.9717 li
0 0 0 1 cmyk
f
109.667 48.0088 mo
119 55.0283 li
119 40.9912 li
109.667 48.0088 li
f
110.288 48.4762 mo
110.081 48.4704 109.874 48.4635 109.667 48.4556 cv
109.667 48.0088 li
109.667 40.9717 li
105 40.9717 li
105 48.0938 li
102.245 47.7689 99.6313 47.2577 97.2104 46.591 cv
98.3645 39.4619 104.55 34 112 34 cv
119.449 34 125.633 39.4622 126.789 46.5906 cv
124.369 47.2575 121.755 47.7688 119 48.0938 cv
119 40.9912 li
109.667 48.0088 li
110.288 48.4762 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[31.2 0 0 15.84 96.48 15.04 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 65 
/H 33 
/M[65 0 0 -33 0 33 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 65 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 65 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 65 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 65 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
^];7QrW0e:`W3RMaT_GC^^A9cZiJDXnd*#BdK$EMeI1^O^_bW'VuYQ^jpo0Ih>j8Mi=b&]^a.t@S,h^e
g(hCQl2[+Mm24=i^bP<YO9"kkc5XPXp&KsMq&d["^cqYrKE2#r_BQfa!(;G>r;aVZa%Q8%M#d8M^aRH)
oMLYLnGp?Udoc$?PlU+M^b=AIk['_YjT*(OhdteYJcPcM^bs,IqeLufp]/)ib]<AsNWAVM^c^%ims(&s
li=gcfRN.8RK2IM^d?n3j+X-+huLP^jG_oRV?#<M^e*gSf9338e,[9Xn<q[lZ2i/M^eaZrbFc9Ea8j"S
r2.H1^&Z"M_,^P:^oYHS]E#uTqH:V?aoJjMc!9mG^q%elYQ3-[mU3iGec;]Mfjj5U^rG.0U]B:aib$!N
_Z7@M`bG<a^sgC*p],g~>

%%EndBinary
grestore
np
109.667 48.4556 mo
108.074 48.3949 106.516 48.2726 105 48.0938 cv
105 40.9717 li
109.667 40.9717 li
109.667 48.0088 li
109.667 48.4556 li
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
0 0 0 <~!!!$$!sAc3#7(VC$OdIS%hK<c',2/s(Dn#.)]Tk>+!;^N,:"Q^-R^Dn/1iJ-0JP==1c70M3&s#]4?Ykm
5<qM$6UX@47n?3D92&&T:Jand;cHat='/U/>?kH??XR;O@q9._B4u!oCM[j*DfB]:F*)PJGBeCZH[L6j
It3*%K7nr5LPUeEMi<XUO-#KePE_>uQ^F20S"-%@T:hmPUSO``Vl6SpX/rG+YHY:;Za@-K\%&u[]=bhk
^;%J"_Sa=2`lH0Bb0/#RcHjkbdaZguf@\d1gYCWAhr*JQj5f=akNM0qlg4$,n*ol<oCV_Lp\=R\qu$El
~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
np
112 48.5 mo
111.425 48.5 110.855 48.492 110.288 48.4762 cv
109.667 48.0088 li
119 40.9912 li
119 48.0938 li
116.751 48.3589 114.408 48.5 112 48.5 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/1 /Gradient get_res exec grestore
np
111.681 33.0033 mo
111.682 33.0033 li
111.681 33.0033 li
111.692 33.0031 mo
111.693 33.0031 li
111.693 33.0031 111.693 33.0031 111.692 33.0031 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
0 <~!!!!"!<N<)!sA`1"U5/9#7(SA#mq"I$OdFQ%1WjY%hK9a&J>]i',2/r()Ic((`=20)B0V8*$$%@*ZlIH
+<VgN+sJ6V,U=Z^-71)f-n$Mn.Olr!/1`A)/hSe10JG491,:XA1c.'I2E!KQ3&ioY3]]>a4?Pbi5!D1q
5<qJ"5sdn*6UX=277Ka:7n?0B8P2TJ92&#R9hnGZ:Jakb;,U:j;cH^r<E<.%='/R-=^#!5>?kE=?!^iE
?XI2K@:<VS@q0%[AS#IcB4kmkBkhBuCi!s*DJjB2E,]f:EcQ5BFEDYJG'8(RG^+LZH?spbI!g?jIXZcr
~>
<~!!!$$!sAc3#7(VC$OdIS%hK<c',2/s(Dn#.)]Tk>+!;^N,:"Q^-R^Dn/1iJ-0JP==1c70M3&s#]4?Ykm
5<qM$6UX@47n?3D92&&T:Jand;cHat='/U/>?kH??XR;O@q9._B4u!oCM[j*DfB]:F*)PJGBeCZH[L6j
It3*%K7nr5LPUeEMi<XUO-#KePE_>uQ^F20S"-%@T:hmPUSO``Vl6SpX/rG+YHY:;Za@-K\%&u[]=bhk
^;%J"_Sa=2`lH0Bb0/#RcHjkbdaZguf@\d1gYCWAhr*JQj5f=akNM0qlg4$,n*ol<oCV_Lp\=R\qu$El
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
np
112.307 33.0031 mo
112.307 33.0031 112.307 33.0031 112.307 33.0031 cv
112.307 33.0031 li
111.703 33.0029 mo
111.704 33.0029 111.704 33.0029 111.705 33.0028 cv
111.705 33.0029 111.704 33.0029 111.703 33.0029 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.297 33.0029 mo
112.296 33.0029 112.295 33.0029 112.295 33.0028 cv
112.296 33.0029 112.296 33.0029 112.297 33.0029 cv
111.714 33.0027 mo
111.715 33.0027 111.716 33.0026 111.717 33.0026 cv
111.716 33.0026 111.715 33.0027 111.714 33.0027 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.285 33.0027 mo
112.285 33.0027 112.284 33.0026 112.283 33.0026 cv
112.284 33.0026 112.284 33.0027 112.285 33.0027 cv
111.726 33.0025 mo
111.727 33.0024 111.727 33.0024 111.728 33.0024 cv
111.728 33.0024 111.727 33.0024 111.726 33.0025 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.274 33.0025 mo
112.273 33.0024 112.272 33.0024 112.272 33.0024 cv
112.272 33.0024 112.273 33.0024 112.274 33.0025 cv
111.738 33.0023 mo
111.738 33.0022 111.739 33.0022 111.74 33.0022 cv
111.739 33.0022 111.739 33.0022 111.738 33.0023 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.262 33.0023 mo
112.261 33.0022 112.262 33.0022 112.261 33.0022 cv
112.261 33.0022 112.262 33.0022 112.262 33.0023 cv
111.749 33.0021 mo
111.75 33.0021 111.751 33.002 111.751 33.002 cv
111.751 33.002 111.75 33.002 111.749 33.0021 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.251 33.0021 mo
112.25 33.002 112.25 33.002 112.249 33.002 cv
112.25 33.002 112.25 33.002 112.251 33.0021 cv
111.76 33.0019 mo
111.761 33.0019 111.762 33.0019 111.763 33.0018 cv
111.762 33.0019 111.761 33.0019 111.76 33.0019 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.239 33.0019 mo
112.239 33.0019 112.238 33.0019 112.238 33.0018 cv
112.238 33.0019 112.239 33.0019 112.239 33.0019 cv
111.826 33.001 mo
111.827 33.001 111.829 33.001 111.83 33.0009 cv
111.829 33.001 111.827 33.001 111.826 33.001 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.173 33.001 mo
112.172 33.001 112.171 33.001 112.17 33.0009 cv
112.171 33.001 112.173 33.001 112.173 33.001 cv
111.837 33.0009 mo
111.838 33.0009 111.84 33.0008 111.841 33.0008 cv
111.84 33.0008 111.838 33.0009 111.837 33.0009 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.163 33.0009 mo
112.161 33.0008 112.16 33.0008 112.159 33.0008 cv
112.16 33.0008 112.162 33.0009 112.163 33.0009 cv
111.848 33.0008 mo
111.85 33.0007 111.851 33.0007 111.853 33.0007 cv
111.852 33.0007 111.849 33.0007 111.848 33.0008 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.152 33.0008 mo
112.15 33.0007 112.148 33.0007 112.147 33.0007 cv
112.149 33.0007 112.15 33.0007 112.152 33.0008 cv
111.859 33.0006 mo
111.861 33.0006 111.863 33.0006 111.865 33.0006 cv
111.863 33.0006 111.862 33.0006 111.859 33.0006 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.14 33.0006 mo
112.138 33.0006 112.137 33.0006 112.135 33.0006 cv
112.137 33.0006 112.139 33.0006 112.14 33.0006 cv
111.871 33.0005 mo
111.873 33.0005 111.875 33.0005 111.877 33.0005 cv
111.875 33.0005 111.873 33.0005 111.871 33.0005 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.129 33.0005 mo
112.127 33.0005 112.125 33.0005 112.123 33.0005 cv
112.125 33.0005 112.127 33.0005 112.129 33.0005 cv
111.883 33.0004 mo
111.885 33.0004 111.886 33.0004 111.888 33.0004 cv
111.887 33.0004 111.884 33.0004 111.883 33.0004 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.117 33.0004 mo
112.116 33.0004 112.113 33.0004 112.112 33.0004 cv
112.114 33.0004 112.115 33.0004 112.117 33.0004 cv
111.894 33.0004 mo
111.896 33.0003 111.898 33.0003 111.9 33.0003 cv
111.898 33.0003 111.896 33.0003 111.894 33.0004 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.106 33.0004 mo
112.104 33.0003 112.102 33.0003 112.1 33.0003 cv
112.101 33.0003 112.104 33.0003 112.106 33.0004 cv
111.906 33.0003 mo
111.908 33.0003 111.91 33.0003 111.912 33.0002 cv
111.91 33.0003 111.908 33.0003 111.906 33.0003 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.094 33.0003 mo
112.092 33.0003 112.09 33.0003 112.088 33.0002 cv
112.09 33.0003 112.092 33.0003 112.094 33.0003 cv
111.918 33.0002 mo
111.92 33.0002 111.922 33.0002 111.924 33.0002 cv
111.922 33.0002 111.92 33.0002 111.918 33.0002 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.082 33.0002 mo
112.08 33.0002 112.078 33.0002 112.076 33.0002 cv
112.078 33.0002 112.08 33.0002 112.082 33.0002 cv
111.929 33.0002 mo
111.932 33.0001 111.933 33.0001 111.936 33.0001 cv
111.933 33.0001 111.932 33.0001 111.929 33.0002 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.071 33.0002 mo
112.068 33.0001 112.067 33.0001 112.064 33.0001 cv
112.067 33.0001 112.068 33.0001 112.071 33.0002 cv
111.941 33.0001 mo
111.943 33.0001 111.946 33.0001 111.948 33.0001 cv
111.946 33.0001 111.943 33.0001 111.941 33.0001 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.059 33.0001 mo
112.057 33.0001 112.054 33.0001 112.052 33.0001 cv
112.054 33.0001 112.057 33.0001 112.059 33.0001 cv
111.953 33.0001 mo
111.955 33.0001 111.957 33.0001 111.959 33 cv
111.957 33.0001 111.955 33.0001 111.953 33.0001 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.047 33.0001 mo
112.045 33.0001 112.043 33.0001 112.041 33 cv
112.043 33.0001 112.045 33.0001 112.047 33.0001 cv
111.965 33 mo
111.967 33 111.969 33 111.972 33 cv
111.97 33 111.967 33 111.965 33 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.035 33 mo
112.033 33 112.03 33 112.028 33 cv
112.03 33 112.033 33 112.035 33 cv
111.976 33 mo
111.979 33 111.981 33 111.984 33 cv
111.982 33 111.979 33 111.976 33 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.024 33 mo
112.021 33 112.018 33 112.016 33 cv
112.019 33 112.021 33 112.024 33 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
111.988 33 mo
111.992 33 111.996 33 112 33 cv
112 33 li
111.996 33 111.992 33 111.988 33 cv
112.012 33 mo
112.008 33 112.004 33 112 33 cv
112.004 33 112.008 33 112.012 33 cv
gsave
[-8.23837e-07 18.8472 -18.8472 -8.23837e-07 111.999 32.8652 ]ct
clp
/2 /Gradient get_res exec grestore
np
126.975 48.5 mo
126.953 47.8523 126.89 47.2153 126.789 46.5906 cv
126.835 46.5781 126.88 46.5654 126.926 46.5527 cv
126.205 39.0591 119.951 33.1574 112.307 33.0031 cv
120.436 33.1678 127 39.8315 127 48 cv
127 48 li
127 48.168 126.98 48.332 126.975 48.5 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[16.32 0 0 17.28 111.36 14.56 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 34 
/H 36 
/M[34 0 0 -36 0 36 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 34 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 34 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 34 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 34 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
hZ2OJh^Rahec=SDh_4L"blHW>h_b00_uS[8iB%!"]`?q4l9P&.]`?q7o1&+:]`?q9r(H*D]`@(@r@$Q#
]`@CLoIJg#]`@^XlRq(#]`A$di\B>#_Z9Q6h_a5(bQ.26h`'G1eH"h6h`BY:h>lI6h`]kCk5a*6h`p"J
n,U`6ha64Sq#JA6haQI]!/nMjham!opQ<,hhb3O+mZtNdhbO'=jda!ai_f\PhkIdalW!OVhl+3goN(<Z
hlXQlrE8/`hm:0"quGVZhmpo1o)RZThnRY@l2]^Nho+=Ni;hbHhob']fDsfBhpCflnGqGHheV-#kQ'06
heh9*nGpf6hf.K3q>eG6hfIc>s6%&qhfe;Pp?fNnhg+hbmIT38J,~>

%%EndBinary
grestore
np
97.0254 48.5 mo
97.0195 48.332 97 48.168 97 48 cv
97 48 li
97 47.9717 97.0001 47.9435 97.0002 47.9152 cv
97.0444 39.9786 103.283 33.4825 111.117 33.0257 cv
103.736 33.4563 97.7758 39.2482 97.0723 46.5527 cv
97.1182 46.5656 97.1643 46.5783 97.2104 46.591 cv
97.1094 47.2152 97.0468 47.8528 97.0254 48.5 cv
111.117 33.0257 mo
111.12 33.0255 111.124 33.0253 111.127 33.0251 cv
111.124 33.0253 111.12 33.0255 111.117 33.0257 cv
111.129 33.025 mo
111.132 33.0248 111.136 33.0246 111.139 33.0244 cv
111.135 33.0246 111.132 33.0248 111.129 33.025 cv
111.14 33.0243 mo
111.144 33.0241 111.147 33.024 111.15 33.0238 cv
111.147 33.024 111.143 33.0242 111.14 33.0243 cv
111.151 33.0237 mo
111.155 33.0235 111.158 33.0233 111.162 33.0231 cv
111.158 33.0234 111.155 33.0235 111.151 33.0237 cv
111.162 33.0231 mo
111.166 33.0229 111.169 33.0227 111.173 33.0225 cv
111.169 33.0227 111.166 33.0229 111.162 33.0231 cv
111.174 33.0225 mo
111.181 33.0221 111.189 33.0217 111.196 33.0213 cv
111.189 33.0217 111.181 33.0221 111.174 33.0225 cv
111.196 33.0213 mo
111.222 33.0199 111.248 33.0186 111.274 33.0174 cv
111.248 33.0186 111.221 33.0199 111.196 33.0213 cv
111.275 33.0173 mo
111.278 33.0171 111.281 33.017 111.284 33.0169 cv
111.281 33.017 111.278 33.0172 111.275 33.0173 cv
111.286 33.0168 mo
111.289 33.0166 111.292 33.0165 111.295 33.0163 cv
111.292 33.0165 111.29 33.0166 111.286 33.0168 cv
111.298 33.0162 mo
111.301 33.0161 111.303 33.016 111.306 33.0158 cv
111.304 33.0159 111.301 33.0161 111.298 33.0162 cv
111.309 33.0157 mo
111.312 33.0156 111.315 33.0154 111.318 33.0153 cv
111.315 33.0154 111.312 33.0156 111.309 33.0157 cv
111.321 33.0152 mo
111.324 33.015 111.326 33.0149 111.329 33.0148 cv
111.326 33.0149 111.324 33.015 111.321 33.0152 cv
111.333 33.0146 mo
111.335 33.0145 111.338 33.0144 111.341 33.0143 cv
111.338 33.0144 111.335 33.0145 111.333 33.0146 cv
111.344 33.0141 mo
111.347 33.014 111.35 33.0139 111.352 33.0138 cv
111.35 33.0139 111.347 33.014 111.344 33.0141 cv
111.356 33.0136 mo
111.359 33.0135 111.361 33.0134 111.364 33.0133 cv
111.361 33.0134 111.358 33.0135 111.356 33.0136 cv
111.367 33.0132 mo
111.37 33.0131 111.372 33.0129 111.375 33.0128 cv
111.373 33.0129 111.369 33.0131 111.367 33.0132 cv
111.379 33.0127 mo
111.382 33.0126 111.384 33.0125 111.387 33.0124 cv
111.384 33.0125 111.382 33.0125 111.379 33.0127 cv
111.391 33.0122 mo
111.394 33.0121 111.395 33.012 111.398 33.0119 cv
111.396 33.012 111.393 33.0121 111.391 33.0122 cv
111.402 33.0117 mo
111.414 33.0113 111.427 33.0108 111.439 33.0103 cv
111.427 33.0108 111.415 33.0113 111.402 33.0117 cv
111.444 33.0101 mo
111.447 33.01 111.449 33.01 111.452 33.0099 cv
111.449 33.01 111.447 33.01 111.444 33.0101 cv
111.455 33.0097 mo
111.458 33.0097 111.46 33.0096 111.463 33.0095 cv
111.46 33.0096 111.458 33.0096 111.455 33.0097 cv
111.467 33.0093 mo
111.469 33.0092 111.472 33.0092 111.474 33.0091 cv
111.472 33.0092 111.47 33.0092 111.467 33.0093 cv
111.479 33.0089 mo
111.481 33.0089 111.484 33.0088 111.486 33.0087 cv
111.483 33.0088 111.481 33.0088 111.479 33.0089 cv
111.491 33.0085 mo
111.493 33.0084 111.495 33.0084 111.497 33.0083 cv
111.495 33.0084 111.493 33.0084 111.491 33.0085 cv
111.502 33.0081 mo
111.504 33.0081 111.507 33.008 111.509 33.0079 cv
111.506 33.008 111.505 33.0081 111.502 33.0081 cv
111.514 33.0077 mo
111.516 33.0077 111.518 33.0076 111.52 33.0076 cv
111.518 33.0076 111.516 33.0077 111.514 33.0077 cv
111.526 33.0074 mo
111.528 33.0073 111.53 33.0073 111.532 33.0072 cv
111.53 33.0073 111.528 33.0073 111.526 33.0074 cv
111.537 33.007 mo
111.54 33.007 111.541 33.0069 111.544 33.0068 cv
111.542 33.0069 111.54 33.007 111.537 33.007 cv
111.549 33.0067 mo
111.551 33.0066 111.553 33.0065 111.555 33.0065 cv
111.553 33.0066 111.551 33.0066 111.549 33.0067 cv
111.561 33.0063 mo
111.563 33.0063 111.565 33.0062 111.567 33.0062 cv
111.565 33.0062 111.563 33.0063 111.561 33.0063 cv
111.573 33.006 mo
111.575 33.0059 111.577 33.0059 111.579 33.0058 cv
111.577 33.0059 111.574 33.0059 111.573 33.006 cv
111.583 33.0057 mo
111.586 33.0056 111.588 33.0056 111.59 33.0055 cv
111.588 33.0056 111.586 33.0056 111.583 33.0057 cv
111.595 33.0054 mo
111.597 33.0053 111.6 33.0053 111.602 33.0052 cv
111.6 33.0053 111.597 33.0053 111.595 33.0054 cv
111.625 33.0046 mo
111.628 33.0045 111.632 33.0044 111.635 33.0044 cv
111.632 33.0044 111.628 33.0045 111.625 33.0046 cv
111.636 33.0043 mo
111.639 33.0043 111.642 33.0042 111.645 33.0041 cv
111.642 33.0042 111.639 33.0043 111.636 33.0043 cv
111.648 33.0041 mo
111.651 33.004 111.653 33.004 111.655 33.0039 cv
111.653 33.0039 111.65 33.004 111.648 33.0041 cv
111.66 33.0038 mo
111.662 33.0037 111.665 33.0037 111.667 33.0036 cv
111.665 33.0037 111.662 33.0037 111.66 33.0038 cv
111.671 33.0035 mo
111.674 33.0035 111.676 33.0034 111.678 33.0034 cv
111.676 33.0034 111.674 33.0035 111.671 33.0035 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[15.84 0 0 17.28 96.48 14.56 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 33 
/H 36 
/M[33 0 0 -36 0 36 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 33 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
huM[Li$mafgAp.Ji%O?qec=VHi&'m&d/`)Fi&^K1bQ-QDi'@)<`rP$Bi(!\G_>rL?i_0;E^B!1?k>D(Q
^B!1BlrWj]^B!1EnQkWi^B!1Hp1*Du^B!1Kqe5,*^B!1N!,gb5^B!=UrArkY^B!L]pc[P]^B![do0;/_
^B!jlmR#ic^B"$tksaNg^B"4'j@J3k^]4?7i(N!o`;oc8i(i4#aoM,8i)/F,cN*J8i)JX5e,\h8i)\d<
f`:18i*#!Eh>lO8i*>3NirIm8i*YEWkQ'68i*tW_m/YT8i+:ihnc6r8i+V&qpAi;8i+q9%quGgYhuM\P
i7m>ngAp/Ni8Nr$ec=WLi90P/d/`*Ji9g.:bQ-RHi:HaEkQ$,~>

%%EndBinary
grestore
np
97.0002 47.9152 mo
97.0454 39.789 103.585 33.173 111.681 33.0033 cv
111.68 33.0033 111.679 33.0034 111.678 33.0034 cv
111.676 33.0034 111.674 33.0035 111.671 33.0035 cv
111.67 33.0036 111.668 33.0036 111.667 33.0036 cv
111.665 33.0037 111.662 33.0037 111.66 33.0038 cv
111.658 33.0038 111.657 33.0039 111.655 33.0039 cv
111.653 33.004 111.651 33.004 111.648 33.0041 cv
111.647 33.0041 111.646 33.0041 111.645 33.0041 cv
111.642 33.0042 111.639 33.0043 111.636 33.0043 cv
111.636 33.0043 111.635 33.0044 111.635 33.0044 cv
111.632 33.0044 111.628 33.0045 111.625 33.0046 cv
111.617 33.0048 111.61 33.005 111.602 33.0052 cv
111.6 33.0053 111.597 33.0053 111.595 33.0054 cv
111.593 33.0054 111.592 33.0055 111.59 33.0055 cv
111.588 33.0056 111.586 33.0056 111.583 33.0057 cv
111.581 33.0057 111.581 33.0058 111.579 33.0058 cv
111.577 33.0059 111.575 33.0059 111.573 33.006 cv
111.571 33.0061 111.569 33.0061 111.567 33.0062 cv
111.565 33.0062 111.563 33.0063 111.561 33.0063 cv
111.559 33.0064 111.557 33.0064 111.555 33.0065 cv
111.553 33.0065 111.551 33.0066 111.549 33.0067 cv
111.547 33.0067 111.545 33.0068 111.544 33.0068 cv
111.541 33.0069 111.54 33.007 111.537 33.007 cv
111.535 33.0071 111.534 33.0071 111.532 33.0072 cv
111.53 33.0073 111.528 33.0073 111.526 33.0074 cv
111.524 33.0074 111.522 33.0075 111.52 33.0076 cv
111.518 33.0076 111.516 33.0077 111.514 33.0077 cv
111.512 33.0078 111.511 33.0079 111.509 33.0079 cv
111.507 33.008 111.504 33.0081 111.502 33.0081 cv
111.501 33.0082 111.499 33.0083 111.497 33.0083 cv
111.495 33.0084 111.493 33.0084 111.491 33.0085 cv
111.489 33.0086 111.487 33.0086 111.486 33.0087 cv
111.484 33.0088 111.481 33.0089 111.479 33.0089 cv
111.477 33.009 111.476 33.009 111.474 33.0091 cv
111.472 33.0092 111.469 33.0092 111.467 33.0093 cv
111.466 33.0094 111.464 33.0094 111.463 33.0095 cv
111.46 33.0096 111.458 33.0097 111.455 33.0097 cv
111.454 33.0098 111.453 33.0098 111.452 33.0099 cv
111.449 33.01 111.447 33.01 111.444 33.0101 cv
111.443 33.0102 111.441 33.0103 111.439 33.0103 cv
111.427 33.0108 111.414 33.0113 111.402 33.0117 cv
111.401 33.0118 111.399 33.0119 111.398 33.0119 cv
111.395 33.012 111.394 33.0121 111.391 33.0122 cv
111.39 33.0122 111.388 33.0123 111.387 33.0124 cv
111.384 33.0125 111.382 33.0126 111.379 33.0127 cv
111.378 33.0127 111.376 33.0128 111.375 33.0128 cv
111.372 33.0129 111.37 33.0131 111.367 33.0132 cv
111.366 33.0132 111.365 33.0132 111.364 33.0133 cv
111.361 33.0134 111.359 33.0135 111.356 33.0136 cv
111.354 33.0137 111.353 33.0137 111.352 33.0138 cv
111.35 33.0139 111.347 33.014 111.344 33.0141 cv
111.343 33.0142 111.342 33.0142 111.341 33.0143 cv
111.338 33.0144 111.335 33.0145 111.333 33.0146 cv
111.332 33.0147 111.33 33.0148 111.329 33.0148 cv
111.326 33.0149 111.324 33.015 111.321 33.0152 cv
111.32 33.0152 111.319 33.0153 111.318 33.0153 cv
111.315 33.0154 111.312 33.0156 111.309 33.0157 cv
111.308 33.0157 111.307 33.0158 111.306 33.0158 cv
111.303 33.016 111.301 33.0161 111.298 33.0162 cv
111.297 33.0163 111.296 33.0163 111.295 33.0163 cv
111.292 33.0165 111.289 33.0166 111.286 33.0168 cv
111.286 33.0168 111.285 33.0168 111.284 33.0169 cv
111.281 33.017 111.278 33.0171 111.275 33.0173 cv
111.274 33.0173 111.274 33.0173 111.274 33.0174 cv
111.248 33.0186 111.222 33.0199 111.196 33.0213 cv
111.196 33.0213 li
111.189 33.0217 111.181 33.0221 111.174 33.0225 cv
111.174 33.0225 111.173 33.0225 111.173 33.0225 cv
111.169 33.0227 111.166 33.0229 111.162 33.0231 cv
111.162 33.0231 li
111.158 33.0233 111.155 33.0235 111.151 33.0237 cv
111.15 33.0238 li
111.147 33.024 111.144 33.0241 111.14 33.0243 cv
111.139 33.0244 111.14 33.0244 111.139 33.0244 cv
111.136 33.0246 111.132 33.0248 111.129 33.025 cv
111.128 33.025 111.128 33.025 111.127 33.0251 cv
111.124 33.0253 111.12 33.0255 111.117 33.0257 cv
111.117 33.0257 li
103.283 33.4825 97.0444 39.9786 97.0002 47.9152 cv
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
111.683 33.0033 mo
111.686 33.0032 111.687 33.0032 111.69 33.0032 cv
111.687 33.0032 111.686 33.0032 111.683 33.0033 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.44 0 0 1.44 110.88 30.4 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~'GM5t(Ddu.)?~>
<~.4H]!0/#.=1]~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.682 33.0033 mo
111.685 33.0032 111.689 33.0032 111.692 33.0031 cv
111.691 33.0031 111.691 33.0031 111.69 33.0032 cv
111.687 33.0032 111.686 33.0032 111.683 33.0033 cv
111.683 33.0033 111.682 33.0033 111.682 33.0033 cv
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.307 33.0031 mo
112.303 33.003 112.3 33.0029 112.297 33.0029 cv
112.3 33.0029 112.303 33.003 112.307 33.0031 cv
111.695 33.003 mo
111.697 33.003 111.699 33.003 111.701 33.0029 cv
111.699 33.003 111.697 33.003 111.695 33.003 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.92 0 0 1.44 110.88 30.4 ]ct
snap_to_device
<<
/T 1
/W 4 
/H 3 
/M[4 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!~>
<~'GM5q(Ddl()B'M4~>
<~.4H\p0/"t31c.$G~>
<~!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.693 33.0031 mo
111.697 33.003 111.7 33.003 111.703 33.0029 cv
111.703 33.0029 111.702 33.0029 111.701 33.0029 cv
111.699 33.003 111.697 33.003 111.695 33.003 cv
111.694 33.0031 111.694 33.0031 111.693 33.0031 cv
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.295 33.0028 mo
112.292 33.0028 112.288 33.0027 112.285 33.0027 cv
112.288 33.0027 112.292 33.0028 112.295 33.0028 cv
111.707 33.0028 mo
111.709 33.0028 111.711 33.0027 111.713 33.0027 cv
111.711 33.0027 111.709 33.0028 111.707 33.0028 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.92 0 0 1.44 110.88 30.4 ]ct
snap_to_device
<<
/T 1
/W 4 
/H 3 
/M[4 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!~>
<~'GM5q(Ddl()B'M4~>
<~.4H\p0/"t31c.$G~>
<~!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.705 33.0028 mo
111.708 33.0028 111.711 33.0027 111.714 33.0027 cv
111.714 33.0027 111.713 33.0027 111.713 33.0027 cv
111.711 33.0027 111.709 33.0028 111.707 33.0028 cv
111.706 33.0028 111.706 33.0028 111.705 33.0028 cv
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.283 33.0026 mo
112.28 33.0026 112.277 33.0025 112.274 33.0025 cv
112.277 33.0025 112.28 33.0026 112.283 33.0026 cv
111.718 33.0026 mo
111.72 33.0026 111.723 33.0025 111.725 33.0025 cv
111.722 33.0025 111.721 33.0026 111.718 33.0026 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.92 0 0 1.44 110.88 30.4 ]ct
snap_to_device
<<
/T 1
/W 4 
/H 3 
/M[4 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!~>
<~'GM5q(Ddl()B'M4~>
<~.4H\p0/"t31c.$G~>
<~!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.717 33.0026 mo
111.72 33.0026 111.723 33.0025 111.726 33.0025 cv
111.725 33.0025 li
111.723 33.0025 111.72 33.0026 111.718 33.0026 cv
111.718 33.0026 111.717 33.0026 111.717 33.0026 cv
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.272 33.0024 mo
112.269 33.0024 112.266 33.0023 112.262 33.0023 cv
112.265 33.0023 112.269 33.0024 112.272 33.0024 cv
111.73 33.0024 mo
111.732 33.0023 111.734 33.0023 111.737 33.0023 cv
111.734 33.0023 111.732 33.0023 111.73 33.0024 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.92 0 0 1.44 110.88 30.4 ]ct
snap_to_device
<<
/T 1
/W 4 
/H 3 
/M[4 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!~>
<~'GM5q(Ddl()B'M4~>
<~.4H\p0/"t31c.$G~>
<~!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.728 33.0024 mo
111.731 33.0024 111.735 33.0023 111.738 33.0023 cv
111.737 33.0023 111.737 33.0023 111.737 33.0023 cv
111.734 33.0023 111.732 33.0023 111.73 33.0024 cv
111.729 33.0024 111.729 33.0024 111.728 33.0024 cv
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.261 33.0022 mo
112.257 33.0022 112.254 33.0021 112.251 33.0021 cv
112.254 33.0021 112.258 33.0022 112.261 33.0022 cv
111.742 33.0022 mo
111.744 33.0022 111.746 33.0021 111.748 33.0021 cv
111.746 33.0021 111.744 33.0021 111.742 33.0022 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.92 0 0 1.44 110.88 30.4 ]ct
snap_to_device
<<
/T 1
/W 4 
/H 3 
/M[4 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!~>
<~'GM5q(Ddl()B'M4~>
<~.4H\p0/"t31c.$G~>
<~!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.74 33.0022 mo
111.743 33.0022 111.746 33.0021 111.749 33.0021 cv
111.749 33.0021 111.749 33.0021 111.748 33.0021 cv
111.746 33.0021 111.744 33.0022 111.742 33.0022 cv
111.741 33.0022 111.74 33.0022 111.74 33.0022 cv
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.249 33.002 mo
112.246 33.002 112.243 33.0019 112.239 33.0019 cv
112.243 33.0019 112.246 33.002 112.249 33.002 cv
111.754 33.002 mo
111.756 33.002 111.758 33.0019 111.76 33.0019 cv
111.758 33.0019 111.755 33.002 111.754 33.002 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.92 0 0 1.44 110.88 30.4 ]ct
snap_to_device
<<
/T 1
/W 4 
/H 3 
/M[4 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!~>
<~'GM5q(Ddl()B'M4~>
<~.4H\p0/"t31c.$G~>
<~!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.751 33.002 mo
111.755 33.002 111.757 33.0019 111.76 33.0019 cv
111.76 33.0019 111.76 33.0019 111.76 33.0019 cv
111.758 33.0019 111.756 33.002 111.754 33.002 cv
111.753 33.002 111.752 33.002 111.751 33.002 cv
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.238 33.0018 mo
112.216 33.0015 112.195 33.0012 112.173 33.001 cv
112.195 33.0012 112.216 33.0015 112.238 33.0018 cv
111.765 33.0018 mo
111.767 33.0018 111.77 33.0017 111.772 33.0017 cv
111.769 33.0017 111.767 33.0018 111.765 33.0018 cv
111.776 33.0016 mo
111.779 33.0016 111.781 33.0016 111.783 33.0015 cv
111.781 33.0016 111.778 33.0016 111.776 33.0016 cv
111.789 33.0015 mo
111.791 33.0014 111.793 33.0014 111.795 33.0014 cv
111.793 33.0014 111.791 33.0014 111.789 33.0015 cv
111.818 33.0011 mo
111.819 33.0011 111.822 33.001 111.824 33.001 cv
111.822 33.001 111.82 33.0011 111.818 33.0011 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.92 0 0 1.44 110.88 30.4 ]ct
snap_to_device
<<
/T 1
/W 4 
/H 3 
/M[4 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!~>
<~'GM5q(Ddl()B'M4~>
<~.4H\p0/"t31c.$G~>
<~!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.763 33.0018 mo
111.784 33.0015 111.805 33.0012 111.826 33.001 cv
111.825 33.001 111.825 33.001 111.824 33.001 cv
111.822 33.001 111.819 33.0011 111.818 33.0011 cv
111.81 33.0012 111.802 33.0013 111.795 33.0014 cv
111.793 33.0014 111.791 33.0014 111.789 33.0015 cv
111.787 33.0015 111.785 33.0015 111.783 33.0015 cv
111.781 33.0016 111.779 33.0016 111.776 33.0016 cv
111.775 33.0017 111.773 33.0017 111.772 33.0017 cv
111.77 33.0017 111.767 33.0018 111.765 33.0018 cv
111.764 33.0018 111.764 33.0018 111.763 33.0018 cv
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.17 33.0009 mo
112.168 33.0009 112.166 33.0009 112.163 33.0009 cv
112.165 33.0009 112.168 33.0009 112.17 33.0009 cv
111.83 33.0009 mo
111.831 33.0009 111.833 33.0009 111.835 33.0009 cv
111.833 33.0009 111.831 33.0009 111.83 33.0009 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.92 0 0 1.44 110.88 30.4 ]ct
snap_to_device
<<
/T 1
/W 4 
/H 3 
/M[4 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!~>
<~'GM5q(Ddl()B'M4~>
<~.4H\p0/"t31c.$G~>
<~!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.83 33.0009 mo
111.832 33.0009 111.834 33.0009 111.837 33.0009 cv
111.836 33.0009 111.835 33.0009 111.835 33.0009 cv
111.833 33.0009 111.831 33.0009 111.83 33.0009 cv
111.829 33.0009 111.83 33.0009 111.83 33.0009 cv
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.159 33.0008 mo
112.156 33.0008 112.154 33.0008 112.152 33.0008 cv
112.154 33.0008 112.156 33.0008 112.159 33.0008 cv
111.841 33.0008 mo
111.843 33.0008 111.845 33.0008 111.847 33.0008 cv
111.845 33.0008 111.843 33.0008 111.841 33.0008 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.44 0 0 1.44 111.36 30.4 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~'GM5t(Ddu.)?~>
<~.4H]!0/#.=1]~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.841 33.0008 mo
111.844 33.0008 111.845 33.0008 111.848 33.0008 cv
111.847 33.0008 li
111.845 33.0008 111.843 33.0008 111.841 33.0008 cv
111.841 33.0008 111.842 33.0008 111.841 33.0008 cv
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.147 33.0007 mo
112.145 33.0007 112.142 33.0007 112.14 33.0006 cv
112.142 33.0007 112.145 33.0007 112.147 33.0007 cv
111.853 33.0007 mo
111.855 33.0007 111.857 33.0007 111.859 33.0006 cv
111.857 33.0007 111.855 33.0007 111.853 33.0007 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.44 0 0 1.44 111.36 30.4 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~'GM5t(Ddu.)?~>
<~.4H]!0/#.=1]~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.853 33.0007 mo
111.855 33.0007 111.857 33.0007 111.859 33.0006 cv
111.859 33.0006 li
111.857 33.0007 111.855 33.0007 111.853 33.0007 cv
111.853 33.0007 li
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.135 33.0006 mo
112.133 33.0006 112.131 33.0006 112.129 33.0005 cv
112.131 33.0006 112.133 33.0006 112.135 33.0006 cv
111.865 33.0006 mo
111.867 33.0006 111.869 33.0006 111.871 33.0005 cv
111.869 33.0006 111.867 33.0006 111.865 33.0006 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.44 0 0 1.44 111.36 30.4 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~'GM5t(Ddu.)?~>
<~.4H]!0/#.=1]~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.865 33.0006 mo
111.867 33.0006 111.869 33.0006 111.871 33.0005 cv
111.871 33.0005 111.871 33.0005 111.871 33.0005 cv
111.869 33.0006 111.867 33.0006 111.865 33.0006 cv
111.865 33.0006 li
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.123 33.0005 mo
112.121 33.0005 112.119 33.0005 112.117 33.0004 cv
112.12 33.0005 112.121 33.0005 112.123 33.0005 cv
111.877 33.0005 mo
111.878 33.0005 111.881 33.0005 111.882 33.0004 cv
111.881 33.0005 111.879 33.0005 111.877 33.0005 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.44 0 0 1.44 111.36 30.4 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~'GM5t(Ddu.)?~>
<~.4H]!0/#.=1]~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.877 33.0005 mo
111.879 33.0005 111.88 33.0005 111.883 33.0004 cv
111.882 33.0004 111.883 33.0004 111.882 33.0004 cv
111.881 33.0005 111.878 33.0005 111.877 33.0005 cv
111.877 33.0005 li
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.112 33.0004 mo
112.11 33.0004 112.107 33.0004 112.106 33.0004 cv
112.108 33.0004 112.11 33.0004 112.112 33.0004 cv
111.888 33.0004 mo
111.89 33.0004 111.892 33.0004 111.894 33.0004 cv
111.892 33.0004 111.89 33.0004 111.888 33.0004 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.44 0 0 1.44 111.36 30.4 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~'GM5t(Ddu.)?~>
<~.4H]!0/#.=1]~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.888 33.0004 mo
111.89 33.0004 111.892 33.0004 111.894 33.0004 cv
111.894 33.0004 li
111.892 33.0004 111.89 33.0004 111.888 33.0004 cv
111.888 33.0004 li
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.1 33.0003 mo
112.098 33.0003 112.096 33.0003 112.094 33.0003 cv
112.096 33.0003 112.098 33.0003 112.1 33.0003 cv
111.901 33.0003 mo
111.903 33.0003 111.904 33.0003 111.906 33.0003 cv
111.904 33.0003 111.902 33.0003 111.901 33.0003 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.44 0 0 1.44 111.36 30.4 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~'GM5t(Ddu.)?~>
<~.4H]!0/#.=1]~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.9 33.0003 mo
111.902 33.0003 111.904 33.0003 111.906 33.0003 cv
111.906 33.0003 li
111.904 33.0003 111.903 33.0003 111.901 33.0003 cv
111.9 33.0003 li
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.088 33.0002 mo
112.086 33.0002 112.084 33.0002 112.082 33.0002 cv
112.084 33.0002 112.086 33.0002 112.088 33.0002 cv
111.912 33.0002 mo
111.914 33.0002 111.916 33.0002 111.918 33.0002 cv
111.916 33.0002 111.914 33.0002 111.912 33.0002 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.44 0 0 1.44 111.36 30.4 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~'GM5t(Ddu.)?~>
<~.4H]!0/#.=1]~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.912 33.0002 mo
111.914 33.0002 111.916 33.0002 111.918 33.0002 cv
111.918 33.0002 li
111.916 33.0002 111.914 33.0002 111.912 33.0002 cv
111.912 33.0002 li
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.076 33.0002 mo
112.075 33.0002 112.072 33.0002 112.071 33.0002 cv
112.072 33.0002 112.074 33.0002 112.076 33.0002 cv
111.924 33.0002 mo
111.926 33.0002 111.928 33.0002 111.929 33.0002 cv
111.928 33.0002 111.926 33.0002 111.924 33.0002 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.44 0 0 1.44 111.36 30.4 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~'GM5t(Ddu.)?~>
<~.4H]!0/#.=1]~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.924 33.0002 mo
111.926 33.0002 111.928 33.0002 111.929 33.0002 cv
111.929 33.0002 li
111.928 33.0002 111.926 33.0002 111.924 33.0002 cv
111.924 33.0002 li
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.064 33.0001 mo
112.062 33.0001 112.061 33.0001 112.059 33.0001 cv
112.06 33.0001 112.063 33.0001 112.064 33.0001 cv
111.936 33.0001 mo
111.937 33.0001 111.94 33.0001 111.941 33.0001 cv
111.939 33.0001 111.938 33.0001 111.936 33.0001 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.44 0 0 1.44 111.36 30.4 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~'GM5t(Ddu.)?~>
<~.4H]!0/#.=1]~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.936 33.0001 mo
111.937 33.0001 111.94 33.0001 111.941 33.0001 cv
111.941 33.0001 li
111.94 33.0001 111.937 33.0001 111.936 33.0001 cv
111.936 33.0001 li
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.052 33.0001 mo
112.05 33.0001 112.049 33.0001 112.047 33.0001 cv
112.049 33.0001 112.05 33.0001 112.052 33.0001 cv
111.948 33.0001 mo
111.949 33.0001 111.951 33.0001 111.953 33.0001 cv
111.951 33.0001 111.95 33.0001 111.948 33.0001 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.44 0 0 1.44 111.36 30.4 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~'GM5t(Ddu.)?~>
<~.4H]!0/#.=1]~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.948 33.0001 mo
111.95 33.0001 111.951 33.0001 111.953 33.0001 cv
111.953 33.0001 li
111.951 33.0001 111.949 33.0001 111.948 33.0001 cv
111.948 33.0001 li
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.041 33 mo
112.039 33 112.037 33 112.035 33 cv
112.037 33 112.039 33 112.041 33 cv
111.959 33 mo
111.961 33 111.963 33 111.965 33 cv
111.963 33 111.961 33 111.959 33 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.44 0 0 1.44 111.36 30.4 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~'GM5t(Ddu.)?~>
<~.4H]!0/#.=1]~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.959 33 mo
111.961 33 111.963 33 111.965 33 cv
111.965 33 li
111.963 33 111.961 33 111.959 33 cv
111.959 33 li
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.028 33 mo
112.027 33 112.025 33 112.024 33 cv
112.025 33 112.027 33 112.028 33 cv
111.972 33 mo
111.973 33 111.975 33 111.976 33 cv
111.975 33 111.973 33 111.972 33 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.44 0 0 1.44 111.36 30.4 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~'GM5t(Ddu.)?~>
<~.4H]!0/#.=1]~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.972 33 mo
111.973 33 111.975 33 111.976 33 cv
111.976 33 li
111.975 33 111.973 33 111.972 33 cv
111.972 33 li
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
112.016 33 mo
112.014 33 112.013 33 112.012 33 cv
112.013 33 112.014 33 112.016 33 cv
111.984 33 mo
111.986 33 111.987 33 111.988 33 cv
111.987 33 111.985 33 111.984 33 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[1.44 0 0 1.44 111.36 30.4 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~'GM5t(Ddu.)?~>
<~.4H]!0/#.=1]~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
111.984 33 mo
111.986 33 111.987 33 111.988 33 cv
111.988 33 li
111.987 33 111.986 33 111.984 33 cv
111.984 33 li
gsave
[-9.28898e-07 21.2507 -21.2507 -9.28898e-07 112 28.75 ]ct
clp
/2 /Gradient get_res exec grestore
np
97.2104 46.591 mo
97.1643 46.5783 97.1182 46.5656 97.0723 46.5527 cv
97.7758 39.2482 103.736 33.4563 111.117 33.0257 cv
111.117 33.0257 li
111.12 33.0255 111.124 33.0253 111.127 33.0251 cv
111.128 33.025 111.128 33.025 111.129 33.025 cv
111.132 33.0248 111.135 33.0246 111.139 33.0244 cv
111.139 33.0244 111.14 33.0244 111.14 33.0243 cv
111.143 33.0242 111.147 33.024 111.15 33.0238 cv
111.151 33.0238 111.151 33.0237 111.151 33.0237 cv
111.155 33.0235 111.158 33.0234 111.162 33.0231 cv
111.162 33.0231 li
111.166 33.0229 111.169 33.0227 111.173 33.0225 cv
111.173 33.0225 111.174 33.0225 111.174 33.0225 cv
111.181 33.0221 111.189 33.0217 111.196 33.0213 cv
111.196 33.0213 111.195 33.0213 111.196 33.0213 cv
111.221 33.0199 111.248 33.0186 111.274 33.0174 cv
111.275 33.0173 li
111.278 33.0172 111.281 33.017 111.284 33.0169 cv
111.285 33.0168 111.286 33.0168 111.286 33.0168 cv
111.29 33.0166 111.292 33.0165 111.295 33.0163 cv
111.296 33.0163 111.297 33.0163 111.298 33.0162 cv
111.301 33.0161 111.304 33.0159 111.306 33.0158 cv
111.307 33.0158 111.308 33.0157 111.309 33.0157 cv
111.312 33.0156 111.315 33.0154 111.318 33.0153 cv
111.319 33.0153 111.32 33.0152 111.321 33.0152 cv
111.324 33.015 111.326 33.0149 111.329 33.0148 cv
111.33 33.0148 111.331 33.0147 111.333 33.0146 cv
111.335 33.0145 111.338 33.0144 111.341 33.0143 cv
111.342 33.0142 111.343 33.0142 111.344 33.0141 cv
111.347 33.014 111.35 33.0139 111.352 33.0138 cv
111.353 33.0138 111.355 33.0137 111.356 33.0136 cv
111.358 33.0135 111.361 33.0134 111.364 33.0133 cv
111.365 33.0133 111.366 33.0132 111.367 33.0132 cv
111.369 33.0131 111.373 33.0129 111.375 33.0128 cv
111.376 33.0128 111.378 33.0127 111.379 33.0127 cv
111.382 33.0125 111.384 33.0125 111.387 33.0124 cv
111.388 33.0123 111.39 33.0122 111.391 33.0122 cv
111.393 33.0121 111.396 33.012 111.398 33.0119 cv
111.399 33.0119 111.401 33.0118 111.402 33.0117 cv
111.415 33.0113 111.427 33.0108 111.439 33.0103 cv
111.441 33.0103 111.443 33.0102 111.444 33.0101 cv
111.447 33.01 111.449 33.01 111.452 33.0099 cv
111.453 33.0098 111.454 33.0098 111.455 33.0097 cv
111.458 33.0096 111.46 33.0096 111.463 33.0095 cv
111.464 33.0094 111.466 33.0094 111.467 33.0093 cv
111.47 33.0092 111.472 33.0092 111.474 33.0091 cv
111.476 33.009 111.477 33.009 111.479 33.0089 cv
111.481 33.0088 111.483 33.0088 111.486 33.0087 cv
111.487 33.0086 111.489 33.0086 111.491 33.0085 cv
111.493 33.0084 111.495 33.0084 111.497 33.0083 cv
111.499 33.0083 111.501 33.0082 111.502 33.0081 cv
111.505 33.0081 111.506 33.008 111.509 33.0079 cv
111.511 33.0079 111.512 33.0078 111.514 33.0077 cv
111.516 33.0077 111.518 33.0076 111.52 33.0076 cv
111.522 33.0075 111.524 33.0074 111.526 33.0074 cv
111.528 33.0073 111.53 33.0073 111.532 33.0072 cv
111.533 33.0071 111.536 33.0071 111.537 33.007 cv
111.54 33.007 111.542 33.0069 111.544 33.0068 cv
111.545 33.0068 111.547 33.0067 111.549 33.0067 cv
111.551 33.0066 111.553 33.0066 111.555 33.0065 cv
111.557 33.0064 111.559 33.0064 111.561 33.0063 cv
111.563 33.0063 111.565 33.0062 111.567 33.0062 cv
111.569 33.0061 111.571 33.0061 111.573 33.006 cv
111.574 33.0059 111.577 33.0059 111.579 33.0058 cv
111.58 33.0058 111.582 33.0057 111.583 33.0057 cv
111.586 33.0056 111.588 33.0056 111.59 33.0055 cv
111.591 33.0055 111.594 33.0054 111.595 33.0054 cv
111.597 33.0053 111.6 33.0053 111.602 33.0052 cv
111.61 33.005 111.617 33.0048 111.625 33.0046 cv
111.628 33.0045 111.632 33.0044 111.635 33.0044 cv
111.635 33.0044 111.636 33.0043 111.636 33.0043 cv
111.639 33.0043 111.642 33.0042 111.645 33.0041 cv
111.646 33.0041 111.647 33.0041 111.648 33.0041 cv
111.65 33.004 111.653 33.0039 111.655 33.0039 cv
111.657 33.0039 111.658 33.0038 111.66 33.0038 cv
111.662 33.0037 111.665 33.0037 111.667 33.0036 cv
111.669 33.0036 111.669 33.0036 111.671 33.0035 cv
111.674 33.0035 111.676 33.0034 111.678 33.0034 cv
111.68 33.0034 111.682 33.0033 111.683 33.0033 cv
111.686 33.0032 111.687 33.0032 111.69 33.0032 cv
111.691 33.0031 111.693 33.0031 111.695 33.003 cv
111.697 33.003 111.699 33.003 111.701 33.0029 cv
111.703 33.0029 111.705 33.0028 111.707 33.0028 cv
111.709 33.0028 111.711 33.0027 111.713 33.0027 cv
111.715 33.0027 111.716 33.0026 111.718 33.0026 cv
111.721 33.0026 111.722 33.0025 111.725 33.0025 cv
111.726 33.0025 111.728 33.0024 111.73 33.0024 cv
111.732 33.0023 111.734 33.0023 111.737 33.0023 cv
111.738 33.0022 111.74 33.0022 111.742 33.0022 cv
111.744 33.0021 111.746 33.0021 111.748 33.0021 cv
111.75 33.002 111.752 33.002 111.754 33.002 cv
111.755 33.002 111.758 33.0019 111.76 33.0019 cv
111.762 33.0019 111.763 33.0018 111.765 33.0018 cv
111.767 33.0018 111.769 33.0017 111.772 33.0017 cv
111.773 33.0017 111.775 33.0017 111.776 33.0016 cv
111.778 33.0016 111.781 33.0016 111.783 33.0015 cv
111.785 33.0015 111.787 33.0015 111.789 33.0015 cv
111.791 33.0014 111.793 33.0014 111.795 33.0014 cv
111.803 33.0013 111.81 33.0012 111.818 33.0011 cv
111.82 33.0011 111.822 33.001 111.824 33.001 cv
111.826 33.001 111.827 33.001 111.83 33.0009 cv
111.831 33.0009 111.833 33.0009 111.835 33.0009 cv
111.837 33.0009 111.839 33.0008 111.841 33.0008 cv
111.843 33.0008 111.845 33.0008 111.847 33.0008 cv
111.849 33.0007 111.851 33.0007 111.853 33.0007 cv
111.855 33.0007 111.857 33.0007 111.859 33.0006 cv
111.861 33.0006 111.863 33.0006 111.865 33.0006 cv
111.867 33.0006 111.869 33.0006 111.871 33.0005 cv
111.873 33.0005 111.875 33.0005 111.877 33.0005 cv
111.879 33.0005 111.881 33.0005 111.882 33.0004 cv
111.885 33.0004 111.886 33.0004 111.888 33.0004 cv
111.89 33.0004 111.892 33.0004 111.894 33.0004 cv
111.896 33.0003 111.899 33.0003 111.901 33.0003 cv
111.902 33.0003 111.904 33.0003 111.906 33.0003 cv
111.908 33.0003 111.91 33.0003 111.912 33.0002 cv
111.914 33.0002 111.916 33.0002 111.918 33.0002 cv
111.92 33.0002 111.922 33.0002 111.924 33.0002 cv
111.926 33.0002 111.928 33.0002 111.929 33.0002 cv
111.932 33.0001 111.933 33.0001 111.936 33.0001 cv
111.938 33.0001 111.939 33.0001 111.941 33.0001 cv
111.944 33.0001 111.945 33.0001 111.948 33.0001 cv
111.95 33.0001 111.951 33.0001 111.953 33.0001 cv
111.955 33.0001 111.957 33.0001 111.959 33 cv
111.961 33 111.963 33 111.965 33 cv
111.967 33 111.97 33 111.972 33 cv
111.973 33 111.975 33 111.976 33 cv
111.979 33 111.982 33 111.984 33 cv
111.985 33 111.987 33 111.988 33 cv
111.992 33 111.996 33 112 33 cv
112 33 li
112.004 33 112.008 33 112.012 33 cv
112.013 33 112.014 33 112.016 33 cv
112.018 33 112.021 33 112.024 33 cv
112.025 33 112.027 33 112.028 33 cv
112.03 33 112.033 33 112.035 33 cv
112.037 33 112.039 33 112.041 33 cv
112.043 33.0001 112.045 33.0001 112.047 33.0001 cv
112.049 33.0001 112.05 33.0001 112.052 33.0001 cv
112.054 33.0001 112.057 33.0001 112.059 33.0001 cv
112.061 33.0001 112.062 33.0001 112.064 33.0001 cv
112.067 33.0001 112.068 33.0001 112.071 33.0002 cv
112.072 33.0002 112.075 33.0002 112.076 33.0002 cv
112.078 33.0002 112.08 33.0002 112.082 33.0002 cv
112.084 33.0002 112.086 33.0002 112.088 33.0002 cv
112.09 33.0003 112.092 33.0003 112.094 33.0003 cv
112.096 33.0003 112.098 33.0003 112.1 33.0003 cv
112.102 33.0003 112.104 33.0003 112.106 33.0004 cv
112.107 33.0004 112.11 33.0004 112.112 33.0004 cv
112.113 33.0004 112.116 33.0004 112.117 33.0004 cv
112.119 33.0005 112.121 33.0005 112.123 33.0005 cv
112.125 33.0005 112.127 33.0005 112.129 33.0005 cv
112.131 33.0006 112.133 33.0006 112.135 33.0006 cv
112.137 33.0006 112.138 33.0006 112.14 33.0006 cv
112.142 33.0007 112.145 33.0007 112.147 33.0007 cv
112.148 33.0007 112.15 33.0007 112.152 33.0008 cv
112.154 33.0008 112.156 33.0008 112.159 33.0008 cv
112.16 33.0008 112.161 33.0008 112.163 33.0009 cv
112.166 33.0009 112.168 33.0009 112.17 33.0009 cv
112.171 33.001 112.172 33.001 112.173 33.001 cv
112.195 33.0012 112.216 33.0015 112.238 33.0018 cv
112.238 33.0019 112.239 33.0019 112.239 33.0019 cv
112.243 33.0019 112.246 33.002 112.249 33.002 cv
112.25 33.002 112.25 33.002 112.251 33.0021 cv
112.254 33.0021 112.257 33.0022 112.261 33.0022 cv
112.262 33.0022 112.261 33.0022 112.262 33.0023 cv
112.266 33.0023 112.269 33.0024 112.272 33.0024 cv
112.272 33.0024 112.273 33.0024 112.274 33.0025 cv
112.277 33.0025 112.28 33.0026 112.283 33.0026 cv
112.284 33.0026 112.285 33.0027 112.285 33.0027 cv
112.288 33.0027 112.292 33.0028 112.295 33.0028 cv
112.295 33.0029 112.296 33.0029 112.297 33.0029 cv
112.3 33.0029 112.303 33.003 112.307 33.0031 cv
112.307 33.0031 112.307 33.0031 112.307 33.0031 cv
119.951 33.1574 126.205 39.0591 126.926 46.5527 cv
126.88 46.5654 126.835 46.5781 126.789 46.5906 cv
125.633 39.4622 119.449 34 112 34 cv
104.55 34 98.3645 39.4619 97.2104 46.591 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[31.2 0 0 15.36 96.48 16.48 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 65 
/H 32 
/M[65 0 0 -32 0 32 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 65 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 65 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 65 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 65 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcP?A^]Dj`XoQuQliFm'fDqiMgB-L=^]`KoU&a-Shugb!j8b\Mk60KA^^99+Q2p:Ve-<\r
n,SOMo*<PG^^g&<M?*GYa9fWpquDBMrsHUM_%cqbK)kiM^^\=%qAG+ipAhu>boQEsNr\\M^_,$>mNRnr
lN"^6fdGu2RfMOM^_YfYi[fZ]rW'_O`\I?FL]I2M^`1KVof%m2nc6HHdQR%^PQ:%M^`qDuksLm>joE1C
hFZa!TE*mM^aS8@h,1$Lg&So=l<)Y?X8p`M^b>1ad9j0Zc2bX9p1DK[\,aSM^c210`G`Hj_>qD6!'@u?
_uRFMa$BJd^jsQ-[K+Q?oL-KNciC9Mdn/t!^lm7KWW:^HkY8j^g]4,MhbrH3^nnpKrW%H~>

%%EndBinary
grestore
np
111.117 33.0257 mo
111.117 33.0257 li
111.117 33.0257 li
111.127 33.0251 mo
111.128 33.025 111.128 33.025 111.129 33.025 cv
111.128 33.025 111.128 33.025 111.127 33.0251 cv
111.139 33.0244 mo
111.14 33.0244 111.139 33.0244 111.14 33.0243 cv
111.14 33.0244 111.139 33.0244 111.139 33.0244 cv
111.15 33.0238 mo
111.151 33.0237 li
111.151 33.0237 111.151 33.0238 111.15 33.0238 cv
111.162 33.0231 mo
111.162 33.0231 li
111.162 33.0231 li
111.173 33.0225 mo
111.173 33.0225 111.174 33.0225 111.174 33.0225 cv
111.174 33.0225 111.173 33.0225 111.173 33.0225 cv
111.196 33.0213 mo
111.196 33.0213 li
111.195 33.0213 111.196 33.0213 111.196 33.0213 cv
111.274 33.0174 mo
111.274 33.0173 111.274 33.0173 111.275 33.0173 cv
111.274 33.0174 li
111.284 33.0169 mo
111.285 33.0168 111.286 33.0168 111.286 33.0168 cv
111.286 33.0168 111.285 33.0168 111.284 33.0169 cv
111.295 33.0163 mo
111.296 33.0163 111.297 33.0163 111.298 33.0162 cv
111.297 33.0163 111.296 33.0163 111.295 33.0163 cv
111.306 33.0158 mo
111.307 33.0158 111.308 33.0157 111.309 33.0157 cv
111.308 33.0157 111.307 33.0158 111.306 33.0158 cv
111.318 33.0153 mo
111.319 33.0153 111.32 33.0152 111.321 33.0152 cv
111.32 33.0152 111.319 33.0153 111.318 33.0153 cv
111.329 33.0148 mo
111.33 33.0148 111.332 33.0147 111.333 33.0146 cv
111.331 33.0147 111.33 33.0148 111.329 33.0148 cv
111.341 33.0143 mo
111.342 33.0142 111.343 33.0142 111.344 33.0141 cv
111.343 33.0142 111.342 33.0142 111.341 33.0143 cv
111.352 33.0138 mo
111.353 33.0137 111.354 33.0137 111.356 33.0136 cv
111.355 33.0137 111.353 33.0138 111.352 33.0138 cv
111.364 33.0133 mo
111.365 33.0132 111.366 33.0132 111.367 33.0132 cv
111.366 33.0132 111.365 33.0133 111.364 33.0133 cv
111.375 33.0128 mo
111.376 33.0128 111.378 33.0127 111.379 33.0127 cv
111.378 33.0127 111.376 33.0128 111.375 33.0128 cv
111.387 33.0124 mo
111.388 33.0123 111.39 33.0122 111.391 33.0122 cv
111.39 33.0122 111.388 33.0123 111.387 33.0124 cv
111.398 33.0119 mo
111.399 33.0119 111.401 33.0118 111.402 33.0117 cv
111.401 33.0118 111.399 33.0119 111.398 33.0119 cv
111.439 33.0103 mo
111.441 33.0103 111.443 33.0102 111.444 33.0101 cv
111.443 33.0102 111.441 33.0103 111.439 33.0103 cv
111.452 33.0099 mo
111.453 33.0098 111.454 33.0098 111.455 33.0097 cv
111.454 33.0098 111.453 33.0098 111.452 33.0099 cv
111.463 33.0095 mo
111.464 33.0094 111.466 33.0094 111.467 33.0093 cv
111.466 33.0094 111.464 33.0094 111.463 33.0095 cv
111.474 33.0091 mo
111.476 33.009 111.477 33.009 111.479 33.0089 cv
111.477 33.009 111.476 33.009 111.474 33.0091 cv
111.486 33.0087 mo
111.487 33.0086 111.489 33.0086 111.491 33.0085 cv
111.489 33.0086 111.487 33.0086 111.486 33.0087 cv
111.497 33.0083 mo
111.499 33.0083 111.501 33.0082 111.502 33.0081 cv
111.501 33.0082 111.499 33.0083 111.497 33.0083 cv
111.509 33.0079 mo
111.511 33.0079 111.512 33.0078 111.514 33.0077 cv
111.512 33.0078 111.511 33.0079 111.509 33.0079 cv
111.52 33.0076 mo
111.522 33.0075 111.524 33.0074 111.526 33.0074 cv
111.524 33.0074 111.522 33.0075 111.52 33.0076 cv
111.532 33.0072 mo
111.534 33.0071 111.535 33.0071 111.537 33.007 cv
111.536 33.0071 111.533 33.0071 111.532 33.0072 cv
111.544 33.0068 mo
111.545 33.0068 111.547 33.0067 111.549 33.0067 cv
111.547 33.0067 111.545 33.0068 111.544 33.0068 cv
111.555 33.0065 mo
111.557 33.0064 111.559 33.0064 111.561 33.0063 cv
111.559 33.0064 111.557 33.0064 111.555 33.0065 cv
111.567 33.0062 mo
111.569 33.0061 111.571 33.0061 111.573 33.006 cv
111.571 33.0061 111.569 33.0061 111.567 33.0062 cv
111.579 33.0058 mo
111.581 33.0058 111.581 33.0057 111.583 33.0057 cv
111.582 33.0057 111.58 33.0058 111.579 33.0058 cv
111.59 33.0055 mo
111.592 33.0055 111.593 33.0054 111.595 33.0054 cv
111.594 33.0054 111.591 33.0055 111.59 33.0055 cv
111.602 33.0052 mo
111.61 33.005 111.617 33.0048 111.625 33.0046 cv
111.617 33.0048 111.61 33.005 111.602 33.0052 cv
111.635 33.0044 mo
111.635 33.0044 111.636 33.0043 111.636 33.0043 cv
111.636 33.0043 111.635 33.0044 111.635 33.0044 cv
111.645 33.0041 mo
111.646 33.0041 111.647 33.0041 111.648 33.0041 cv
111.647 33.0041 111.646 33.0041 111.645 33.0041 cv
111.655 33.0039 mo
111.657 33.0039 111.658 33.0038 111.66 33.0038 cv
111.658 33.0038 111.657 33.0039 111.655 33.0039 cv
111.667 33.0036 mo
111.668 33.0036 111.67 33.0036 111.671 33.0035 cv
111.669 33.0036 111.669 33.0036 111.667 33.0036 cv
111.678 33.0034 mo
111.679 33.0034 111.68 33.0033 111.681 33.0033 cv
111.682 33.0033 li
111.682 33.0033 111.683 33.0033 111.683 33.0033 cv
111.682 33.0033 111.68 33.0034 111.678 33.0034 cv
111.69 33.0032 mo
111.691 33.0031 111.691 33.0031 111.692 33.0031 cv
111.693 33.0031 111.693 33.0031 111.693 33.0031 cv
111.694 33.0031 111.694 33.0031 111.695 33.003 cv
111.693 33.0031 111.691 33.0031 111.69 33.0032 cv
111.701 33.0029 mo
111.702 33.0029 111.703 33.0029 111.703 33.0029 cv
111.704 33.0029 111.705 33.0029 111.705 33.0028 cv
111.706 33.0028 111.706 33.0028 111.707 33.0028 cv
111.705 33.0028 111.703 33.0029 111.701 33.0029 cv
111.713 33.0027 mo
111.713 33.0027 111.714 33.0027 111.714 33.0027 cv
111.715 33.0027 111.716 33.0026 111.717 33.0026 cv
111.717 33.0026 111.718 33.0026 111.718 33.0026 cv
111.716 33.0026 111.715 33.0027 111.713 33.0027 cv
111.725 33.0025 mo
111.726 33.0025 li
111.727 33.0024 111.728 33.0024 111.728 33.0024 cv
111.729 33.0024 111.729 33.0024 111.73 33.0024 cv
111.728 33.0024 111.726 33.0025 111.725 33.0025 cv
111.737 33.0023 mo
111.737 33.0023 111.737 33.0023 111.738 33.0023 cv
111.739 33.0022 111.739 33.0022 111.74 33.0022 cv
111.74 33.0022 111.741 33.0022 111.742 33.0022 cv
111.74 33.0022 111.738 33.0022 111.737 33.0023 cv
111.748 33.0021 mo
111.749 33.0021 111.749 33.0021 111.749 33.0021 cv
111.75 33.002 111.751 33.002 111.751 33.002 cv
111.752 33.002 111.753 33.002 111.754 33.002 cv
111.752 33.002 111.75 33.002 111.748 33.0021 cv
111.76 33.0019 mo
111.76 33.0019 111.76 33.0019 111.76 33.0019 cv
111.761 33.0019 111.762 33.0019 111.763 33.0018 cv
111.764 33.0018 111.764 33.0018 111.765 33.0018 cv
111.763 33.0018 111.762 33.0019 111.76 33.0019 cv
111.772 33.0017 mo
111.773 33.0017 111.775 33.0017 111.776 33.0016 cv
111.775 33.0017 111.773 33.0017 111.772 33.0017 cv
111.783 33.0015 mo
111.785 33.0015 111.787 33.0015 111.789 33.0015 cv
111.787 33.0015 111.785 33.0015 111.783 33.0015 cv
111.795 33.0014 mo
111.802 33.0013 111.81 33.0012 111.818 33.0011 cv
111.81 33.0012 111.803 33.0013 111.795 33.0014 cv
111.824 33.001 mo
111.825 33.001 111.825 33.001 111.826 33.001 cv
111.827 33.001 111.829 33.001 111.83 33.0009 cv
111.83 33.0009 111.829 33.0009 111.83 33.0009 cv
111.827 33.001 111.826 33.001 111.824 33.001 cv
111.835 33.0009 mo
111.835 33.0009 111.836 33.0009 111.837 33.0009 cv
111.838 33.0009 111.84 33.0008 111.841 33.0008 cv
111.842 33.0008 111.841 33.0008 111.841 33.0008 cv
111.839 33.0008 111.837 33.0009 111.835 33.0009 cv
111.847 33.0008 mo
111.848 33.0008 li
111.849 33.0007 111.852 33.0007 111.853 33.0007 cv
111.853 33.0007 li
111.851 33.0007 111.849 33.0007 111.847 33.0008 cv
111.859 33.0006 mo
111.859 33.0006 li
111.862 33.0006 111.863 33.0006 111.865 33.0006 cv
111.865 33.0006 li
111.863 33.0006 111.861 33.0006 111.859 33.0006 cv
111.871 33.0005 mo
111.871 33.0005 111.871 33.0005 111.871 33.0005 cv
111.873 33.0005 111.875 33.0005 111.877 33.0005 cv
111.877 33.0005 li
111.875 33.0005 111.873 33.0005 111.871 33.0005 cv
111.882 33.0004 mo
111.883 33.0004 111.882 33.0004 111.883 33.0004 cv
111.884 33.0004 111.887 33.0004 111.888 33.0004 cv
111.888 33.0004 li
111.886 33.0004 111.885 33.0004 111.882 33.0004 cv
111.894 33.0004 mo
111.894 33.0004 li
111.896 33.0003 111.898 33.0003 111.9 33.0003 cv
111.901 33.0003 li
111.899 33.0003 111.896 33.0003 111.894 33.0004 cv
111.906 33.0003 mo
111.906 33.0003 li
111.908 33.0003 111.91 33.0003 111.912 33.0002 cv
111.912 33.0002 li
111.91 33.0003 111.908 33.0003 111.906 33.0003 cv
111.918 33.0002 mo
111.918 33.0002 li
111.92 33.0002 111.922 33.0002 111.924 33.0002 cv
111.924 33.0002 li
111.922 33.0002 111.92 33.0002 111.918 33.0002 cv
111.929 33.0002 mo
111.929 33.0002 li
111.932 33.0001 111.933 33.0001 111.936 33.0001 cv
111.936 33.0001 li
111.933 33.0001 111.932 33.0001 111.929 33.0002 cv
111.941 33.0001 mo
111.941 33.0001 li
111.943 33.0001 111.946 33.0001 111.948 33.0001 cv
111.948 33.0001 li
111.945 33.0001 111.944 33.0001 111.941 33.0001 cv
111.953 33.0001 mo
111.953 33.0001 li
111.955 33.0001 111.957 33.0001 111.959 33 cv
111.959 33 li
111.957 33.0001 111.955 33.0001 111.953 33.0001 cv
111.965 33 mo
111.965 33 li
111.967 33 111.97 33 111.972 33 cv
111.972 33 li
111.97 33 111.967 33 111.965 33 cv
111.976 33 mo
111.976 33 li
111.979 33 111.982 33 111.984 33 cv
111.984 33 li
111.982 33 111.979 33 111.976 33 cv
111.988 33 mo
111.988 33 li
111.992 33 111.996 33 112 33 cv
111.996 33 111.992 33 111.988 33 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[2.4 0 0 1.44 110.4 30.4 ]ct
snap_to_device
<<
/T 1
/W 5 
/H 3 
/M[5 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!$#!<E3~>
<~!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
32 63 mo
14.9062 63 1.00001 49.0938 1.00001 32 cv
1.00001 32.3359 1.01466 32.667 1.02539 33 cv
1.06965 31.6144 1.20526 30.2512 1.4263 28.9168 cv
6.54133 30.3871 12.1096 31.5031 18 32.1938 cv
18 46.0185 li
27.334 46.0185 li
27.334 32.9129 li
27.7483 32.9286 28.1634 32.9422 28.5799 32.9538 cv
46 46.0566 li
46 32.1938 li
51.8904 31.5031 57.4587 30.3871 62.5737 28.9168 cv
62.7947 30.2512 62.9303 31.6144 62.9746 33 cv
62.9853 32.667 63 32.3359 63 32 cv
63 49.0938 49.0938 63 32 63 cv
gsave
[25.788 0 0 25.788 31.8081 63.5 ]ct
clp
/0 /Gradient get_res exec grestore
np
32 0 mo
14.3203 0 0 14.3359 0 32 cv
0 49.6719 14.3203 64 32 64 cv
49.6641 64 64 49.6719 64 32 cv
64 14.3359 49.6641 0 32 0 cv
32 1.00001 mo
49.0938 1.00001 63 14.9062 63 32 cv
63 49.0938 49.0938 63 32 63 cv
14.9062 63 1.00001 49.0938 1.00001 32 cv
1.00001 14.9062 14.9062 1.00001 32 1.00001 cv
0 .5 1 0 cmyk
f
18 17.9433 mo
18 46.0185 li
27.334 46.0185 li
27.334 32.0166 li
27.334 17.9433 li
18 17.9433 li
0 0 0 1 cmyk
f
27.334 32.0166 mo
46 46.0566 li
46 17.9814 li
27.334 32.0166 li
f
28.5799 32.9538 mo
28.1634 32.9422 27.7483 32.9286 27.334 32.9129 cv
27.334 32.0166 li
27.334 17.9433 li
18 17.9433 li
18 32.1938 li
12.1096 31.5031 6.54133 30.3871 1.4263 28.9168 cv
3.85838 14.234 16.6383 3.00001 32 3.00001 cv
47.3626 3.00001 60.1418 14.234 62.5737 28.9168 cv
57.4587 30.3871 51.8904 31.5031 46 32.1938 cv
46 17.9814 li
27.334 32.0166 li
28.5799 32.9538 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[62.88 0 0 31.2 .479998 30.4 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 131 
/H 65 
/M[131 0 0 -65 0 65 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 131 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 131 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 131 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 131 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcP`LL'm_`MA>e!NW=Y2m/WF\kmX!tjVXQhJcOU,V@D2fWZ'D+XoO%RblG0^aUYm&`>uYmJcNIa`XfTj
are#5c2`FrXT6o`W=[c,V'4[qJcM>Ajq='pl6MW?mJqh=N<&YcM%f_4KdMBOJcPTHMA5^tN[aKIOoU(6
kl@.ejV=@;i@CW&JcOI(WYa2%XtJ*SZ2fIVaT/mh`>H<C_(`_+JcN=]ar.T)c82^]dK"k!W;tWjV&J2J
Tf(g0JcM2=l5Z'/mPp=gnc47AM#dAmKcPb+rAoZ5JcPHDNZR^3P!/1qQ2lL:jT(koi?+dYh*7b:JcO=$
Xs)19Z9lf&[K(mZ`;mUr_'6`a]gTj?JcN1Yc6KS=dRL?.ec::%V#]?tTd8VhSOqrDJcM&9mNmuAnk4s8
p&K[EK`H]Pr?m=pq+ceIJcP<@Oso]GQ;HgBRK.p>i;fT$h'o4"fi+mNJcO0uZ7=*K[T1FL\c@<^_#V>'
]e%0*\QHuSJcN%UdOhRQelo%Vg&Q^)T`F()SM'&1R9f(XJcLo5nh5tUp0WY`q>c3LJcP`LL,&KYMIQ6f
NW=Y2m/WG-kq\]<j^aq_JcOU,VDHm]Wb9jpXoO%RblG1/aY^SC`G*$dJcNIa`\k:ab%nD#c2`FrXT6p2
WAiOKV/G,iJcM>AjuAbgl>W#-mJqh=N<&Z4M)kERKl_hGJcPTHME:DkNcjl7OoU(6kl@/7jZK,ZiHV's
JcOI(W]elqY'SKAZ2fIVaT/n9`BM"a_0s0#JcN=]b!39uc@<*KdK"k!W;tX<V*WsiTn;8(JcM2=l9^b&
mY$^Unc47AM#dB>KgUHIrJ-+-JcPHDN^WD*P)8R_Q2lL:jT(lAiC9Q#h2J32JcO=$Y"-l0ZB!1i[K(mZ
`;mVC_+;G*]og;7JcN1Yc:P94dZ^esec::%V#]@ETh==0SX&=;JcM&9mS&a:nsGE(p&K[EK`H^!rCr$8
q3m0@JcP<@P"tC>QC[92RK.p>i;fTJh+so?fq58EJcO0uZ;JkD[\Cm<\c@<^_#V>M]i)kG\YR@JJcN%U
dSm8Heu,LFg&Q^)T`F(OSQ+aNRAoHOJcLo5nlC`Np8j+Pq>c3LJcP`LL0+1PMQZWTNW=Y2m/WGSkuaCZ
jftBWJcOU,VHMSTWjC6^XoQiLJ,~>

%%EndBinary
grestore
np
27.334 32.9129 mo
24.1495 32.7924 21.032 32.5494 18 32.1938 cv
18 17.9433 li
27.334 17.9433 li
27.334 32.0166 li
27.334 32.9129 li
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/1 /Gradient get_res exec grestore
np
32 33.001 mo
30.8527 33.001 29.7118 32.9851 28.5799 32.9538 cv
27.334 32.0166 li
46 17.9814 li
46 32.1938 li
41.5017 32.7214 36.8149 33.001 32 33.001 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/1 /Gradient get_res exec grestore
np
29.8799 1.07172 mo
29.8814 1.07162 li
29.8804 1.07169 29.881 1.07165 29.8799 1.07172 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
34.12 1.07171 mo
34.1189 1.07164 34.1197 1.07169 34.1187 1.07162 cv
34.12 1.07171 li
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
29.9026 1.07019 mo
29.9035 1.07012 29.904 1.0701 29.9049 1.07003 cv
29.9039 1.0701 29.9036 1.07012 29.9026 1.07019 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
34.0974 1.07018 mo
34.0964 1.07012 34.0962 1.0701 34.0951 1.07003 cv
34.0974 1.07018 li
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
29.9253 1.06867 mo
29.9263 1.06861 29.9275 1.06852 29.9285 1.06846 cv
29.9275 1.06853 29.9263 1.0686 29.9253 1.06867 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
34.0746 1.06867 mo
34.0736 1.0686 34.0726 1.06853 34.0716 1.06846 cv
34.0725 1.06853 34.0737 1.0686 34.0746 1.06867 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
29.9489 1.06712 mo
29.9498 1.06705 29.9507 1.06699 29.9517 1.06693 cv
29.9507 1.067 29.9499 1.06705 29.9489 1.06712 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
34.0512 1.06712 mo
34.0501 1.06705 34.0494 1.067 34.0484 1.06693 cv
34.0493 1.067 34.0502 1.06705 34.0512 1.06712 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
29.9717 1.06562 mo
29.9737 1.0655 29.9735 1.06551 29.9754 1.06538 cv
29.9744 1.06545 29.9728 1.06556 29.9717 1.06562 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
34.0282 1.06562 mo
34.0272 1.06555 34.0257 1.06546 34.0247 1.06539 cv
34.0266 1.06551 34.0263 1.06549 34.0282 1.06562 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
29.9953 1.06411 mo
29.9962 1.06404 29.9978 1.06395 29.9987 1.06389 cv
29.9977 1.06395 29.9963 1.06404 29.9953 1.06411 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
34.0047 1.0641 mo
34.0037 1.06404 34.0025 1.06396 34.0014 1.06389 cv
34.0024 1.06396 34.0037 1.06404 34.0047 1.0641 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.0183 1.06264 mo
30.0193 1.06258 30.0214 1.06244 30.0224 1.06238 cv
30.0214 1.06244 30.0193 1.06257 30.0183 1.06264 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.9816 1.06263 mo
33.9806 1.06257 33.9788 1.06245 33.9778 1.06239 cv
33.9787 1.06245 33.9807 1.06257 33.9816 1.06263 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.202 1.05154 mo
30.2029 1.05148 30.2042 1.05141 30.2052 1.05135 cv
30.2042 1.05141 30.203 1.05148 30.202 1.05154 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.7979 1.05153 mo
33.7969 1.05147 33.7959 1.05141 33.7949 1.05136 cv
33.7958 1.05141 33.7969 1.05147 33.7979 1.05153 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.2246 1.05025 mo
30.2255 1.05019 30.2278 1.05007 30.2287 1.05001 cv
30.2277 1.05007 30.2256 1.05019 30.2246 1.05025 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.7754 1.05024 mo
33.7743 1.05019 33.7724 1.05007 33.7713 1.05001 cv
33.7723 1.05007 33.7744 1.05019 33.7754 1.05024 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.2468 1.04899 mo
30.2488 1.04889 30.2509 1.04877 30.2528 1.04866 cv
30.2508 1.04877 30.2489 1.04888 30.2468 1.04899 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.7531 1.04899 mo
33.7511 1.04887 33.7493 1.04878 33.7472 1.04866 cv
33.7492 1.04877 33.7512 1.04888 33.7531 1.04899 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.27 1.0477 mo
30.272 1.0476 30.2745 1.04746 30.2764 1.04735 cv
30.2744 1.04746 30.2721 1.04759 30.27 1.0477 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.7299 1.0477 mo
33.7279 1.04759 33.7257 1.04746 33.7236 1.04735 cv
33.7255 1.04746 33.728 1.04759 33.7299 1.0477 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.2932 1.04643 mo
30.2951 1.04633 30.2986 1.04614 30.3006 1.04603 cv
30.2975 1.0462 30.2963 1.04626 30.2932 1.04643 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.7068 1.04643 mo
33.7047 1.04632 33.7016 1.04615 33.6995 1.04603 cv
33.7014 1.04614 33.7048 1.04632 33.7068 1.04643 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.3169 1.04515 mo
30.3189 1.04504 30.322 1.04488 30.3239 1.04477 cv
30.3218 1.04488 30.319 1.04504 30.3169 1.04515 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.683 1.04514 mo
33.681 1.04503 33.6782 1.04488 33.6761 1.04477 cv
33.6781 1.04488 33.6811 1.04504 33.683 1.04514 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.3403 1.0439 mo
30.3432 1.04375 30.3455 1.04363 30.3484 1.04347 cv
30.3453 1.04364 30.3434 1.04374 30.3403 1.0439 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.6597 1.0439 mo
33.6566 1.04373 33.6548 1.04364 33.6518 1.04348 cv
33.6547 1.04363 33.6568 1.04374 33.6597 1.0439 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.3638 1.04266 mo
30.3667 1.04251 30.369 1.04239 30.3719 1.04224 cv
30.3688 1.0424 30.3669 1.0425 30.3638 1.04266 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.6361 1.04266 mo
33.6331 1.0425 33.6313 1.04241 33.6282 1.04225 cv
33.6311 1.0424 33.6332 1.04251 33.6361 1.04266 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.3877 1.04142 mo
30.3906 1.04127 30.3925 1.04118 30.3954 1.04103 cv
30.3934 1.04113 30.3898 1.04131 30.3877 1.04142 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.6122 1.04142 mo
33.6102 1.04131 33.6068 1.04114 33.6047 1.04103 cv
33.6076 1.04118 33.6093 1.04127 33.6122 1.04142 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.4116 1.0402 mo
30.4145 1.04005 30.4153 1.04001 30.4182 1.03987 cv
30.4151 1.04002 30.4147 1.04004 30.4116 1.0402 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.5884 1.0402 mo
33.5853 1.04004 33.5851 1.04003 33.582 1.03988 cv
33.5849 1.04002 33.5855 1.04005 33.5884 1.0402 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.4355 1.039 mo
30.4364 1.03895 30.4397 1.03879 30.4406 1.03874 cv
30.4386 1.03884 30.4375 1.0389 30.4355 1.039 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.5645 1.039 mo
33.5624 1.03889 33.5617 1.03886 33.5596 1.03875 cv
33.5606 1.0388 33.5635 1.03895 33.5645 1.039 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.4495 1.03347 mo
33.4485 1.03342 33.4485 1.03342 33.4475 1.03337 cv
33.4484 1.03342 33.4486 1.03342 33.4495 1.03347 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.5505 1.03347 mo
30.5515 1.03342 30.5516 1.03342 30.5526 1.03337 cv
30.5515 1.03342 30.5515 1.03342 30.5505 1.03347 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.5704 1.03256 mo
30.5723 1.03247 30.5748 1.03235 30.5767 1.03226 cv
30.5746 1.03236 30.5724 1.03246 30.5704 1.03256 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.4296 1.03255 mo
33.4276 1.03246 33.4254 1.03236 33.4233 1.03227 cv
33.4253 1.03235 33.4277 1.03247 33.4296 1.03255 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.593 1.03153 mo
30.5959 1.0314 30.5978 1.03131 30.6007 1.03119 cv
30.5976 1.03132 30.5961 1.03139 30.593 1.03153 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.407 1.03153 mo
33.4039 1.03139 33.4024 1.03132 33.3993 1.03119 cv
33.4022 1.03132 33.4041 1.0314 33.407 1.03153 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.6157 1.03052 mo
30.6186 1.03039 30.6219 1.03025 30.6248 1.03012 cv
30.6217 1.03025 30.6188 1.03038 30.6157 1.03052 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.3843 1.03052 mo
33.3812 1.03038 33.3783 1.03026 33.3752 1.03012 cv
33.3781 1.03025 33.3814 1.03039 33.3843 1.03052 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.64 1.02946 mo
30.6429 1.02933 30.6455 1.02922 30.6484 1.02909 cv
30.6453 1.02923 30.6431 1.02932 30.64 1.02946 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.3601 1.02946 mo
33.357 1.02932 33.3548 1.02923 33.3517 1.02909 cv
33.3546 1.02922 33.3572 1.02933 33.3601 1.02946 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.6637 1.02844 mo
30.6666 1.02831 30.6692 1.0282 30.6722 1.02808 cv
30.6691 1.02821 30.6668 1.02831 30.6637 1.02844 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.3363 1.02844 mo
33.3332 1.0283 33.331 1.02821 33.3279 1.02808 cv
33.3308 1.0282 33.3334 1.02831 33.3363 1.02844 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.3123 1.02742 mo
33.3102 1.02734 33.306 1.02716 33.3039 1.02707 cv
33.3068 1.02719 33.3094 1.0273 33.3123 1.02742 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.6877 1.02742 mo
30.6907 1.0273 30.6932 1.02719 30.6961 1.02707 cv
30.6941 1.02716 30.6898 1.02734 30.6877 1.02742 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.7108 1.02647 mo
30.7137 1.02635 30.7176 1.02619 30.7205 1.02607 cv
30.7174 1.0262 30.7139 1.02634 30.7108 1.02647 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.2892 1.02646 mo
33.2861 1.02634 33.2826 1.0262 33.2795 1.02607 cv
33.2824 1.02619 33.2863 1.02635 33.2892 1.02646 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.2649 1.02548 mo
33.2618 1.02535 33.2593 1.02525 33.2562 1.02513 cv
33.2591 1.02524 33.262 1.02536 33.2649 1.02548 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.7351 1.02548 mo
30.738 1.02536 30.7409 1.02524 30.7438 1.02513 cv
30.7407 1.02525 30.7382 1.02535 30.7351 1.02548 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.7588 1.02453 mo
30.7617 1.02441 30.7649 1.02429 30.7678 1.02418 cv
30.7657 1.02426 30.7609 1.02445 30.7588 1.02453 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.2412 1.02453 mo
33.2391 1.02445 33.2343 1.02426 33.2322 1.02418 cv
33.2352 1.02429 33.2383 1.02441 33.2412 1.02453 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.7829 1.02358 mo
30.7858 1.02347 30.7889 1.02335 30.7918 1.02324 cv
30.7887 1.02336 30.786 1.02346 30.7829 1.02358 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.2171 1.02358 mo
33.214 1.02346 33.2114 1.02336 33.2083 1.02324 cv
33.2112 1.02336 33.2142 1.02347 33.2171 1.02358 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.8063 1.02269 mo
30.8102 1.02254 30.813 1.02243 30.8169 1.02228 cv
30.8138 1.0224 30.8094 1.02257 30.8063 1.02269 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.1937 1.02268 mo
33.1906 1.02257 33.1863 1.0224 33.1832 1.02229 cv
33.1871 1.02243 33.1898 1.02254 33.1937 1.02268 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.8304 1.02178 mo
30.8333 1.02167 30.8371 1.02153 30.8401 1.02142 cv
30.8369 1.02154 30.8335 1.02166 30.8304 1.02178 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.1697 1.02178 mo
33.1666 1.02166 33.1631 1.02154 33.16 1.02142 cv
33.1629 1.02153 33.1668 1.02167 33.1697 1.02178 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.1456 1.02089 mo
33.1436 1.02082 33.1441 1.02084 33.142 1.02076 cv
33.143 1.0208 33.1447 1.02086 33.1456 1.02089 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.8544 1.02089 mo
30.8554 1.02086 30.8569 1.0208 30.8579 1.02076 cv
30.8558 1.02084 30.8565 1.02082 30.8544 1.02089 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.8981 1.01933 mo
30.8991 1.01929 30.9003 1.01925 30.9013 1.01922 cv
30.8992 1.01929 30.9002 1.01926 30.8981 1.01933 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.1019 1.01933 mo
33.1008 1.01929 33.0998 1.01925 33.0988 1.01922 cv
33.0997 1.01925 33.1009 1.01929 33.1019 1.01933 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.0827 1.01866 mo
33.0806 1.01859 33.0769 1.01846 33.0748 1.01839 cv
33.0768 1.01845 33.0807 1.01859 33.0827 1.01866 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.9174 1.01866 mo
30.9193 1.01859 30.9232 1.01845 30.9252 1.01839 cv
30.9231 1.01846 30.9194 1.01859 30.9174 1.01866 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.9392 1.01791 mo
30.9431 1.01778 30.9457 1.01769 30.9496 1.01756 cv
30.9465 1.01767 30.9423 1.01781 30.9392 1.01791 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.0608 1.01791 mo
33.0577 1.01781 33.0535 1.01767 33.0504 1.01756 cv
33.0543 1.01769 33.0569 1.01778 33.0608 1.01791 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.9624 1.01714 mo
30.9663 1.01701 30.9698 1.01689 30.9736 1.01677 cv
30.9695 1.0169 30.9666 1.017 30.9624 1.01714 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.0376 1.01714 mo
33.0334 1.017 33.0305 1.0169 33.0264 1.01677 cv
33.0303 1.01689 33.0337 1.01701 33.0376 1.01714 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
30.9857 1.01637 mo
30.9896 1.01625 30.9943 1.0161 30.9982 1.01597 cv
30.9941 1.01611 30.9899 1.01624 30.9857 1.01637 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
33.0142 1.01637 mo
33.0101 1.01624 33.006 1.01611 33.0019 1.01598 cv
33.0057 1.0161 33.0103 1.01625 33.0142 1.01637 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.0098 1.01561 mo
31.0147 1.01545 31.0172 1.01537 31.0221 1.01522 cv
31.0179 1.01535 31.014 1.01547 31.0098 1.01561 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.9901 1.0156 mo
32.986 1.01547 32.9821 1.01535 32.978 1.01522 cv
32.9828 1.01537 32.9853 1.01545 32.9901 1.0156 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.0339 1.01486 mo
31.0378 1.01474 31.0423 1.0146 31.0462 1.01448 cv
31.042 1.01461 31.0381 1.01473 31.0339 1.01486 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.9661 1.01485 mo
32.9619 1.01473 32.958 1.01461 32.9539 1.01448 cv
32.9577 1.0146 32.9622 1.01474 32.9661 1.01485 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.0586 1.0141 mo
31.0625 1.01399 31.0658 1.01389 31.0697 1.01378 cv
31.0655 1.0139 31.0628 1.01398 31.0586 1.0141 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.9414 1.0141 mo
32.9372 1.01398 32.9345 1.0139 32.9304 1.01378 cv
32.9342 1.01389 32.9375 1.01399 32.9414 1.0141 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.0827 1.01339 mo
31.0866 1.01328 31.0903 1.01317 31.0942 1.01306 cv
31.0901 1.01318 31.0868 1.01327 31.0827 1.01339 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.9173 1.01339 mo
32.9132 1.01327 32.91 1.01318 32.9058 1.01306 cv
32.9097 1.01317 32.9134 1.01328 32.9173 1.01339 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.1064 1.01271 mo
31.1103 1.0126 31.1145 1.01248 31.1184 1.01237 cv
31.1153 1.01246 31.1096 1.01262 31.1064 1.01271 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.8936 1.01271 mo
32.8904 1.01262 32.8847 1.01246 32.8816 1.01237 cv
32.8855 1.01248 32.8897 1.0126 32.8936 1.01271 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.1306 1.01203 mo
31.1345 1.01192 31.1386 1.01181 31.1425 1.0117 cv
31.1384 1.01182 31.1348 1.01191 31.1306 1.01203 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.8694 1.01203 mo
32.8653 1.01191 32.8617 1.01182 32.8575 1.0117 cv
32.8614 1.01181 32.8655 1.01192 32.8694 1.01203 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.1548 1.01137 mo
31.1587 1.01127 31.1628 1.01116 31.1667 1.01105 cv
31.1625 1.01116 31.1589 1.01126 31.1548 1.01137 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.8452 1.01137 mo
32.8411 1.01126 32.8375 1.01116 32.8334 1.01105 cv
32.8373 1.01116 32.8414 1.01127 32.8452 1.01137 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.1788 1.01073 mo
31.1836 1.01061 31.1867 1.01053 31.1916 1.0104 cv
31.1875 1.01051 31.1829 1.01063 31.1788 1.01073 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.8212 1.01073 mo
32.8171 1.01062 32.8127 1.01051 32.8085 1.01041 cv
32.8134 1.01053 32.8164 1.01061 32.8212 1.01073 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.2028 1.01011 mo
31.2067 1.01002 31.2117 1.00989 31.2156 1.0098 cv
31.2114 1.0099 31.2069 1.01001 31.2028 1.01011 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.7972 1.01011 mo
32.7931 1.01001 32.7887 1.0099 32.7846 1.0098 cv
32.7885 1.0099 32.7933 1.01002 32.7972 1.01011 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.2271 1.00951 mo
31.2301 1.00943 31.2328 1.00937 31.2357 1.0093 cv
31.2326 1.00937 31.2303 1.00943 31.2271 1.00951 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.7729 1.00951 mo
32.7698 1.00943 32.7674 1.00937 32.7643 1.0093 cv
32.7672 1.00937 32.77 1.00943 32.7729 1.00951 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.2668 1.00856 mo
31.2697 1.00849 31.2716 1.00844 31.2745 1.00838 cv
31.2714 1.00845 31.2699 1.00849 31.2668 1.00856 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.7332 1.00856 mo
32.7301 1.00849 32.7286 1.00845 32.7255 1.00838 cv
32.7285 1.00845 32.7303 1.00849 32.7332 1.00856 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.2874 1.00809 mo
31.2903 1.00802 31.2958 1.00789 31.2988 1.00783 cv
31.2956 1.0079 31.2905 1.00801 31.2874 1.00809 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.7126 1.00808 mo
32.7095 1.00801 32.7044 1.0079 32.7013 1.00783 cv
32.7042 1.00789 32.7097 1.00802 32.7126 1.00808 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.311 1.00756 mo
31.3149 1.00747 31.319 1.00738 31.3229 1.0073 cv
31.3187 1.00739 31.3152 1.00747 31.311 1.00756 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.6889 1.00756 mo
32.6848 1.00747 32.6813 1.00739 32.6772 1.0073 cv
32.6811 1.00738 32.6851 1.00747 32.6889 1.00756 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.3355 1.00703 mo
31.3394 1.00695 31.3431 1.00687 31.3469 1.00679 cv
31.3428 1.00688 31.3396 1.00694 31.3355 1.00703 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.6645 1.00703 mo
32.6604 1.00694 32.6572 1.00688 32.6531 1.00679 cv
32.657 1.00687 32.6606 1.00695 32.6645 1.00703 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.3592 1.00654 mo
31.3631 1.00646 31.3675 1.00637 31.3714 1.00629 cv
31.3672 1.00637 31.3633 1.00645 31.3592 1.00654 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.6408 1.00654 mo
32.6367 1.00645 32.6328 1.00637 32.6287 1.00629 cv
32.6325 1.00637 32.637 1.00646 32.6408 1.00654 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.3833 1.00606 mo
31.3882 1.00596 31.3906 1.00591 31.3955 1.00582 cv
31.3924 1.00588 31.3864 1.006 31.3833 1.00606 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.6167 1.00606 mo
32.6136 1.006 32.6077 1.00588 32.6046 1.00582 cv
32.6094 1.00591 32.6118 1.00596 32.6167 1.00606 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.4076 1.00559 mo
31.4115 1.00552 31.4154 1.00544 31.4193 1.00537 cv
31.4152 1.00545 31.4117 1.00551 31.4076 1.00559 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.5924 1.00559 mo
32.5883 1.00551 32.5848 1.00545 32.5807 1.00537 cv
32.5846 1.00544 32.5885 1.00552 32.5924 1.00559 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.5679 1.00514 mo
32.5637 1.00506 32.5607 1.00501 32.5565 1.00493 cv
32.5604 1.005 32.564 1.00507 32.5679 1.00514 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.4321 1.00514 mo
31.436 1.00507 31.4396 1.005 31.4435 1.00493 cv
31.4393 1.00501 31.4363 1.00506 31.4321 1.00514 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.544 1.00471 mo
32.5398 1.00464 32.5363 1.00458 32.5321 1.00451 cv
32.536 1.00458 32.5401 1.00465 32.544 1.00471 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.4561 1.00471 mo
31.46 1.00465 31.464 1.00458 31.4679 1.00451 cv
31.4638 1.00458 31.4602 1.00464 31.4561 1.00471 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.5201 1.00431 mo
32.5159 1.00424 32.5116 1.00417 32.5074 1.0041 cv
32.5123 1.00418 32.5152 1.00423 32.5201 1.00431 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.48 1.00431 mo
31.4848 1.00423 31.4878 1.00418 31.4926 1.0041 cv
31.4885 1.00417 31.4841 1.00424 31.48 1.00431 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.5039 1.00392 mo
31.5078 1.00386 31.513 1.00378 31.5169 1.00372 cv
31.5128 1.00378 31.5081 1.00386 31.5039 1.00392 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.4961 1.00392 mo
32.4919 1.00386 32.4873 1.00378 32.4831 1.00372 cv
32.487 1.00378 32.4922 1.00386 32.4961 1.00392 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.4717 1.00355 mo
32.4675 1.00348 32.4629 1.00342 32.4587 1.00336 cv
32.4626 1.00341 32.4678 1.00349 32.4717 1.00355 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.5283 1.00355 mo
31.5322 1.00349 31.5374 1.00341 31.5413 1.00336 cv
31.5372 1.00342 31.5325 1.00348 31.5283 1.00355 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.5524 1.00319 mo
31.5573 1.00313 31.5612 1.00307 31.5661 1.003 cv
31.5619 1.00306 31.5566 1.00314 31.5524 1.00319 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.4476 1.00319 mo
32.4435 1.00314 32.4381 1.00306 32.4339 1.003 cv
32.4388 1.00307 32.4427 1.00313 32.4476 1.00319 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.5766 1.00286 mo
31.5815 1.00279 31.5872 1.00272 31.5921 1.00266 cv
31.5879 1.00271 31.5808 1.0028 31.5766 1.00286 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.4234 1.00286 mo
32.4192 1.0028 32.4122 1.00271 32.408 1.00266 cv
32.4129 1.00272 32.4185 1.00279 32.4234 1.00286 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.6007 1.00254 mo
31.6056 1.00248 31.6112 1.00241 31.6161 1.00235 cv
31.6109 1.00242 31.6059 1.00248 31.6007 1.00254 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.3993 1.00254 mo
32.3941 1.00248 32.3892 1.00242 32.384 1.00236 cv
32.3888 1.00241 32.3944 1.00248 32.3993 1.00254 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.3648 1.00213 mo
32.3596 1.00207 32.3563 1.00203 32.3511 1.00197 cv
32.355 1.00201 32.3609 1.00208 32.3648 1.00213 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.6352 1.00213 mo
31.6391 1.00208 31.645 1.00201 31.6489 1.00197 cv
31.6437 1.00203 31.6404 1.00207 31.6352 1.00213 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.6589 1.00186 mo
31.6638 1.00181 31.6683 1.00176 31.6732 1.00171 cv
31.669 1.00175 31.6631 1.00182 31.6589 1.00186 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.3411 1.00186 mo
32.3369 1.00182 32.331 1.00175 32.3268 1.00171 cv
32.3317 1.00176 32.3362 1.00181 32.3411 1.00186 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.6834 1.00161 mo
31.6882 1.00156 31.6928 1.00151 31.6977 1.00146 cv
31.6935 1.0015 31.6875 1.00156 31.6834 1.00161 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.3167 1.00161 mo
32.3125 1.00156 32.3065 1.0015 32.3024 1.00146 cv
32.3073 1.00151 32.3118 1.00156 32.3167 1.00161 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.7081 1.00137 mo
31.713 1.00132 31.7167 1.00129 31.7216 1.00124 cv
31.7174 1.00128 31.7123 1.00133 31.7081 1.00137 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.2919 1.00137 mo
32.2877 1.00133 32.2826 1.00128 32.2784 1.00124 cv
32.2833 1.00129 32.287 1.00132 32.2919 1.00137 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.7327 1.00115 mo
31.7366 1.00112 31.7423 1.00107 31.7462 1.00104 cv
31.742 1.00107 31.7369 1.00111 31.7327 1.00115 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.2673 1.00115 mo
32.2631 1.00111 32.258 1.00107 32.2538 1.00104 cv
32.2577 1.00107 32.2634 1.00112 32.2673 1.00115 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.7568 1.00095 mo
31.7617 1.00092 31.7655 1.00089 31.7704 1.00085 cv
31.7652 1.00089 31.762 1.00091 31.7568 1.00095 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.2432 1.00095 mo
32.238 1.00091 32.2348 1.00089 32.2296 1.00085 cv
32.2345 1.00089 32.2384 1.00092 32.2432 1.00095 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.7813 1.00077 mo
31.7862 1.00074 31.7899 1.00071 31.7948 1.00068 cv
31.7906 1.00071 31.7855 1.00074 31.7813 1.00077 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.2187 1.00077 mo
32.2145 1.00074 32.2094 1.00071 32.2052 1.00068 cv
32.2101 1.00071 32.2138 1.00074 32.2187 1.00077 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.8057 1.00061 mo
31.8096 1.00059 31.8148 1.00056 31.8187 1.00054 cv
31.8145 1.00056 31.8098 1.00059 31.8057 1.00061 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.1943 1.00061 mo
32.1902 1.00059 32.1855 1.00056 32.1814 1.00054 cv
32.1853 1.00056 32.1904 1.00059 32.1943 1.00061 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.1697 1.00047 mo
32.1656 1.00045 32.1609 1.00042 32.1568 1.0004 cv
32.1616 1.00043 32.1648 1.00044 32.1697 1.00047 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.8303 1.00047 mo
31.8352 1.00044 31.8384 1.00043 31.8433 1.0004 cv
31.8391 1.00042 31.8345 1.00045 31.8303 1.00047 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.8542 1.00035 mo
31.8591 1.00033 31.8629 1.00031 31.8678 1.00029 cv
31.8626 1.00031 31.8594 1.00033 31.8542 1.00035 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.1458 1.00035 mo
32.1406 1.00033 32.1374 1.00031 32.1322 1.00029 cv
32.1371 1.00031 32.1409 1.00033 32.1458 1.00035 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.8785 1.00025 mo
31.8824 1.00023 31.8887 1.00021 31.8926 1.0002 cv
31.8874 1.00021 31.8837 1.00023 31.8785 1.00025 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.1215 1.00025 mo
32.1163 1.00023 32.1126 1.00021 32.1074 1.0002 cv
32.1113 1.00021 32.1176 1.00023 32.1215 1.00025 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.0973 1.00016 mo
32.0931 1.00015 32.0875 1.00014 32.0833 1.00012 cv
32.0882 1.00014 32.0924 1.00015 32.0973 1.00016 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.9028 1.00016 mo
31.9077 1.00015 31.9118 1.00014 31.9167 1.00012 cv
31.9125 1.00014 31.9069 1.00015 31.9028 1.00016 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.0728 1.0001 mo
32.0686 1.00009 32.0633 1.00008 32.0591 1.00007 cv
32.064 1.00008 32.0679 1.00009 32.0728 1.0001 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.9272 1.0001 mo
31.9321 1.00009 31.936 1.00008 31.9409 1.00007 cv
31.9368 1.00008 31.9314 1.00009 31.9272 1.0001 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.9517 1.00005 mo
31.9556 1.00004 31.9622 1.00004 31.9661 1.00003 cv
31.9619 1.00004 31.9559 1.00004 31.9517 1.00005 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
32.0483 1.00005 mo
32.0442 1.00004 32.0381 1.00004 32.0339 1.00003 cv
32.0378 1.00004 32.0444 1.00004 32.0483 1.00005 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
31.9758 1.00002 mo
31.9837 1.00002 31.9922 1.00001 32 1.00001 cv
31.9917 1.00001 31.9842 1.00002 31.9758 1.00002 cv
32.0242 1.00002 mo
32.0159 1.00002 32.0084 1.00001 32 1.00001 cv
32.0078 1.00001 32.0164 1.00002 32.0242 1.00002 cv
gsave
[-2.16737e-06 49.5837 -49.5837 -2.16737e-06 32 -1.70215 ]ct
clp
/2 /Gradient get_res exec grestore
np
62.9746 33 mo
62.9303 31.6144 62.7947 30.2512 62.5737 28.9168 cv
62.6627 28.8912 62.7511 28.8656 62.8398 28.8399 cv
61.3225 13.9194 49.1805 2.09321 34.12 1.07171 cv
50.2286 2.16494 63 15.6188 63 32 cv
63 32 li
63 32.3359 62.9853 32.667 62.9746 33 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[30.24 0 0 33.12 33.6 30.4 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 63 
/H 69 
/M[63 0 0 -69 0 69 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 63 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 63 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 63 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 63 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
_>qFS!!L1B^];:Q_?9cB`<X*W`W3jZr!UOQ]E$"Q_?]oIaUYl^aoK9bp_(a_\,a_Q_@#uObn[Yec2b]i
oGPsmZiJGQ_@H,Vd2]FldK%,qn0$1&YQ3/Q_@c2\eK_3sec<Q#lmLC4X8plQ_A2>cfda!%g&Su+kUtUB
VuYTQ_AMDih(bc,h>kD2j>GgPU]B<Q_AqPpiAdP3iW-h:_E7euKE2#o`#li\rW%ZQr?90(_F+5$L]I;s
a<SPkq>cBQq'F00_FjS'Mu`T!bU12$p&L*QodJ*6_GTq*O9"l%cmln3nc4gQnLW*>_H?:-PQ:/(e1JOA
mJrOQm4[$D_I)X0QiQG,fJ16Pl2[7Qkqh$L_Ii!3S,h_/gbcl^joCtQjYksR_JS?6TE+"3i&JSmiW,\Q
iB#sZ_K<To_Z7P8s*)D*^Au4Q_EIjE`d>B!`rNt@qgQV8])]qQ_En!Lb(@/(b5fCGpP$hF[fFYQ_F4'R
cAAq/cN(gOo8M%TZN/AQ_FX3YdZC^6df@6Vmuu7bY5m)Q_Fs9_esEK=f)WZ^l^HIpWrUfQ_GBEfg7G8D
gAo)ekFp\)VZ>NQ_G]KlhPI%KhZ1Mmj/Cn7UB'6Q_H,WsiiIb4!*@'>_QWt>K`M*T`EC'ar;_TQr*.3G
_RKCBM#dBXa^)cpq#H<Qpg;3O_S5aEN<&Z[c!\E)o`1$QoO?-U_Su*HOT=r_d:C,8nGnaQn7L-]_T_HK
PlU5beRubFm/WIQltP'c_UIfNR/lMffk\IUkl@1Qk\]'k_V4/QSH.eih/:*cjT(nQjDa!q_VsMTT`F(m
iGufri;hj;_>qGp!9h>a^];:Q_KGkD`Tt5<`W3l"r9q\p]E$"Q_Kl"Kan!:KJ,~>

%%EndBinary
grestore
np
1.02539 33 mo
1.01466 32.667 1.00001 32.3359 1.00001 32 cv
1.00001 32 li
1.00001 15.7127 13.6262 2.31922 29.6041 1.09166 cv
14.6718 2.23831 2.66819 14.0109 1.16017 28.8399 cv
1.24886 28.8656 1.33733 28.8912 1.4263 28.9168 cv
1.20526 30.2512 1.06965 31.6144 1.02539 33 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[29.76 0 0 33.12 .48 30.4 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 62 
/H 69 
/M[62 0 0 -69 0 69 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 62 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 62 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 62 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 62 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
_Z7RUrWL4D]`?.S_ZTZ=bQkTWcN(idndEkRYlN;S_[#N<fFFq^gAo+tjq?M`V#]HS_[><:j;"9ek5`C.
g)9/nR/lUS_[b09n/RVlo)QZ>c62g'N<&bS_\'s7r$-ssrrBqM_^>EaL&h/e`tcKAq>cHSpD;'j__1Q]
OoY"hdhotWmJrUSlPeFp__pWXScIjlh]0NniW,bSh]Cl#_`Y^7`W3muq`i1e\cBqS_]e\?cU5&>dK%00
mmbhsXoR)S_^4P>gIeCEh>kG?j%\K,U&a6S_^O><k>@`Ll2\^Of2V-:Q2pCS_^s2;o2q(Sp&Mu^b?OdH
M?*PS__8u9s'LH[!&;DH_d`QEM#dB.atpqIpAg6SoJFoO_eJW@PlU51ei(E_lN!CSkW%?W_f4];T`F(5
i]=u!hZ2a<_Z7S9rccA+]`?.S_`ddAb^6f!cN(jInp]#9YlN;S_a3X@fRg.(gAo,Xk(VZGV#]HS_aNF>
jGBK/k5`Chg5P<UR/lUS_ar:=n;rh6o)Q["cBIscN<&bS_b8(;r0N0=rrBr2_jUQ*L&h0Ja%sUEq>cHS
pJB+2_kH]&OoY#Mdo+)[mJrUSlVuP:_l2c!ScIkQhc@XriW,bShcJo@_lpiU`W3nZqm4DN\cBqS_cufC
caU7]dK%0jn%.&\XoR)S_dDZBgV0Tdh>kH$j2']jU&a6S_d_H@kJ`qkl2\_4f?!@#Q2pCS_e.<?o?<9r
p&N!CbKp"1M?*PS_eI*=s3lZ%!,KMg_q+bdM#dBhb&,&MpAg6SoPW#n_qjh_PlU5keo8OclN!CSk]5I!
_rTnZT`F(oicN*%hZ2a<_Z7Ssrp.Si]`?.S_ftnEbjW"@cN(k.o((6"_Z52~>

%%EndBinary
grestore
np
29.6043 1.09165 mo
29.6125 1.09102 29.619 1.09052 29.6272 1.0899 cv
29.6195 1.09048 29.612 1.09106 29.6043 1.09165 cv
29.6273 1.08989 mo
29.7113 1.08351 29.7958 1.07743 29.8799 1.07172 cv
29.7953 1.07746 29.7118 1.08347 29.6273 1.08989 cv
34.1187 1.07162 mo
34.111 1.0711 34.1051 1.0707 34.0974 1.07018 cv
34.1035 1.0706 34.1125 1.07121 34.1187 1.07162 cv
29.8814 1.07162 mo
29.8875 1.0712 29.8964 1.0706 29.9026 1.07019 cv
29.8958 1.07064 29.8881 1.07116 29.8814 1.07162 cv
34.0951 1.07003 mo
34.0884 1.06958 34.0814 1.06911 34.0746 1.06867 cv
34.0818 1.06914 34.088 1.06955 34.0951 1.07003 cv
29.9049 1.07003 mo
29.9121 1.06955 29.9181 1.06915 29.9253 1.06867 cv
29.9186 1.06912 29.9117 1.06958 29.9049 1.07003 cv
34.0716 1.06846 mo
34.0639 1.06795 34.0588 1.06762 34.0512 1.06712 cv
34.0573 1.06752 34.0654 1.06805 34.0716 1.06846 cv
29.9285 1.06846 mo
29.9347 1.06805 29.9427 1.06752 29.9489 1.06712 cv
29.9412 1.06762 29.9362 1.06795 29.9285 1.06846 cv
34.0484 1.06693 mo
34.0426 1.06655 34.034 1.06599 34.0282 1.06562 cv
34.0354 1.06609 34.0412 1.06646 34.0484 1.06693 cv
29.9517 1.06693 mo
29.9589 1.06646 29.9646 1.06609 29.9717 1.06562 cv
29.966 1.066 29.9575 1.06655 29.9517 1.06693 cv
34.0247 1.06539 mo
34.0179 1.06495 34.0114 1.06453 34.0047 1.0641 cv
34.0119 1.06456 34.0175 1.06492 34.0247 1.06539 cv
29.9754 1.06538 mo
29.9826 1.06492 29.9881 1.06457 29.9953 1.06411 cv
29.9885 1.06454 29.9822 1.06495 29.9754 1.06538 cv
34.0014 1.06389 mo
33.9947 1.06346 33.9884 1.06306 33.9816 1.06263 cv
33.9878 1.06302 33.9953 1.0635 34.0014 1.06389 cv
29.9987 1.06389 mo
30.0049 1.06349 30.0121 1.06303 30.0183 1.06264 cv
30.0116 1.06306 30.0055 1.06345 29.9987 1.06389 cv
33.9778 1.06239 mo
33.971 1.06196 33.9643 1.06154 33.9576 1.06112 cv
33.9648 1.06157 33.9706 1.06193 33.9778 1.06239 cv
30.0224 1.06238 mo
30.0296 1.06192 30.0352 1.06157 30.0424 1.06112 cv
30.0356 1.06154 30.0291 1.06195 30.0224 1.06238 cv
33.9565 1.06105 mo
33.9036 1.05773 33.8509 1.05458 33.7979 1.05153 cv
33.8514 1.0546 33.9031 1.05771 33.9565 1.06105 cv
30.0436 1.06104 mo
30.097 1.0577 30.1485 1.05461 30.202 1.05154 cv
30.1489 1.05459 30.0966 1.05773 30.0436 1.06104 cv
33.7949 1.05136 mo
33.7881 1.05097 33.7821 1.05063 33.7754 1.05024 cv
33.7815 1.0506 33.7887 1.051 33.7949 1.05136 cv
30.2052 1.05135 mo
30.2114 1.051 30.2184 1.0506 30.2246 1.05025 cv
30.2178 1.05063 30.212 1.05097 30.2052 1.05135 cv
33.7713 1.05001 mo
33.7646 1.04963 33.7599 1.04937 33.7531 1.04899 cv
33.7593 1.04934 33.7651 1.04966 33.7713 1.05001 cv
30.2287 1.05001 mo
30.2349 1.04966 30.2406 1.04934 30.2468 1.04899 cv
30.2401 1.04937 30.2355 1.04963 30.2287 1.05001 cv
33.7472 1.04866 mo
33.7415 1.04834 33.7357 1.04802 33.7299 1.0477 cv
33.7361 1.04804 33.7411 1.04832 33.7472 1.04866 cv
30.2528 1.04866 mo
30.259 1.04831 30.2638 1.04804 30.27 1.0477 cv
30.2642 1.04802 30.2586 1.04834 30.2528 1.04866 cv
33.7236 1.04735 mo
33.7178 1.04703 33.7126 1.04674 33.7068 1.04643 cv
33.7119 1.04671 33.7185 1.04707 33.7236 1.04735 cv
30.2764 1.04735 mo
30.2816 1.04707 30.288 1.04671 30.2932 1.04643 cv
30.2874 1.04675 30.2822 1.04703 30.2764 1.04735 cv
33.6995 1.04603 mo
33.6937 1.04572 33.6888 1.04546 33.683 1.04514 cv
33.6892 1.04548 33.6933 1.0457 33.6995 1.04603 cv
30.3006 1.04603 mo
30.3057 1.04575 30.3118 1.04542 30.3169 1.04515 cv
30.3111 1.04546 30.3064 1.04572 30.3006 1.04603 cv
33.6761 1.04477 mo
33.6704 1.04446 33.6655 1.04421 33.6597 1.0439 cv
33.6649 1.04417 33.671 1.0445 33.6761 1.04477 cv
30.3239 1.04477 mo
30.329 1.0445 30.3351 1.04417 30.3403 1.0439 cv
30.3345 1.04421 30.3297 1.04446 30.3239 1.04477 cv
33.6518 1.04348 mo
33.6469 1.04322 33.641 1.04291 33.6361 1.04266 cv
33.6413 1.04293 33.6466 1.04321 33.6518 1.04348 cv
30.3484 1.04347 mo
30.3535 1.0432 30.3587 1.04293 30.3638 1.04266 cv
30.359 1.04291 30.3532 1.04322 30.3484 1.04347 cv
33.6282 1.04225 mo
33.6234 1.04199 33.6171 1.04167 33.6122 1.04142 cv
33.6174 1.04168 33.6231 1.04198 33.6282 1.04225 cv
30.3719 1.04224 mo
30.377 1.04197 30.3826 1.04169 30.3877 1.04142 cv
30.3829 1.04167 30.3767 1.04199 30.3719 1.04224 cv
33.6047 1.04103 mo
33.5999 1.04079 33.5932 1.04044 33.5884 1.0402 cv
33.5935 1.04046 33.5996 1.04077 33.6047 1.04103 cv
30.3954 1.04103 mo
30.4006 1.04076 30.4065 1.04046 30.4116 1.0402 cv
30.4068 1.04045 30.4002 1.04078 30.3954 1.04103 cv
33.582 1.03988 mo
33.5762 1.03958 33.5703 1.03929 33.5645 1.039 cv
33.5696 1.03925 33.5768 1.03962 33.582 1.03988 cv
30.4182 1.03987 mo
30.4234 1.03961 30.4303 1.03926 30.4355 1.039 cv
30.4297 1.03929 30.424 1.03957 30.4182 1.03987 cv
33.5596 1.03875 mo
33.5229 1.03692 33.4863 1.03517 33.4495 1.03347 cv
33.4856 1.03514 33.5235 1.03696 33.5596 1.03875 cv
30.4406 1.03874 mo
30.4767 1.03695 30.5144 1.03514 30.5505 1.03347 cv
30.5138 1.03517 30.4774 1.03691 30.4406 1.03874 cv
30.5526 1.03337 mo
30.5588 1.03308 30.5642 1.03284 30.5704 1.03256 cv
30.5646 1.03282 30.5584 1.0331 30.5526 1.03337 cv
33.4475 1.03337 mo
33.4417 1.0331 33.4354 1.03282 33.4296 1.03255 cv
33.4358 1.03284 33.4413 1.03308 33.4475 1.03337 cv
33.4233 1.03227 mo
33.4175 1.032 33.4128 1.03179 33.407 1.03153 cv
33.4121 1.03176 33.4182 1.03203 33.4233 1.03227 cv
30.5767 1.03226 mo
30.5819 1.03203 30.5878 1.03176 30.593 1.03153 cv
30.5872 1.03179 30.5825 1.032 30.5767 1.03226 cv
33.3993 1.03119 mo
33.3945 1.03097 33.3891 1.03073 33.3843 1.03052 cv
33.3884 1.0307 33.3952 1.031 33.3993 1.03119 cv
30.6007 1.03119 mo
30.6048 1.031 30.6115 1.0307 30.6157 1.03052 cv
30.6108 1.03074 30.6055 1.03097 30.6007 1.03119 cv
33.3752 1.03012 mo
33.3704 1.02991 33.3649 1.02967 33.3601 1.02946 cv
33.3652 1.02968 33.3701 1.02989 33.3752 1.03012 cv
30.6248 1.03012 mo
30.63 1.02989 30.6348 1.02968 30.64 1.02946 cv
30.6351 1.02967 30.6296 1.02991 30.6248 1.03012 cv
33.3517 1.02909 mo
33.3468 1.02889 33.3412 1.02864 33.3363 1.02844 cv
33.3415 1.02866 33.3465 1.02887 33.3517 1.02909 cv
30.6484 1.02909 mo
30.6535 1.02887 30.6585 1.02866 30.6637 1.02844 cv
30.6589 1.02864 30.6532 1.02889 30.6484 1.02909 cv
33.3279 1.02808 mo
33.3221 1.02783 33.3181 1.02767 33.3123 1.02742 cv
33.3174 1.02764 33.3227 1.02786 33.3279 1.02808 cv
30.6722 1.02808 mo
30.6773 1.02786 30.6826 1.02764 30.6877 1.02742 cv
30.6819 1.02766 30.678 1.02783 30.6722 1.02808 cv
30.6961 1.02707 mo
30.7013 1.02686 30.7056 1.02668 30.7108 1.02647 cv
30.706 1.02666 30.701 1.02687 30.6961 1.02707 cv
33.3039 1.02707 mo
33.299 1.02687 33.294 1.02666 33.2892 1.02646 cv
33.2944 1.02668 33.2987 1.02686 33.3039 1.02707 cv
33.2795 1.02607 mo
33.2747 1.02587 33.2698 1.02567 33.2649 1.02548 cv
33.2701 1.02568 33.2744 1.02586 33.2795 1.02607 cv
30.7205 1.02607 mo
30.7257 1.02586 30.73 1.02568 30.7351 1.02548 cv
30.7303 1.02567 30.7253 1.02587 30.7205 1.02607 cv
33.2562 1.02513 mo
33.2514 1.02493 33.2461 1.02472 33.2412 1.02453 cv
33.2464 1.02473 33.251 1.02492 33.2562 1.02513 cv
30.7438 1.02513 mo
30.749 1.02492 30.7536 1.02473 30.7588 1.02453 cv
30.754 1.02472 30.7487 1.02493 30.7438 1.02513 cv
33.2322 1.02418 mo
33.2274 1.02399 33.2219 1.02377 33.2171 1.02358 cv
33.2223 1.02378 33.2271 1.02397 33.2322 1.02418 cv
30.7678 1.02418 mo
30.773 1.02397 30.7778 1.02378 30.7829 1.02358 cv
30.7781 1.02377 30.7726 1.02398 30.7678 1.02418 cv
33.2083 1.02324 mo
33.2034 1.02306 33.1986 1.02287 33.1937 1.02268 cv
33.1989 1.02288 33.2031 1.02305 33.2083 1.02324 cv
30.7918 1.02324 mo
30.797 1.02304 30.8011 1.02288 30.8063 1.02269 cv
30.8014 1.02287 30.7966 1.02306 30.7918 1.02324 cv
33.1832 1.02229 mo
33.1783 1.0221 33.1745 1.02196 33.1697 1.02178 cv
33.1748 1.02197 33.178 1.02209 33.1832 1.02229 cv
30.8169 1.02228 mo
30.8221 1.02209 30.8252 1.02197 30.8304 1.02178 cv
30.8255 1.02196 30.8218 1.0221 30.8169 1.02228 cv
33.16 1.02142 mo
33.1551 1.02124 33.1505 1.02107 33.1456 1.02089 cv
33.1498 1.02104 33.1558 1.02127 33.16 1.02142 cv
30.8401 1.02142 mo
30.8442 1.02127 30.8503 1.02104 30.8544 1.02089 cv
30.8496 1.02107 30.8449 1.02124 30.8401 1.02142 cv
30.8579 1.02076 mo
30.8703 1.02031 30.8857 1.01976 30.8981 1.01933 cv
30.8845 1.0198 30.8715 1.02027 30.8579 1.02076 cv
33.142 1.02076 mo
33.1285 1.02027 33.1155 1.0198 33.1019 1.01933 cv
33.1153 1.0198 33.1286 1.02027 33.142 1.02076 cv
33.0988 1.01922 mo
33.093 1.01901 33.0885 1.01886 33.0827 1.01866 cv
33.0879 1.01884 33.0936 1.01904 33.0988 1.01922 cv
30.9013 1.01922 mo
30.9064 1.01904 30.9122 1.01884 30.9174 1.01866 cv
30.9115 1.01886 30.9071 1.01901 30.9013 1.01922 cv
30.9252 1.01839 mo
30.9303 1.01821 30.934 1.01809 30.9392 1.01791 cv
30.9344 1.01808 30.93 1.01822 30.9252 1.01839 cv
33.0748 1.01839 mo
33.07 1.01822 33.0656 1.01808 33.0608 1.01791 cv
33.066 1.01809 33.0697 1.01821 33.0748 1.01839 cv
33.0504 1.01756 mo
33.0465 1.01743 33.0415 1.01726 33.0376 1.01714 cv
33.0417 1.01727 33.0463 1.01742 33.0504 1.01756 cv
30.9496 1.01756 mo
30.9538 1.01742 30.9583 1.01727 30.9624 1.01714 cv
30.9586 1.01726 30.9535 1.01743 30.9496 1.01756 cv
33.0264 1.01677 mo
33.0225 1.01664 33.0181 1.0165 33.0142 1.01637 cv
33.0184 1.01651 33.0222 1.01663 33.0264 1.01677 cv
30.9736 1.01677 mo
30.9778 1.01663 30.9816 1.01651 30.9857 1.01637 cv
30.9819 1.0165 30.9775 1.01664 30.9736 1.01677 cv
33.0019 1.01598 mo
32.998 1.01585 32.994 1.01573 32.9901 1.0156 cv
32.9932 1.0157 32.9988 1.01588 33.0019 1.01598 cv
30.9982 1.01597 mo
31.0013 1.01587 31.0067 1.0157 31.0098 1.01561 cv
31.006 1.01573 31.0021 1.01585 30.9982 1.01597 cv
32.978 1.01522 mo
32.9741 1.0151 32.97 1.01497 32.9661 1.01485 cv
32.9702 1.01498 32.9738 1.01509 32.978 1.01522 cv
31.0221 1.01522 mo
31.0262 1.01509 31.0298 1.01498 31.0339 1.01486 cv
31.03 1.01497 31.026 1.0151 31.0221 1.01522 cv
32.9539 1.01448 mo
32.95 1.01436 32.9453 1.01422 32.9414 1.0141 cv
32.9455 1.01423 32.9497 1.01436 32.9539 1.01448 cv
31.0462 1.01448 mo
31.0503 1.01435 31.0545 1.01423 31.0586 1.0141 cv
31.0548 1.01422 31.0501 1.01436 31.0462 1.01448 cv
32.9304 1.01378 mo
32.9265 1.01366 32.9212 1.01351 32.9173 1.01339 cv
32.9215 1.01351 32.9262 1.01365 32.9304 1.01378 cv
31.0697 1.01378 mo
31.0738 1.01365 31.0785 1.01351 31.0827 1.01339 cv
31.0788 1.01351 31.0736 1.01366 31.0697 1.01378 cv
32.9058 1.01306 mo
32.901 1.01292 32.8984 1.01285 32.8936 1.01271 cv
32.8977 1.01282 32.9017 1.01294 32.9058 1.01306 cv
31.0942 1.01306 mo
31.0984 1.01294 31.1023 1.01283 31.1064 1.01271 cv
31.1016 1.01285 31.0991 1.01292 31.0942 1.01306 cv
32.8816 1.01237 mo
32.8777 1.01226 32.8733 1.01214 32.8694 1.01203 cv
32.8735 1.01214 32.8775 1.01225 32.8816 1.01237 cv
31.1184 1.01237 mo
31.1226 1.01225 31.1265 1.01214 31.1306 1.01203 cv
31.1267 1.01214 31.1223 1.01226 31.1184 1.01237 cv
32.8575 1.0117 mo
32.8536 1.0116 32.8491 1.01147 32.8452 1.01137 cv
32.8494 1.01148 32.8534 1.01159 32.8575 1.0117 cv
31.1425 1.0117 mo
31.1467 1.01159 31.1506 1.01148 31.1548 1.01137 cv
31.1509 1.01147 31.1464 1.0116 31.1425 1.0117 cv
32.8334 1.01105 mo
32.8295 1.01095 32.8251 1.01083 32.8212 1.01073 cv
32.8254 1.01084 32.8292 1.01094 32.8334 1.01105 cv
31.1667 1.01105 mo
31.1708 1.01094 31.1746 1.01084 31.1788 1.01073 cv
31.1749 1.01084 31.1706 1.01095 31.1667 1.01105 cv
32.8085 1.01041 mo
32.8046 1.01031 32.8011 1.01021 32.7972 1.01011 cv
32.8014 1.01022 32.8044 1.0103 32.8085 1.01041 cv
31.1916 1.0104 mo
31.1958 1.0103 31.1986 1.01022 31.2028 1.01011 cv
31.1989 1.01021 31.1955 1.0103 31.1916 1.0104 cv
32.7846 1.0098 mo
32.7807 1.0097 32.7768 1.0096 32.7729 1.00951 cv
32.776 1.00958 32.7815 1.00972 32.7846 1.0098 cv
31.2156 1.0098 mo
31.2187 1.00972 31.224 1.00958 31.2271 1.00951 cv
31.2233 1.0096 31.2194 1.0097 31.2156 1.0098 cv
31.2357 1.0093 mo
31.2461 1.00905 31.2564 1.0088 31.2668 1.00856 cv
31.257 1.00879 31.2455 1.00906 31.2357 1.0093 cv
32.7643 1.0093 mo
32.7546 1.00906 32.743 1.00879 32.7332 1.00856 cv
32.7436 1.0088 32.7539 1.00905 32.7643 1.0093 cv
32.7255 1.00838 mo
32.7207 1.00827 32.7175 1.00819 32.7126 1.00808 cv
32.7167 1.00818 32.7214 1.00828 32.7255 1.00838 cv
31.2745 1.00838 mo
31.2786 1.00828 31.2832 1.00818 31.2874 1.00809 cv
31.2825 1.0082 31.2794 1.00827 31.2745 1.00838 cv
32.7013 1.00783 mo
32.6964 1.00772 32.6938 1.00766 32.6889 1.00756 cv
32.6931 1.00765 32.6971 1.00773 32.7013 1.00783 cv
31.2988 1.00783 mo
31.3029 1.00773 31.3069 1.00765 31.311 1.00756 cv
31.3062 1.00766 31.3036 1.00772 31.2988 1.00783 cv
32.6772 1.0073 mo
32.6733 1.00722 32.6684 1.00711 32.6645 1.00703 cv
32.6687 1.00712 32.673 1.00721 32.6772 1.0073 cv
31.3229 1.0073 mo
31.327 1.00721 31.3313 1.00712 31.3355 1.00703 cv
31.3316 1.00711 31.3268 1.00722 31.3229 1.0073 cv
32.6531 1.00679 mo
32.6492 1.00671 32.6447 1.00662 32.6408 1.00654 cv
32.645 1.00662 32.6489 1.0067 32.6531 1.00679 cv
31.3469 1.00679 mo
31.3511 1.0067 31.355 1.00662 31.3592 1.00654 cv
31.3553 1.00662 31.3508 1.00671 31.3469 1.00679 cv
32.6287 1.00629 mo
32.6248 1.00621 32.6206 1.00613 32.6167 1.00606 cv
32.6208 1.00614 32.6245 1.00621 32.6287 1.00629 cv
31.3714 1.00629 mo
31.3755 1.00621 31.3792 1.00614 31.3833 1.00606 cv
31.3794 1.00613 31.3753 1.00621 31.3714 1.00629 cv
32.6046 1.00582 mo
32.6007 1.00575 32.5963 1.00566 32.5924 1.00559 cv
32.5966 1.00567 32.6004 1.00574 32.6046 1.00582 cv
31.3955 1.00582 mo
31.3996 1.00574 31.4034 1.00567 31.4076 1.00559 cv
31.4037 1.00566 31.3994 1.00575 31.3955 1.00582 cv
31.4193 1.00537 mo
31.4235 1.00529 31.428 1.00521 31.4321 1.00514 cv
31.4282 1.00521 31.4232 1.0053 31.4193 1.00537 cv
32.5807 1.00537 mo
32.5768 1.0053 32.5718 1.00521 32.5679 1.00514 cv
32.572 1.00521 32.5765 1.00529 32.5807 1.00537 cv
31.4435 1.00493 mo
31.4476 1.00486 31.4519 1.00479 31.4561 1.00471 cv
31.4522 1.00478 31.4474 1.00486 31.4435 1.00493 cv
32.5565 1.00493 mo
32.5526 1.00486 32.5479 1.00478 32.544 1.00471 cv
32.5481 1.00479 32.5524 1.00486 32.5565 1.00493 cv
31.4679 1.00451 mo
31.4721 1.00444 31.4758 1.00438 31.48 1.00431 cv
31.4761 1.00437 31.4718 1.00445 31.4679 1.00451 cv
32.5321 1.00451 mo
32.5282 1.00445 32.5239 1.00437 32.5201 1.00431 cv
32.5242 1.00438 32.5279 1.00444 32.5321 1.00451 cv
32.5074 1.0041 mo
32.5035 1.00404 32.5 1.00398 32.4961 1.00392 cv
32.4992 1.00397 32.5043 1.00405 32.5074 1.0041 cv
31.4926 1.0041 mo
31.4958 1.00405 31.5008 1.00397 31.5039 1.00392 cv
31.5 1.00398 31.4965 1.00404 31.4926 1.0041 cv
32.4831 1.00372 mo
32.4792 1.00366 32.4756 1.00361 32.4717 1.00355 cv
32.4759 1.00361 32.4789 1.00366 32.4831 1.00372 cv
31.5169 1.00372 mo
31.5211 1.00366 31.5242 1.00361 31.5283 1.00355 cv
31.5244 1.00361 31.5208 1.00366 31.5169 1.00372 cv
32.4587 1.00336 mo
32.4548 1.0033 32.4515 1.00325 32.4476 1.00319 cv
32.4518 1.00325 32.4546 1.0033 32.4587 1.00336 cv
31.5413 1.00336 mo
31.5455 1.00329 31.5482 1.00325 31.5524 1.00319 cv
31.5485 1.00325 31.5452 1.0033 31.5413 1.00336 cv
32.4339 1.003 mo
32.43 1.00295 32.4273 1.00291 32.4234 1.00286 cv
32.4276 1.00291 32.4298 1.00295 32.4339 1.003 cv
31.5661 1.003 mo
31.5703 1.00295 31.5725 1.00292 31.5766 1.00286 cv
31.5727 1.00291 31.57 1.00295 31.5661 1.003 cv
32.408 1.00266 mo
32.4051 1.00262 32.4022 1.00258 32.3993 1.00254 cv
32.4024 1.00258 32.4049 1.00262 32.408 1.00266 cv
31.5921 1.00266 mo
31.5952 1.00262 31.5976 1.00258 31.6007 1.00254 cv
31.5978 1.00258 31.595 1.00262 31.5921 1.00266 cv
32.384 1.00236 mo
32.3771 1.00227 32.3717 1.00221 32.3648 1.00213 cv
32.3711 1.0022 32.3777 1.00228 32.384 1.00236 cv
31.6161 1.00235 mo
31.6223 1.00228 31.629 1.0022 31.6352 1.00213 cv
31.6284 1.00221 31.6229 1.00227 31.6161 1.00235 cv
32.3511 1.00197 mo
32.3472 1.00193 32.345 1.0019 32.3411 1.00186 cv
32.3442 1.0019 32.348 1.00193 32.3511 1.00197 cv
31.6489 1.00197 mo
31.6521 1.00193 31.6558 1.0019 31.6589 1.00186 cv
31.655 1.0019 31.6528 1.00193 31.6489 1.00197 cv
31.6732 1.00171 mo
31.6774 1.00166 31.6792 1.00165 31.6834 1.00161 cv
31.6804 1.00164 31.6761 1.00168 31.6732 1.00171 cv
32.3268 1.00171 mo
32.3239 1.00168 32.3196 1.00164 32.3167 1.00161 cv
32.3208 1.00165 32.3226 1.00166 32.3268 1.00171 cv
32.3024 1.00146 mo
32.2994 1.00144 32.2948 1.00139 32.2919 1.00137 cv
32.2961 1.00141 32.2982 1.00142 32.3024 1.00146 cv
31.6977 1.00146 mo
31.7018 1.00142 31.704 1.00141 31.7081 1.00137 cv
31.7052 1.00139 31.7006 1.00144 31.6977 1.00146 cv
31.7216 1.00124 mo
31.7258 1.00121 31.7285 1.00118 31.7327 1.00115 cv
31.7288 1.00118 31.7255 1.00121 31.7216 1.00124 cv
32.2784 1.00124 mo
32.2745 1.00121 32.2712 1.00118 32.2673 1.00115 cv
32.2715 1.00118 32.2743 1.00121 32.2784 1.00124 cv
32.2538 1.00104 mo
32.2499 1.001 32.2471 1.00098 32.2432 1.00095 cv
32.2464 1.00098 32.2507 1.00101 32.2538 1.00104 cv
31.7462 1.00104 mo
31.7493 1.00101 31.7537 1.00098 31.7568 1.00095 cv
31.7529 1.00098 31.7501 1.001 31.7462 1.00104 cv
32.2296 1.00085 mo
32.2267 1.00083 32.2216 1.00079 32.2187 1.00077 cv
32.2218 1.00079 32.2265 1.00083 32.2296 1.00085 cv
31.7704 1.00085 mo
31.7735 1.00083 31.7782 1.00079 31.7813 1.00077 cv
31.7784 1.00079 31.7733 1.00083 31.7704 1.00085 cv
32.2052 1.00068 mo
32.2013 1.00066 32.1983 1.00064 32.1943 1.00061 cv
32.1985 1.00064 32.2011 1.00065 32.2052 1.00068 cv
31.7948 1.00068 mo
31.799 1.00065 31.8015 1.00064 31.8057 1.00061 cv
31.8018 1.00064 31.7987 1.00066 31.7948 1.00068 cv
31.8187 1.00054 mo
31.8228 1.00051 31.8261 1.00049 31.8303 1.00047 cv
31.8264 1.00049 31.8226 1.00051 31.8187 1.00054 cv
32.1814 1.00054 mo
32.1775 1.00051 32.1736 1.00049 32.1697 1.00047 cv
32.1739 1.00049 32.1772 1.00051 32.1814 1.00054 cv
32.1568 1.0004 mo
32.1538 1.00039 32.1487 1.00036 32.1458 1.00035 cv
32.1489 1.00037 32.1536 1.00039 32.1568 1.0004 cv
31.8433 1.0004 mo
31.8464 1.00039 31.8511 1.00037 31.8542 1.00035 cv
31.8513 1.00036 31.8462 1.00039 31.8433 1.0004 cv
32.1322 1.00029 mo
32.1283 1.00028 32.1254 1.00026 32.1215 1.00025 cv
32.1246 1.00026 32.1291 1.00028 32.1322 1.00029 cv
31.8678 1.00029 mo
31.8709 1.00028 31.8754 1.00026 31.8785 1.00025 cv
31.8746 1.00026 31.8717 1.00028 31.8678 1.00029 cv
32.1074 1.0002 mo
32.1035 1.00018 32.1012 1.00018 32.0973 1.00016 cv
32.1004 1.00017 32.1043 1.00019 32.1074 1.0002 cv
31.8926 1.0002 mo
31.8957 1.00019 31.8996 1.00017 31.9028 1.00016 cv
31.8989 1.00018 31.8965 1.00018 31.8926 1.0002 cv
31.9167 1.00012 mo
31.9209 1.00011 31.9231 1.00011 31.9272 1.0001 cv
31.9243 1.0001 31.9197 1.00012 31.9167 1.00012 cv
32.0833 1.00012 mo
32.0804 1.00012 32.0757 1.0001 32.0728 1.0001 cv
32.077 1.00011 32.0791 1.00011 32.0833 1.00012 cv
31.9409 1.00007 mo
31.9451 1.00006 31.9475 1.00006 31.9517 1.00005 cv
31.9478 1.00006 31.9448 1.00006 31.9409 1.00007 cv
32.0591 1.00007 mo
32.0552 1.00006 32.0522 1.00006 32.0483 1.00005 cv
32.0525 1.00006 32.0549 1.00006 32.0591 1.00007 cv
32.0339 1.00003 mo
32.03 1.00003 32.0281 1.00002 32.0242 1.00002 cv
32.0273 1.00002 32.0308 1.00003 32.0339 1.00003 cv
31.9661 1.00003 mo
31.9692 1.00003 31.9727 1.00002 31.9758 1.00002 cv
31.9719 1.00002 31.97 1.00003 31.9661 1.00003 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[6.24 0 0 1.44 28.8 62.08 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 3 
/M[13 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~!WiE)!WiE)!WiE)!WrN,!s8W-!s8W-!s8]1"U,&5"U,&5"U,&~>
<~"9\i1"9\i1"9\i1":#/:#6tJ=#6tJ=#6tVE$O[=M$O[=M$O[=~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
1.4263 28.9168 mo
1.33733 28.8912 1.24886 28.8656 1.16017 28.8399 cv
2.66819 14.0109 14.6718 2.23831 29.6041 1.09166 cv
29.6043 1.09165 li
29.612 1.09106 29.6195 1.09048 29.6272 1.0899 cv
29.6273 1.08989 li
29.7118 1.08347 29.7953 1.07746 29.8799 1.07172 cv
29.881 1.07165 29.8804 1.07169 29.8814 1.07162 cv
29.8881 1.07116 29.8958 1.07064 29.9026 1.07019 cv
29.9036 1.07012 29.9039 1.0701 29.9049 1.07003 cv
29.9117 1.06958 29.9186 1.06912 29.9253 1.06867 cv
29.9263 1.0686 29.9275 1.06853 29.9285 1.06846 cv
29.9362 1.06795 29.9412 1.06762 29.9489 1.06712 cv
29.9499 1.06705 29.9507 1.067 29.9517 1.06693 cv
29.9575 1.06655 29.966 1.066 29.9717 1.06562 cv
29.9728 1.06556 29.9744 1.06545 29.9754 1.06538 cv
29.9822 1.06495 29.9885 1.06454 29.9953 1.06411 cv
29.9963 1.06404 29.9977 1.06395 29.9987 1.06389 cv
30.0055 1.06345 30.0116 1.06306 30.0183 1.06264 cv
30.0193 1.06257 30.0214 1.06244 30.0224 1.06238 cv
30.0291 1.06195 30.0356 1.06154 30.0424 1.06112 cv
30.0436 1.06104 li
30.0966 1.05773 30.1489 1.05459 30.202 1.05154 cv
30.203 1.05148 30.2042 1.05141 30.2052 1.05135 cv
30.212 1.05097 30.2178 1.05063 30.2246 1.05025 cv
30.2256 1.05019 30.2277 1.05007 30.2287 1.05001 cv
30.2355 1.04963 30.2401 1.04937 30.2468 1.04899 cv
30.2489 1.04888 30.2508 1.04877 30.2528 1.04866 cv
30.2586 1.04834 30.2642 1.04802 30.27 1.0477 cv
30.2721 1.04759 30.2744 1.04746 30.2764 1.04735 cv
30.2822 1.04703 30.2874 1.04675 30.2932 1.04643 cv
30.2963 1.04626 30.2975 1.0462 30.3006 1.04603 cv
30.3064 1.04572 30.3111 1.04546 30.3169 1.04515 cv
30.319 1.04504 30.3218 1.04488 30.3239 1.04477 cv
30.3297 1.04446 30.3345 1.04421 30.3403 1.0439 cv
30.3434 1.04374 30.3453 1.04364 30.3484 1.04347 cv
30.3532 1.04322 30.359 1.04291 30.3638 1.04266 cv
30.3669 1.0425 30.3688 1.0424 30.3719 1.04224 cv
30.3767 1.04199 30.3829 1.04167 30.3877 1.04142 cv
30.3898 1.04131 30.3934 1.04113 30.3954 1.04103 cv
30.4002 1.04078 30.4068 1.04045 30.4116 1.0402 cv
30.4147 1.04004 30.4151 1.04002 30.4182 1.03987 cv
30.424 1.03957 30.4297 1.03929 30.4355 1.039 cv
30.4375 1.0389 30.4386 1.03884 30.4406 1.03874 cv
30.4774 1.03691 30.5138 1.03517 30.5505 1.03347 cv
30.5515 1.03342 30.5515 1.03342 30.5526 1.03337 cv
30.5584 1.0331 30.5646 1.03282 30.5704 1.03256 cv
30.5724 1.03246 30.5746 1.03236 30.5767 1.03226 cv
30.5825 1.032 30.5872 1.03179 30.593 1.03153 cv
30.5961 1.03139 30.5976 1.03132 30.6007 1.03119 cv
30.6055 1.03097 30.6108 1.03074 30.6157 1.03052 cv
30.6188 1.03038 30.6217 1.03025 30.6248 1.03012 cv
30.6296 1.02991 30.6351 1.02967 30.64 1.02946 cv
30.6431 1.02932 30.6453 1.02923 30.6484 1.02909 cv
30.6532 1.02889 30.6589 1.02864 30.6637 1.02844 cv
30.6668 1.02831 30.6691 1.02821 30.6722 1.02808 cv
30.678 1.02783 30.6819 1.02766 30.6877 1.02742 cv
30.6898 1.02734 30.6941 1.02716 30.6961 1.02707 cv
30.701 1.02687 30.706 1.02666 30.7108 1.02647 cv
30.7139 1.02634 30.7174 1.0262 30.7205 1.02607 cv
30.7253 1.02587 30.7303 1.02567 30.7351 1.02548 cv
30.7382 1.02535 30.7407 1.02525 30.7438 1.02513 cv
30.7487 1.02493 30.754 1.02472 30.7588 1.02453 cv
30.7609 1.02445 30.7657 1.02426 30.7678 1.02418 cv
30.7726 1.02398 30.7781 1.02377 30.7829 1.02358 cv
30.786 1.02346 30.7887 1.02336 30.7918 1.02324 cv
30.7966 1.02306 30.8014 1.02287 30.8063 1.02269 cv
30.8094 1.02257 30.8138 1.0224 30.8169 1.02228 cv
30.8218 1.0221 30.8255 1.02196 30.8304 1.02178 cv
30.8335 1.02166 30.8369 1.02154 30.8401 1.02142 cv
30.8449 1.02124 30.8496 1.02107 30.8544 1.02089 cv
30.8565 1.02082 30.8558 1.02084 30.8579 1.02076 cv
30.8715 1.02027 30.8845 1.0198 30.8981 1.01933 cv
30.9002 1.01926 30.8992 1.01929 30.9013 1.01922 cv
30.9071 1.01901 30.9115 1.01886 30.9174 1.01866 cv
30.9194 1.01859 30.9231 1.01846 30.9252 1.01839 cv
30.93 1.01822 30.9344 1.01808 30.9392 1.01791 cv
30.9423 1.01781 30.9465 1.01767 30.9496 1.01756 cv
30.9535 1.01743 30.9586 1.01726 30.9624 1.01714 cv
30.9666 1.017 30.9695 1.0169 30.9736 1.01677 cv
30.9775 1.01664 30.9819 1.0165 30.9857 1.01637 cv
30.9899 1.01624 30.9941 1.01611 30.9982 1.01597 cv
31.0021 1.01585 31.006 1.01573 31.0098 1.01561 cv
31.014 1.01547 31.0179 1.01535 31.0221 1.01522 cv
31.026 1.0151 31.03 1.01497 31.0339 1.01486 cv
31.0381 1.01473 31.042 1.01461 31.0462 1.01448 cv
31.0501 1.01436 31.0548 1.01422 31.0586 1.0141 cv
31.0628 1.01398 31.0655 1.0139 31.0697 1.01378 cv
31.0736 1.01366 31.0788 1.01351 31.0827 1.01339 cv
31.0868 1.01327 31.0901 1.01318 31.0942 1.01306 cv
31.0991 1.01292 31.1016 1.01285 31.1064 1.01271 cv
31.1096 1.01262 31.1153 1.01246 31.1184 1.01237 cv
31.1223 1.01226 31.1267 1.01214 31.1306 1.01203 cv
31.1348 1.01191 31.1384 1.01182 31.1425 1.0117 cv
31.1464 1.0116 31.1509 1.01147 31.1548 1.01137 cv
31.1589 1.01126 31.1625 1.01116 31.1667 1.01105 cv
31.1706 1.01095 31.1749 1.01084 31.1788 1.01073 cv
31.1829 1.01063 31.1875 1.01051 31.1916 1.0104 cv
31.1955 1.0103 31.1989 1.01021 31.2028 1.01011 cv
31.2069 1.01001 31.2114 1.0099 31.2156 1.0098 cv
31.2194 1.0097 31.2233 1.0096 31.2271 1.00951 cv
31.2303 1.00943 31.2326 1.00937 31.2357 1.0093 cv
31.2455 1.00906 31.257 1.00879 31.2668 1.00856 cv
31.2699 1.00849 31.2714 1.00845 31.2745 1.00838 cv
31.2794 1.00827 31.2825 1.0082 31.2874 1.00809 cv
31.2905 1.00801 31.2956 1.0079 31.2988 1.00783 cv
31.3036 1.00772 31.3062 1.00766 31.311 1.00756 cv
31.3152 1.00747 31.3187 1.00739 31.3229 1.0073 cv
31.3268 1.00722 31.3316 1.00711 31.3355 1.00703 cv
31.3396 1.00694 31.3428 1.00688 31.3469 1.00679 cv
31.3508 1.00671 31.3553 1.00662 31.3592 1.00654 cv
31.3633 1.00645 31.3672 1.00637 31.3714 1.00629 cv
31.3753 1.00621 31.3794 1.00613 31.3833 1.00606 cv
31.3864 1.006 31.3924 1.00588 31.3955 1.00582 cv
31.3994 1.00575 31.4037 1.00566 31.4076 1.00559 cv
31.4117 1.00551 31.4152 1.00545 31.4193 1.00537 cv
31.4232 1.0053 31.4282 1.00521 31.4321 1.00514 cv
31.4363 1.00506 31.4393 1.00501 31.4435 1.00493 cv
31.4474 1.00486 31.4522 1.00478 31.4561 1.00471 cv
31.4602 1.00464 31.4638 1.00458 31.4679 1.00451 cv
31.4718 1.00445 31.4761 1.00437 31.48 1.00431 cv
31.4841 1.00424 31.4885 1.00417 31.4926 1.0041 cv
31.4965 1.00404 31.5 1.00398 31.5039 1.00392 cv
31.5081 1.00386 31.5128 1.00378 31.5169 1.00372 cv
31.5208 1.00366 31.5244 1.00361 31.5283 1.00355 cv
31.5325 1.00348 31.5372 1.00342 31.5413 1.00336 cv
31.5452 1.0033 31.5485 1.00325 31.5524 1.00319 cv
31.5566 1.00314 31.5619 1.00306 31.5661 1.003 cv
31.57 1.00295 31.5727 1.00291 31.5766 1.00286 cv
31.5808 1.0028 31.5879 1.00271 31.5921 1.00266 cv
31.595 1.00262 31.5978 1.00258 31.6007 1.00254 cv
31.6059 1.00248 31.6109 1.00242 31.6161 1.00235 cv
31.6229 1.00227 31.6284 1.00221 31.6352 1.00213 cv
31.6404 1.00207 31.6437 1.00203 31.6489 1.00197 cv
31.6528 1.00193 31.655 1.0019 31.6589 1.00186 cv
31.6631 1.00182 31.669 1.00175 31.6732 1.00171 cv
31.6761 1.00168 31.6804 1.00164 31.6834 1.00161 cv
31.6875 1.00156 31.6935 1.0015 31.6977 1.00146 cv
31.7006 1.00144 31.7052 1.00139 31.7081 1.00137 cv
31.7123 1.00133 31.7174 1.00128 31.7216 1.00124 cv
31.7255 1.00121 31.7288 1.00118 31.7327 1.00115 cv
31.7369 1.00111 31.742 1.00107 31.7462 1.00104 cv
31.7501 1.001 31.7529 1.00098 31.7568 1.00095 cv
31.762 1.00091 31.7652 1.00089 31.7704 1.00085 cv
31.7733 1.00083 31.7784 1.00079 31.7813 1.00077 cv
31.7855 1.00074 31.7906 1.00071 31.7948 1.00068 cv
31.7987 1.00066 31.8018 1.00064 31.8057 1.00061 cv
31.8098 1.00059 31.8145 1.00056 31.8187 1.00054 cv
31.8226 1.00051 31.8264 1.00049 31.8303 1.00047 cv
31.8345 1.00045 31.8391 1.00042 31.8433 1.0004 cv
31.8462 1.00039 31.8513 1.00036 31.8542 1.00035 cv
31.8594 1.00033 31.8626 1.00031 31.8678 1.00029 cv
31.8717 1.00028 31.8746 1.00026 31.8785 1.00025 cv
31.8837 1.00023 31.8874 1.00021 31.8926 1.0002 cv
31.8965 1.00018 31.8989 1.00018 31.9028 1.00016 cv
31.9069 1.00015 31.9125 1.00014 31.9167 1.00012 cv
31.9197 1.00012 31.9243 1.0001 31.9272 1.0001 cv
31.9314 1.00009 31.9368 1.00008 31.9409 1.00007 cv
31.9448 1.00006 31.9478 1.00006 31.9517 1.00005 cv
31.9559 1.00004 31.9619 1.00004 31.9661 1.00003 cv
31.97 1.00003 31.9719 1.00002 31.9758 1.00002 cv
31.9842 1.00002 31.9917 1.00001 32 1.00001 cv
32.0084 1.00001 32.0159 1.00002 32.0242 1.00002 cv
32.0281 1.00002 32.03 1.00003 32.0339 1.00003 cv
32.0381 1.00004 32.0442 1.00004 32.0483 1.00005 cv
32.0522 1.00006 32.0552 1.00006 32.0591 1.00007 cv
32.0633 1.00008 32.0686 1.00009 32.0728 1.0001 cv
32.0757 1.0001 32.0804 1.00012 32.0833 1.00012 cv
32.0875 1.00014 32.0931 1.00015 32.0973 1.00016 cv
32.1012 1.00018 32.1035 1.00018 32.1074 1.0002 cv
32.1126 1.00021 32.1163 1.00023 32.1215 1.00025 cv
32.1254 1.00026 32.1283 1.00028 32.1322 1.00029 cv
32.1374 1.00031 32.1406 1.00033 32.1458 1.00035 cv
32.1487 1.00036 32.1538 1.00039 32.1568 1.0004 cv
32.1609 1.00042 32.1656 1.00045 32.1697 1.00047 cv
32.1736 1.00049 32.1775 1.00051 32.1814 1.00054 cv
32.1855 1.00056 32.1902 1.00059 32.1943 1.00061 cv
32.1983 1.00064 32.2013 1.00066 32.2052 1.00068 cv
32.2094 1.00071 32.2145 1.00074 32.2187 1.00077 cv
32.2216 1.00079 32.2267 1.00083 32.2296 1.00085 cv
32.2348 1.00089 32.238 1.00091 32.2432 1.00095 cv
32.2471 1.00098 32.2499 1.001 32.2538 1.00104 cv
32.258 1.00107 32.2631 1.00111 32.2673 1.00115 cv
32.2712 1.00118 32.2745 1.00121 32.2784 1.00124 cv
32.2826 1.00128 32.2877 1.00133 32.2919 1.00137 cv
32.2948 1.00139 32.2994 1.00144 32.3024 1.00146 cv
32.3065 1.0015 32.3125 1.00156 32.3167 1.00161 cv
32.3196 1.00164 32.3239 1.00168 32.3268 1.00171 cv
32.331 1.00175 32.3369 1.00182 32.3411 1.00186 cv
32.345 1.0019 32.3472 1.00193 32.3511 1.00197 cv
32.3563 1.00203 32.3596 1.00207 32.3648 1.00213 cv
32.3717 1.00221 32.3771 1.00227 32.384 1.00236 cv
32.3892 1.00242 32.3941 1.00248 32.3993 1.00254 cv
32.4022 1.00258 32.4051 1.00262 32.408 1.00266 cv
32.4122 1.00271 32.4192 1.0028 32.4234 1.00286 cv
32.4273 1.00291 32.43 1.00295 32.4339 1.003 cv
32.4381 1.00306 32.4435 1.00314 32.4476 1.00319 cv
32.4515 1.00325 32.4548 1.0033 32.4587 1.00336 cv
32.4629 1.00342 32.4675 1.00348 32.4717 1.00355 cv
32.4756 1.00361 32.4792 1.00366 32.4831 1.00372 cv
32.4873 1.00378 32.4919 1.00386 32.4961 1.00392 cv
32.5 1.00398 32.5035 1.00404 32.5074 1.0041 cv
32.5116 1.00417 32.5159 1.00424 32.5201 1.00431 cv
32.5239 1.00437 32.5282 1.00445 32.5321 1.00451 cv
32.5363 1.00458 32.5398 1.00464 32.544 1.00471 cv
32.5479 1.00478 32.5526 1.00486 32.5565 1.00493 cv
32.5607 1.00501 32.5637 1.00506 32.5679 1.00514 cv
32.5718 1.00521 32.5768 1.0053 32.5807 1.00537 cv
32.5848 1.00545 32.5883 1.00551 32.5924 1.00559 cv
32.5963 1.00566 32.6007 1.00575 32.6046 1.00582 cv
32.6077 1.00588 32.6136 1.006 32.6167 1.00606 cv
32.6206 1.00613 32.6248 1.00621 32.6287 1.00629 cv
32.6328 1.00637 32.6367 1.00645 32.6408 1.00654 cv
32.6447 1.00662 32.6492 1.00671 32.6531 1.00679 cv
32.6572 1.00688 32.6604 1.00694 32.6645 1.00703 cv
32.6684 1.00711 32.6733 1.00722 32.6772 1.0073 cv
32.6813 1.00739 32.6848 1.00747 32.6889 1.00756 cv
32.6938 1.00766 32.6964 1.00772 32.7013 1.00783 cv
32.7044 1.0079 32.7095 1.00801 32.7126 1.00808 cv
32.7175 1.00819 32.7207 1.00827 32.7255 1.00838 cv
32.7286 1.00845 32.7301 1.00849 32.7332 1.00856 cv
32.743 1.00879 32.7546 1.00906 32.7643 1.0093 cv
32.7674 1.00937 32.7698 1.00943 32.7729 1.00951 cv
32.7768 1.0096 32.7807 1.0097 32.7846 1.0098 cv
32.7887 1.0099 32.7931 1.01001 32.7972 1.01011 cv
32.8011 1.01021 32.8046 1.01031 32.8085 1.01041 cv
32.8127 1.01051 32.8171 1.01062 32.8212 1.01073 cv
32.8251 1.01083 32.8295 1.01095 32.8334 1.01105 cv
32.8375 1.01116 32.8411 1.01126 32.8452 1.01137 cv
32.8491 1.01147 32.8536 1.0116 32.8575 1.0117 cv
32.8617 1.01182 32.8653 1.01191 32.8694 1.01203 cv
32.8733 1.01214 32.8777 1.01226 32.8816 1.01237 cv
32.8847 1.01246 32.8904 1.01262 32.8936 1.01271 cv
32.8984 1.01285 32.901 1.01292 32.9058 1.01306 cv
32.91 1.01318 32.9132 1.01327 32.9173 1.01339 cv
32.9212 1.01351 32.9265 1.01366 32.9304 1.01378 cv
32.9345 1.0139 32.9372 1.01398 32.9414 1.0141 cv
32.9453 1.01422 32.95 1.01436 32.9539 1.01448 cv
32.958 1.01461 32.9619 1.01473 32.9661 1.01485 cv
32.97 1.01497 32.9741 1.0151 32.978 1.01522 cv
32.9821 1.01535 32.986 1.01547 32.9901 1.0156 cv
32.994 1.01573 32.998 1.01585 33.0019 1.01598 cv
33.006 1.01611 33.0101 1.01624 33.0142 1.01637 cv
33.0181 1.0165 33.0225 1.01664 33.0264 1.01677 cv
33.0305 1.0169 33.0334 1.017 33.0376 1.01714 cv
33.0415 1.01726 33.0465 1.01743 33.0504 1.01756 cv
33.0535 1.01767 33.0577 1.01781 33.0608 1.01791 cv
33.0656 1.01808 33.07 1.01822 33.0748 1.01839 cv
33.0769 1.01846 33.0806 1.01859 33.0827 1.01866 cv
33.0885 1.01886 33.093 1.01901 33.0988 1.01922 cv
33.0998 1.01925 33.1008 1.01929 33.1019 1.01933 cv
33.1155 1.0198 33.1285 1.02027 33.142 1.02076 cv
33.1441 1.02084 33.1436 1.02082 33.1456 1.02089 cv
33.1505 1.02107 33.1551 1.02124 33.16 1.02142 cv
33.1631 1.02154 33.1666 1.02166 33.1697 1.02178 cv
33.1745 1.02196 33.1783 1.0221 33.1832 1.02229 cv
33.1863 1.0224 33.1906 1.02257 33.1937 1.02268 cv
33.1986 1.02287 33.2034 1.02306 33.2083 1.02324 cv
33.2114 1.02336 33.214 1.02346 33.2171 1.02358 cv
33.2219 1.02377 33.2274 1.02399 33.2322 1.02418 cv
33.2343 1.02426 33.2391 1.02445 33.2412 1.02453 cv
33.2461 1.02472 33.2514 1.02493 33.2562 1.02513 cv
33.2593 1.02525 33.2618 1.02535 33.2649 1.02548 cv
33.2698 1.02567 33.2747 1.02587 33.2795 1.02607 cv
33.2826 1.0262 33.2861 1.02634 33.2892 1.02646 cv
33.294 1.02666 33.299 1.02687 33.3039 1.02707 cv
33.306 1.02716 33.3102 1.02734 33.3123 1.02742 cv
33.3181 1.02767 33.3221 1.02783 33.3279 1.02808 cv
33.331 1.02821 33.3332 1.0283 33.3363 1.02844 cv
33.3412 1.02864 33.3468 1.02889 33.3517 1.02909 cv
33.3548 1.02923 33.357 1.02932 33.3601 1.02946 cv
33.3649 1.02967 33.3704 1.02991 33.3752 1.03012 cv
33.3783 1.03026 33.3812 1.03038 33.3843 1.03052 cv
33.3891 1.03073 33.3945 1.03097 33.3993 1.03119 cv
33.4024 1.03132 33.4039 1.03139 33.407 1.03153 cv
33.4128 1.03179 33.4175 1.032 33.4233 1.03227 cv
33.4254 1.03236 33.4276 1.03246 33.4296 1.03255 cv
33.4354 1.03282 33.4417 1.0331 33.4475 1.03337 cv
33.4485 1.03342 33.4485 1.03342 33.4495 1.03347 cv
33.4863 1.03517 33.5229 1.03692 33.5596 1.03875 cv
33.5617 1.03886 33.5624 1.03889 33.5645 1.039 cv
33.5703 1.03929 33.5762 1.03958 33.582 1.03988 cv
33.5851 1.04003 33.5853 1.04004 33.5884 1.0402 cv
33.5932 1.04044 33.5999 1.04079 33.6047 1.04103 cv
33.6068 1.04114 33.6102 1.04131 33.6122 1.04142 cv
33.6171 1.04167 33.6234 1.04199 33.6282 1.04225 cv
33.6313 1.04241 33.6331 1.0425 33.6361 1.04266 cv
33.641 1.04291 33.6469 1.04322 33.6518 1.04348 cv
33.6548 1.04364 33.6566 1.04373 33.6597 1.0439 cv
33.6655 1.04421 33.6704 1.04446 33.6761 1.04477 cv
33.6782 1.04488 33.681 1.04503 33.683 1.04514 cv
33.6888 1.04546 33.6937 1.04572 33.6995 1.04603 cv
33.7016 1.04615 33.7047 1.04632 33.7068 1.04643 cv
33.7126 1.04674 33.7178 1.04703 33.7236 1.04735 cv
33.7257 1.04746 33.7279 1.04759 33.7299 1.0477 cv
33.7357 1.04802 33.7415 1.04834 33.7472 1.04866 cv
33.7493 1.04878 33.7511 1.04887 33.7531 1.04899 cv
33.7599 1.04937 33.7646 1.04963 33.7713 1.05001 cv
33.7724 1.05007 33.7743 1.05019 33.7754 1.05024 cv
33.7821 1.05063 33.7881 1.05097 33.7949 1.05136 cv
33.7959 1.05141 33.7969 1.05147 33.7979 1.05153 cv
33.8509 1.05458 33.9036 1.05773 33.9565 1.06105 cv
33.9576 1.06112 li
33.9643 1.06154 33.971 1.06196 33.9778 1.06239 cv
33.9788 1.06245 33.9806 1.06257 33.9816 1.06263 cv
33.9884 1.06306 33.9947 1.06346 34.0014 1.06389 cv
34.0025 1.06396 34.0037 1.06404 34.0047 1.0641 cv
34.0114 1.06453 34.0179 1.06495 34.0247 1.06539 cv
34.0257 1.06546 34.0272 1.06555 34.0282 1.06562 cv
34.034 1.06599 34.0426 1.06655 34.0484 1.06693 cv
34.0494 1.067 34.0501 1.06705 34.0512 1.06712 cv
34.0588 1.06762 34.0639 1.06795 34.0716 1.06846 cv
34.0726 1.06853 34.0736 1.0686 34.0746 1.06867 cv
34.0814 1.06911 34.0884 1.06958 34.0951 1.07003 cv
34.0962 1.0701 34.0964 1.07012 34.0974 1.07018 cv
34.1051 1.0707 34.111 1.0711 34.1187 1.07162 cv
34.1197 1.07169 34.1189 1.07164 34.12 1.07171 cv
49.1805 2.09321 61.3225 13.9194 62.8398 28.8399 cv
62.7511 28.8656 62.6627 28.8912 62.5737 28.9168 cv
60.1418 14.234 47.3626 3.00001 32 3.00001 cv
16.6383 3.00001 3.85838 14.234 1.4263 28.9168 cv
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 64 ]ct
[62.88 0 0 29.28 .479998 34.24 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 131 
/H 61 
/M[131 0 0 -61 0 61 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 131 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 131 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 131 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 131 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&f`8#QeH)fQJcLB&aT/mQ`<![QJcNIa`W:Yl[/nPQJcMnQecD`Ng&e)P
h>i--SH.dQR/uRTPlpFSJcLc1p&^'Pq?)ERJcLB&q#H9Ro`C-VnH>!TJcP$8RKDRPSd"'VU&]cFf`8#S
eH;rYd0?lVJcNmm\c]nR^';CX_>o/f\H'bT[04b[Ym8\WJcMbMg'"5Th?]e\iW+Q1R/lLUPm-R_OUCXZ
JcLW-q?;QVJd_MbL&cf*o`1!VnHP-bm0o9\JcOm4Sd+-XU(,ofV>u2JeGu`Wd0Hrfbn%5_JcNai^'MO\
_@XBl`W1Sj[/eJYYmJhkXV01bJcMVIh?fk^iY.jrjoBu5PlU4ZOUCXoN>;-eJcLK)Jd_MbL)0S#M?&5.
nGn^\m0o9tknoihJcOa0U(,ofVAe,+WW7VNd/^H^bmq0%aW.klJcNUe_@O<j`ZDZ3aoI"nYlN2`XUs&+
W?BmpJcMJEiXq^njs$3;l2ZD9OT=qbN=tq1M'VotK`H])r;_Qcq%JW5od>b"JcP0<Q5&QtROR>IScF?B
h#O;efbLM;eLRd&JcO$q[MR%%\h:rS^&W`b]`?%h\JWIC[4ol+JcMnQeetG)g,#Q]h>i--SH.dkR2bEL
PrA%1JcLc1p)Jo/qDa0gJcLB&q#H9moc9&SnN2m6JcP$8RNLW5Sj)*sU&]cFf`8#peKD"\d6Y&<JcNmm
\g#*;^-oe*_>o/f\H'bs[3NseYt*4BJcMbMg*NRAhFaJ6iW+Q1R/lM"PpbuoO\PBHJcLW-qC%%GJl2JD
L&cf*o`1"%nLB]$m8TAOJcOm4Sh/hOU0-5RV>u2JeGua(d4MY.c!.UVJcNai^+[;U_I'u``W1Sj[/eK,
Yqa[9X^]i]JcMVIhD:i]ib"`njoBu5PlU50OYu]ENGA.eJcLK)Ji<QcL2Qg)M?&5.nGn_3m5UDPl#N3m
JcOa0U,q*kVKLR7WW7VNd/^I8brrL]aa1MuJcNUe_EY^u`dPCGaoI"nYlN3<X[1NiWIih(JcMJEi^02&
k(T4Wl2[(LJ,~>

%%EndBinary
grestore
np
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 14.0.0%%For: (Nick La) ()%%Title: (button-backward.eps)%%CreationDate: 2/26/10 7:01 AM%%Canvassize: 16383%AI9_DataStream%Gb"/LB6W@XZM+$:/cLAb2U5^li.qGT*X?X*#8oq68JX#WbkZ4-qchUQ#U4NNF4\"hY&+AreCE(aSuSq/OsZYU]#.:Nfr5qHIr-u%%JS/(SP8RNIA@"eNCUZO)h<J$qD7;=2oXYdHh`&0LY1MQCbWejX3Hsc8i\1m\X4@0,0j7?61Y/BZm.FOV[gE4ZLE?*EApV7hmg^2J%g3n0P>OHF=`P:]Y'#Wg>;!>M'OW9t-*dUSh$(RZV*Gm,CLcEFlO9<#65UN:i*Of4irkNRZ?-aTESZ^CZJ0$f]VP^`o)\*bm32hBn%_!KTh[TpH1[@I=CjiK6.b&u/<\\M2>SK9u_<*I2>HO5FIX$l;<2CPciHc[9:J3TEXK@.s8LXWc\iMcc[ICaUf9qkFigNd*-@SiYV%=`Sj!4V$7\QW:DOjjor1CI!S^+tE@K=C[/m(Hjn--_4d5!$.$k?iJtuGT_7m3;aSTNISk74<lO()<UM<_BF0X0!gKb5qDEQEte>P%U6''*ZJ4fTS:O>+.e%_?&NK[o^A1ad'+/>X&HU:ba9[C?LqH@7,?2:iS*jY<!9HhZ1[+NOe;Ta=$?`N>%8+lpK,6OS,lrQ%YD4^]%]BM-W?n<?0BscK;\*CF"6_pd=EmU@sKA\+I$-J90G6\s*XWa-^Ro*<1;a6')1Zshb;(UW*(Ho6+mbSRbF0Z.a80[Sg$m.%q`HMbn%'1Imck&\K?fK3KAJ28eYF;J8ihX#'BTVkmSoU=;9M@.\.oRk5W=(?/#GZ,2?gVL\mp`aeWX*GcV@G1R(M%3@"%,:4kVqDEY8tsQ1%9Qr%#i+t3<$ITp)s'gpO",md,rWE6dAJm]i%6mQC3%>3D'a/=f"DeeUg1oBpS+`"VUlo<EP@^PQAYbK#gCAIC)U`:;dV/-*]ep7u%1_$GR)h&urBd/gV@SbIk(=PYigW!:KQ=]E"gXpDuZk&Fhb"Lii,LTWZ)70c<-B"KeKf\0?;P?j:VR-di_G?snNURVS%P0pCU/(K?%H`.O*+t%+Qar*(R:Xg>mGSG;;0r[%ppdg*bi@!(+2BE8(K9B.P;_(`ri@""a25el$fr8e0FHeoW;*[GIO:(Zu:ZOo,8@>=3e76!W%.b$-@0XV8TMu)B[m\+gRs7f/3a!:A9<2^mf;D1q4:qP0GEPqhZ.!^?8^h6V1C3?>HFpmY'25eltjA[`m0'+)JMc'\-8;#V"a@,F"%2q=A*U42lo<#"5g+12FBMk<Omg1@PjZ@gf'QD5[$F9`WmYS*T<-)X;-=:!n1n0tb,Q&]%=N_AboOp<$7FJH,d<A6Jq:A`L`qF;j0%O\*qoI84WH3S<DRi\ua<g*`'nU,@h0^ePL8.CoW:8,1!Y&Vbm.O1ZH73V!8E'Nbup8(IrV%HIu<V0luQNap0QDJ</4r'-dN/^]m`%M'Cc:[e)5:PpCZ$g<r2SU&36'ri%C'=4L\pec4*@g(J8eT4-+FBM8@\=j*O0U+Q<o(?p:TV13=V8+Sb;%R6q"l$fj,\"FfrR\F=s%S-kRg:#8iD%R)n:1CW#I7C't'R]4u+N-<h34%EU2)aTC"lIZbS#R;;_Z&aX3fLt`p@il../WPH.)X.]9TV!P%G_G]4qlJlM$f>QD%+64WE+C$cDh3(S9jN%/26]'7"Zo<CHbh,<6(&4G^)Ne>"gW8%;2b9N\e;U13\.XdPVe/m,5n:/toq1e%]a8>2C+>oo3Jr/j;U'^W%C"lJT1^Yh=1"m=d9@T[JDs7.DV"W\pDorMc"s`VZ1m8G]f6p61[a9@f9BoQ=NPZ9sdo#J!Y&h@7eL%]D7M>+(@Mfio/6$Zgn%Qhg%#@gl17<("UX/V9.WOIq!5auGKfMG;2"Z67#_D[X+-KY$RVJ%.#,O/fe/^,efE$8`kX`;a_&7_"3hfY7G2pE%Q941=A[=dK!Q=Me&%-iIo"^cbOA\HOc$m,?Hr/+D]\>KhWE#;_W6qGMg+X@84cdh_`.'MIU;]jaifIKkNX.#P`t+?=7h,O/"<79bUM+9TGAgk$gL31\>-%X-%>3U0',?(e(qD/0PSsEPB1f.UaS]d8-UoM#7slZl`m_SOh*(Z[k%2-8GtClp;upkaV:s=eCk<A5@Vh5-fFm.FgqHlF2dj.7\ah%>JaYTa,]hKbFht$3/4a."D_8(#=BH2Bj6F\["()`_a9JYTi;a_8VtL-l$RuE,<4G9>j0G3;H'/h4,hg=KJKc6RQZ%JO7EcC_ZmG-%[%t?+Dj;LL?cZRekZ/eiV/s!qBU8iOq'=etkEmNpD\G"HRd0c'[S?$*=?UDsE[7bVhkQ^][QKC(2OMO4^([smJ%crm(q^Rs,88+h%d8u$:arcQ$0p74JI*>@(U-@.I.gZ6S-kc#o-C^YB@Tngs5%ruT,ZkFaQ/a)5Zq59G)QFFr(L_]a;In!0<+"XinU>qXX/Rr9$=o`\%/C#,ZXR_@Tk.c?1@[+\G*%R"a&Fq_u-DEU3WXFh&]aY(QfH+]rmE`qJM2G=9H_Kmr\rX%6>E&9\QfcoP^rbb7X;2`ck7$4)<RkWO%$+1h"B<q%jP7nC3J^OBSM)ne%H%jrsC?&;*H),Z\)l1l6<<lRl^=C=&%Jr2oQD%7A-Z*];0DPgR8X_-*Zm=O[V32gTa'qPpeJ,SY%nREbH:$DRROt0Y"7O[u)3(i(Cg:/\k7*u('RNaK4:?*=QNH%<2%cfBt'a+!9N"JL@(Op)'UIW<M5eCJEBYYtL^ghB-Nc7U;K8bt#%:SQ*4='G65#AZEG?eb*B*(;Rt]dMOdD[0L$BGn([1(1S*KgiS9KRGG#SX<Zm"Z$K9;@TSLVkH2srpf\U(1T*7fsB^.`>IX?%b":-%=mI`PNRkAN3cl:ckr-csTuVOQ80$Yl=(^E]GXA61&0:+_<enMk`h[n;pWQ=<VVmt66Y'9j.BJY0HndY$r&<aThOek/p/1%RK.WhQ%A5;XGrq+FY[!.tP0q4ofP1aCfV#,2+eZbWHrUgOkll"GOSX#t6fcb5rPP&u4)tX,E7rgGog*GN7?h1ReO4F$$qTsg43Sm(Qe&5ud%V.Ve"#GYu(kHV"SS#g\JN"XIaakj9SqE(^c@o[KPdS\6,ao^-WIa&e]bB-3$k<79J'qbHRXA:BRoIXF/HN<7*+=k`pMbk).cV`eZ%P3XZu]!YWd$rmt?K))'O$7]R\o5gig??nq!GB-`>Qf=X&<(QDL#!%AYSX@GBm._<E<:0LH.TAEb>$"7%44sOX`T_Y,`=F<LS\@[<%c]5at9d3Tn'[AD9K?&QP_YJ=,=Y%i+Ob[[/gfJ/X):kct*D5W74.L.8ATU$rW0(g"nrc<k&&%p[-M$ljR9%+5*)thXZp*G?n$$O:%.U%oLhLY#-1R]?L7H,@<a<3"eC"NhM"<6*U+<GRHBFIRjM)=:Gc%T7oY6?>6f?'Briq5#dbO&B`;(Y29!c>;.7N=pa9toXGO1dR2%#P&#)qe'`b@gloK#pDKLXMu!DHcIDKqCAC[8]*-mQ.S!BKB,m&i_<6)b1Ws4UT,\V%AHB3Rl>.@-2KlQJsJ+:POhcf/Nj$0l]MC>%D82)O6[DQPdof_XZ$(ra)ilIPRHnZgR4%K.N+E6*NqWg>K@qB%A;FZ#VQ7HW[K@sIs0u[9j@Qu'hRHllJt.sX=hf,6dVVU'J0!-I%SMaa0LNBL_f81+VZXOp5r[KJGBe60B>:P_&M1#oh8W9KWA>1rbqS/?7mA`V+UJVZ^3gbstn;SqRSGTPQ98RS-c?,6*7%uR-YG:nQ%U>f2eNA)l=R(]=M"8VTQ6"ADZ!Ic5.N;.?)hT-ZD1*K.NM%uO@k^-4)NTugKj\".V1#3.F'[mtK@g&W=`;j*XWDnL4-;TS=3QdY(%0s^+)C5>%;fL-dqpS`cI"CSkWC%`#6+%Kq1'baWEIDIQT<o$X@8m"G+]d$a[$+m.MSB3bmcZl]/^BQjY+sqP,.7ahq]*18/?PUJ+%*k0+U:LY12lZI7HK,1Nt6BmJL@a#$uNPp[Yhia*o-2pq4Xi\d%N\![!-i-HL^A\H\ImkE@GJlffrM>:BL>\]hB[P4`c2DY"hS,"\%4IRAe&3Y#)"-8-oiTOD_55a5B%K..(DYUs[O>A5L?j:`f*09\%oHq>go+X.E9GLh`,gHg]h]Y\!-LlSB_"`kg."e$1%e:=X"kd@_%MH?IuDe?J<QO*;;CXXoLDQ@!>D;f]e;K<#[*kfdXm(`Pd!d1i%QbI$[Or!``Z8I<46a&T<*Hu8SbUU0%PUUs(j^F^jGlM_5K/I8k%57i5n%@[GYmkfB,;]47?a)`-P#bB(TYasV)Ebesa*He8MMk/aCX4rQ;%?EK>.Wact^"KJ?>>E6/(ihb"I+J3)/IpD]iZ0&/K;gY?%0Lj7Q<;Rh7\sqbNO3QfgWo1:C*b0H4IY0(n]<.03Z74l&+!sL?rdVs*Q_["3U-fAH5*A\q3g/n?rn!,2e<<CQ`rF<=9rHNVeifq_%BNEOc88/T)U2Acget;Y_\(0iS,<Wr*>WU`7=_YFC5Q-/fT#M5A;/:?T!(;ul,&+[V*o8*VPT!<C,s2DARo#D;L=.Rt`d$dljYAr.%FCL(]\=S2>=hX'AS@2X5lJX&gCRMP^%*&X4;9_47fZ\4;06q&Q<e-OX9!$5dX9pV?L#iJRZ51*1XNf^HEBLl::5"d6jqN'>SAsf`%!Rlf-Y9IVs3ekh>X5jCiK_;F*AL4PN)R&`:=cYpQ_qQj\n.Bn2&4AesA3kd5.VODd(kN&I9.1.UaCb-35!q"l6S`1>0iUNXqSk2u%b:":)/d.bt.@QDKP8OhUg)?gpo3)`U$3RPX9<^fWZ=HV5<(jRiN+KduCfs3M0![pKa;9Q)=Hn\`;(8M6Xf*%qU04j\7B!sdD]?X&%79d'/)[^+[ZZR3V[\5KNDu3p.Nlf!R*\jJs()4SK+t,*rC8*+Kn<-3D?E0r\3kPmK'L<qJ#Y\B'6IVQs7<55t/1H`3Bp(*"`fcaP%/?&n"ZSEp"Z605s=d!?!O]>PJFkMjNfoh79)%5lj_2=s2.5G45W+_%u0*<PI$hQbaEfmTaH#i#W67uu=i.K3?%i&;ARI'6m<hk`S%o"7@D\S!0Jc[j),&p6lbp3VNG>TP"81)ueIRFVd0%4dBk!:=h3J=%)PiYi6Bdf>3?56?<;r<W01m,Oc5+WnaO-3j2MluAso5ke\^%!(4RHLHqOe!K^gt8cjsi&Rpd:@kM_2I!#/9!*$9SVt-j\MQ3JpWhQLiZKnLk7AZgr!V<D4BtPd+U*aT[VVlB=R][N)-<aRb<r@3B%<p+T+i%=1Ki(hf[]NQ'86q]1"^p"#UnFHm*B"gg-5EI[B7.NQ=p]h0+5iEe5qu_Y&TTBM7Y]^@k)N?5:=<3U^8F%At(.&<dnOb;m%3j[NX4V,D(>RgUQs'ij7I7o&MK1^dTTcQfjr_H,X&*!U\IfD[l+"7$hKn#cb%i#"l8]4B&L=lN.+Z+XCFR&<_hsR/b(48lri(qP`%B=:Psh7l!]LY9tS55A"RG[=mgIQD>4g!"8tRdFG)%7jU`,#n.I^0P@Qj\@VZ"$,fL^s376q1(h^0d:\a4?^#E'oq-X'9h9S1L'Jf%SXg1q"iJ3C#RD>;im$!CdV67EJP1[+I*YK4kR!-rc\t!ojg(%(hD>)*MDFlZPN\,K7ND[hN(MPHo"6eG_#sMIj-;D31%'oR]+BS9%VX`=C:G&9T;8-oOqqsltCKAdfNq\=q1L$],LVGCClGjmbKXBg\9#c?]L[-[]Sr8Z>6#<V'33o`n"K@413X/dOW\KMmGjd\"Q)TjX%a)K7LCZptfba-ZD[eq;K_%<60DWS2d*&)O3S)4q.B"s7"ErhjbGlgi6I-isH3rZ\ED_Td<J)GXtJ('2(7*eQ#oF`E^FgB(N#i`Ge%dX#dg7>d#^TEcB0Q\1@h"\a+94i_V*Ps6sOZc_p0s*!Ri+YrR]Do>VE8K4\L-+lMdi;IheZMUg+;lhk^c?lnJ*;g-1i3OEDd@&I_%&"U;T>]tIFX%/9hL]gV#,K'8&h#TYaYe`$D?8Fft)5l$ONuVmrrD12+*;HMr<.4^g:g-=1%_A@S`Z_B;4f8Mscu6@J/LU*52pm;-%]*qVc8.uiYF?71-IOQ7Me-]Ekk;i/b869h98'V,2!Z0HM[ecfMn!Qpreu^n`%+@1QS=o46']GuSa9&[f[^tp&le:_8>Q%Ai0rCb=%$ntgh%39OQF,#b<)NS-hWJ-02!kd(M\BFq<1ERq(l0bJ(+%'%ueg'V*rH9[nJ1Se/F=Q]<B]EBE!IVMo?*B$?Etg/M*@e1'%igIj%i4gB]lM0!^g1-B]o5("(Mj!8$IV]O!Xh`,hY(nogf"h8mj@\%)]%(f(_i3=j,au8'qE!G'@]%g%&p=*4G?6!3e%&\"%bn6>o=UC1%l9#.kT9@=V"s^K%.W5*??cNm_U:`c`C"R7X;El!)5=i''8?'L0'/'`e$%!pTP5%dq3^ZU!0C@DKUn5t/ZVA4i`QQ]B2PA!PNA++S%i?PfG7rI*_P\b5I;=a0ZMtWTVY'AqEajWDN'?'JNL^%k0"X`o2n&'_2hs0mIHtCqPFPFog7VSm0_!u%^n?T78.,A7TlCd)T;k$>.%E1?NTcYO>2-d]WN]`2CkY6eVN_ng$,:?[*aNH\r%KLCfi`Y3BBb9]&>i+gI=rBVqf!=<Mm:D2nsOkM1@"J.s6X1%QoEh0a0kZ)9c%Uco4o;ltbnC?"7[o.@F0R#>q1mEL:aV=YrB:B:NnII@Y4!)E'"[oVh,e)VcbN=iHN6[j.7_3"V-^#P('GGBi0NUM+G9Rj?`6GdWB%flF!O9^&#GHZRPWHIGG7NAm"-d\nZJLuN:W@V:46=+<8B3&SD0@m-a:HI[Dp_fY%b(`iruOF%pPn)%Q-P"J/T_)SV4-fV'I@E[os%)fsI+Sh+*LhYta2*A!k\"q@9$;%ks0$7RrJcl@_q`lh*)0TMq?[5c^To$TolHOp\3:9?U1b_n'4B98;Ap>,98e)D;Q_*DlQ@V9:.%8.^O_@1M!n8sk5lSeU7BjDDs7lmJX$K/cJ5ZY<oIcTrS<3d!&LkW%q@0Uj#k4!eKSSO(!Dl?TdTB3K!CqK].u+^al>_kNcYr.m4O%#=qA:BQ;1Ep%$sQqB8j7)J+>g6j7[]Sr2)7BkE7dkfR?i8$D4NPOZnoH&7Udl\,8%>[D.-K2kF<rF];WN!R%J7SjXiR?u\3r5\UV%&NR6Q/be29O=5]Y1H^s:ZVm]&T:K;>`_W]V4-?NRMcVjq23VoMWhr1t<oqXApCNccVa&Fh5Vm)^ioci[j04Rlk[r2'=Ik^e]c`rC%M+kfGiK@0/rpW(t8k9KI<at<b7e,?RidWFLa0!7lnU$_]Qq3m;ktJ!hEL:X6pfX2Qlj1_1iDa+/m8&Sa*f\Dm16o3J!g:Fa=bG5B%!L:aU%+OZEVG+4ITKbkf6;S]J[>l9l2a)1qNZ*'jdh2X(E]TcLm+N/R=mJ,i?kFkiDt9_eF6C9T!nnO-EpVCml0dR%f,F7MT<rj[%$lCL?dqWQh_0$=%A#Je:M+KfeU'H?FFE6]Zk9RSt4^$I!S1@JO/NTd7bEe@[HgjFF-9A+bG"*eN"9CT@WZ4cH1D\r5dlQ'/OT+QE%clF\\>-7$grQf'db59JK#n4p<a=(BP7Ie%dL(-nIcCC^4_O*rZUqg!?':^%8+p=EiG;-u)Z"5`ogZg*VpfNe4Y\t8+rlU*'(X#Sn%]6ATP43mfeM6MAi1CDuI]<PZ1/=b?#S#\&Oe&h?NjI;p=]XV7W3SZh8&%9f5Xdg3?@7@GZr4/9X6ue?#qppO&hdi&\4"pF&_X;$>%?g+-Q>FB;9kA7sBLe\.DrTNOJYUd:2ZamPPZ1@^UqUeVWeHZpeZ0^hcnp!-u5+W5R0t4-k]4ZQj\27l8m)t;SgCfk@N/uQ4>pa@;%fTZ&/AkS"^;f8e1Id(E"Ilhr&38O:L@JA6"/o::Rm1!he41&'"X0kWe(s@AT]bjq\k<$Xr'jC@d25;l[)p0Cl0ZVqR<T26;$G-Nn%GE`Vogc&U*04"@]r+-mMNu*bFqQZi_Ef1qf_nAthB!U.2l:.UPOfha0LA8?dX(R.J%HHX6gIB"a\ZnkQ\A!H>ZImg/<1Hb^f%_\)%c5Le8Nnn^iYIX;6h0_5^)QiAB9$Z2d2:TrEb?l[t>%-TiJIhP4\U?*oS]XQOA++eX954F[CF[J-^F&/Njd=ftgu^q`($hZF$YE=<%>ie^gX4p?ib5qW`kBj8?:"O&-QYib=_caEU*q(`<'fS"L%t6NfOr*j-Zhq&5HWtpPk2-uI$/>DR()5Jhf,)g\:\('(eNl:a)kUnd%cA1P!oo/"((XK38B6W$8fQd%-'H%ir#T#gjag1A"N^`MeA)H/9^[9km:FWib=a[!gp]pd8TR5"&m-b`LH0_-;kOZ7=gYJiXr-TZZ%$j?ia(P_"3!^t%".)9mL!4TO`NC9p?N_'V5oh%np\buV-I[!&HHJ//IY\IC??U`"<=Yf(4Rk*k]H[hetR)Yt&.lG'K?dIL"9\'as%b-0<^O)joupr[I/)WJGZ@9XgtY@dAnhV+s:ZZY$(X`ImcrAR0UY'-T1eC%Fq<51Cs5IIW$l7',8?tbFGnG])I^Y1ZWFhXe@qm,K$%G05FZHMM)***7!qZ8"EDNk"g!!`gV'S-sD"aVGu!ffK/AHXO,PYC]"^YktkE>C_b,bmgGK]o;e;C"^"+"%Q2K*&RLZ@O9AIDPr])%6iH\2,Db%/kj?%9X0pEhcL-u?q6d&c>q/Cn*:iT&F7%N>hO<,ZY<RpaB6cR*.KmOS(Geaa=@IlY+K4#;T\ACo=`5#Ob"h'\>#ud@%]29YT*jol!]RLn:F.;W%RS1"`pXIDtp%!BN"#A*7Af54lT4u^dar&snK2R>p.Io$>.%ZJEB5hRg?++om97#YXp(-&$R;AZ8BN;%b%78$Me3HoI9&l,#[]%nWa>$GpYFlQt.D&]V&D-&ALm[&ICksiae=5<0AjR)'!nt]XE)Cs2%H.e9<c5JNDY$&/t,8m<E2J<jWhVK=X%.3&OOI4bnNTtY`3$3&1q(E7Sp9t&JGdOje:jenF@dE:j>N##+j0M9jO4^iPocdc@NhEBq#A%DR.HJOG4"QkkLZKBg6@<$GYlRnW?%7Toi7Wro1.ijknjG4f]^kI=lON*TSN$uX^DdS"L+VVeE<Dh[!l1CkaL[u^d=Q4<8%po9[8AMIpG`/r$t5eGrS[[3u&ipjSPY^:=t%G*M;rI?f//\^?,mKr#u&g>iagZN>U1B29#J4k>&=52\>#c%GN<IafU+N@;nGgbgc#R\V1]PtPcf't3PXhSB1=*]#3#I5bdh;U2l9%?QXV`,hXK^\8,Z]Tm-bSrJ^Nu;/j/nMaAiiIb8.cOJ"Fs7&3XbSHtD#&iHZ*.$SatFC)ss4+p`n$=PZ(U-Ree6-4#cYN1`Wp*P32%Yaq_4&=J]C'Ci"948#/FcibY(cZ#-)&_DU.PE&7TmGDm$L`?7hBHK'3`1*\km$'?I*mlIk--X5g%o[!eV!>6MgEfg0nh&on#>OVa%=?u#@"H82A5iT+HWsC2S`ZbkBjDe\s;-ccS"Qn?pF@P8J1o$(!C1tCGC9\@.M+tFB/.RikR,Q+#dj'JXi[F'lacX%F?JUZ=9?>Kn%H:k.&KG%UGab,202#+=OfRD`-e+#au:96uGq\Vt!J4-e!1qs8_lB3iUBXT0A?HXh-G!Wi>o:m3lGl2e[Q@A.Gq=_1*(KT<H<;JI9%5%/,N#Nj2*RJh=.Y\c%pk@#,n^!pGucRhHE@XT$[(2rJMoB!AVXF,IKe#=m!:.U#\aig)sfs,NeQ8>`\9.jn6TN44bG!J^8bN$!;%d2\KTD6]"QgQbd`C^dKhXjb`P,Hd-ulKZtAl_74%n_TskD&(c0Eg.$=G1cf9[U+0!Dg$?3FmI*%'.cIgHc=->H-;:.q-7ala;OGh%b?ZbB7C<k28gctX15oRorDG:X9=K-X!D??rgM/=P>GL<5(k[/I]&gM-kL[IjPRAreW7Ifcs3BV7Nhm%_9)m/TaW*qe^Zl1=RR>Wh%Ou]f@IJJh&-u(:$*Vhn/aaX*ZdJ\nfb1Od1&Zbq9.grYE%b=QK^T:@$?@`..hMnSQe%0OaI3+Jj(fQ-O@]0!)KYW%D50[<P+,U`"%%9=6X38aX[k=E.#SX&l+Ro=i!6mi.N,flcM"h!O-/?ag0E+lW>q@fk-nGuHPrBDp5HXRqDAmG\GX'Iie;1WYTK>ZQ,G>6iE&Uu.\%SkW=_m&n\DF/YF/Kam6Os5GN[#8_dHAjQ#iWo\@>N:eXF=S23GT8R=Af>9EOr;%=Vs#CVTjrsGXcgqTJLg8NL0L3'd@IR`Rnp:aA%6O7jY]@q/-kbaQ^)Heubh;YVca@3@@T%=eG@V5sDa_/#i8s-Nl[.U4EQ*V.alEUDr`C'O#0BhmKX'bfVh;VU"BXmpNHlI9r=lj`"%I`\2Snu]h/L$O_Wlpp0Yf`12u1YE>&G/<bg2raQ,h#SC$LHX:8_pt="ehltX`quKC*#[b_@(FOOr^+I,:G9;fF.*IUb2QL:WKX_l%EO4U%3'":rf/?&g=*Lm_frT@)G.P-Lf<p;:C+9p@hd8Eu];pqQmD_Vp$'V"T6#[mgc=84UNcN^-\,JiO2NF/Yi]a1Ij#=ej^?FZi%I@8<0GTLHtr!LhCa6Ctj'*P'HQ@dq]g$CY/4KFQj\n4`q?fhX73EGr1[T<hjEsL)C5l#HS+sbp5\c=V&^%QD*cqban.Wse.l-HA0%D/5UApf;m[3rOT:bbITf)<JF;qg!K3J=\p9gQT)%[q41#e'[9CdE5g;^pMT7AOe(?8,RY-4r7R5Z;2TjIA-.A]W?iD<[5O'A6jI0%$^T/"ER(O"hmXYraVonElmK)^pZLkK3`J_oh0H2gS@^5HZ7?XFilf=</(>n-QuHeU`QAD^9,C[;.nG/6.]imPiJ#7fm_R/RFkgju%):Io#?GB[YXR"L"%9QaQAe1LKj--NinPY'9.!o1Ln^H/P()tkY"L@W:.8>&p]Y%4L?Pf%NX;]a7BW4Xof#d42.Of8PfI)qP4o5PQ%d!k?2Q:d.$5t.//YPZ:uFh&9[hU#?;=6$,r]/1@X,G0OFlO3:Abe=9,9BCORdBp3p*^:\5qCKMZQ(4O2s/=JVRk%S':ss4G[e4UH%Su,\C:>3d"GFlEB^SVV!Xt)^e3u9+e47:;G-TR6rrNj5e/8fVQ3QR-lVjA\+q63"a?U;8a+N'/3BX&(haa&LS1'dCKU&!0M4W)"i%s6GBJn-!=of/5Oun.hu6I9(/*b^7sbAB>?).6bg?I%JLOT)Ef=CUMH`W!N*fpp.D;eOjacZh\*&!app&H>!8fRt`*Y$\If@>Nokb%[4P.gfIia2G)Tb?o(FBa>qL:]D2:3_TI\@=T2n[5gF>CuKB3\lC*2;))<Uma#JJm%=9ja1_%N&,AG9.N4:$(K*(.jISh-Z<7/PJl%AR3]d8_NlReZSa&,L]WN97+$ZS,.3^2@K3DUSU-A=P'uFolLgprM+=95'H9uCCl[61@a@b_Y0O)0;q&&Q(40\*sEF%lblkTU<CQh%RaNrEa^t4NFl)!-<t::!Iee<FGmGE:5b]h'nML1ZT]9OmE*Fh'A%_QtPG+8VY3$)G5<h>A`Ar=1jWAZdoRD/n_t?[CeZ7)Pfe6e5%Q.B!RI<c2om>>n)**iuTUR-Geg3gAf]5('m)o1INQdNP"QcAQ9o`M(pcUY($G.:PnF(,nW[ITV`.snMQ@r(I6"<R<0h[[!d_J-hj%Hl6%oY*VobX9Q"CI1:\\\[Ti;JImNr^OF#Y5f",=[)B8:mQ[-k07>a[_u6YE-&*bqF0Lqaa*u*Qa'Lp3hVmJb(ZpO#bM@T_V8@0r%=o\cAnd+Q^CT?I_gd+q^pn;&6L&fE`K?qF&IW$q^Ma83`hl9m8/$f,u7sY,(/F$.$oEl682a.Ql,(dP]HoZ=EqI-"=MA<)m,NnW5%.E5Q=Q.!2P5'XTe]6\<OI2&p`WB,mT.TB2[IJ\CZJ=3dW]J*E_-=BXJ1(!a7a`hn.6!WjA/:V&7!N=l-@cbFiXMRj'.j3^8@R2A?%+<<W[>3(H+^Ui(M4*`rF=U/Q0B;;:;QH2t@ruk=\*uC17+m+^Km9FM[$T3p9JiGtu@uXNipGT=-O"_?=[bm#3m-[KYK(h:JZpAUj%0)d?*Ld0IpqK;OK?u94t<J*p.Eu7LiT3oYfbJhU7q&*3g$_CX'YE)/2NN],C1U9j6WO8(Z@G1W'8$u/c"`Oqh]9jtkL/Fht'K^NX%NJj&20]5TA)VtBQK]2/.N,7\+7a>P^Z0r%3/UK'UK9%c<9o_:Di@je8;0sN$b/So1;2^S^A4om9DtRl4!EU[6\!i60]7*$b&D=7h%/K&T)gaX`HoqJT1p':BAGKsMXak`E@9tS1#DD/IbkNfPNaST=];FP%i5,c!5CcU"qpKg!@-'3fWGi]o2Xk.-.C.$Sl9tfA*CFds\%r*btC-Bj_033<>VG0.0#FT?]$=K]rhY=o_F`"'9e3!]66nPG;5T'N5t!r/V+hMI:[^fd`IJ%Y&]0)l"]6?r]?0HG:@6i=#djkH9f%>?*[;O3GUBo`qY(IM?t/KGWtHFSA<#A+=4kW5i^e\QIL0^4ERg\_:Hec*%Ibq8Z9uF)*r;\g?/YP-B"7kc`hBYYIssJGl4i9?o"D%5f1KjN2FJl$k&8`]`5Bg@T?+bdop[-<Q9&[R'+;"'dfneM2MBe+-lEOU5',Zotnu^q^-ftr?dKo;95fC'8$/Do#@8-X?rGDofK3,%5(A0R#)1]$8P4$.nm'D\8e]Y,q@@lV,Y1tTm:s%,hZ!?A5.'4=LCLmsTmFA'3U7KG=:^>0VmZ(mI&stFVJtmRq2]R)I_F[aEt&<?%gO(aGm&4]9*tH#bn+u:>E?9&mW`O:c&dH55mcMEdTrX['HWFE+U\mL@hVB/Te`+TpX(@SYeZ7Z.<8s6k`#(4f,lc4T$Qj!bj[]49%n,)53#>>HlduJM$rNN_f+'Fa>@?a<]HH2uJ(T0du4)=cq,3O\^mY"lrWX]EG3![U$`0ZDQD/bV0!Ktu27uhga`2";)<q3Zs&,UKV%J&5,ELM>qaJ_=X@03eBtOJ,1J@S3-l^4LCagg5O[=HQ-Zm5hYD9@f74>s^`4HIXTM-OVdiEABZ9PC%u)a;EWHhXP"m!sm[F84TfD%4=&tB6Se6<o+\'Rk-hn2fFIT3Ne@;qf:os)C8h!je&ee&j^;5C+Ka2m?gTfJSS7)T>3iC&l[A`SHiSCSDu3%[QQLPL`dA[fFjCR'%:^.cUV;fZGf>+q-`NhS/pXXEaR14jS+^B1bm@eA;=&rB)>p.Iq>$L`4>%3Wb$m#1Q\[J`2eFWdjd<Th2PJ)?gf%\Of(E0r//=c=_%daL,?/mRg9$g'JT<S^NES3eD;k'hrQ6n/\4O8!V\pFQ$Wm_*HH*g^84074Y0X3Y]W_LLs.(W7W'>K#\-N*ZER01[(nqD!52ZXs#X%:u\#r?-6dOT%!H?5NA*1::PLgmY`.8/h3CS:?(o8%8[P]kLILT>HI7"S\B`cHqq7c19Kkf\'qH9]PcJ`qO]Z-eZ%.Uci((ueGDXc%TeFLSBf:pPH\9)EhPW*gQBA^rEDF7a'0T".-'I:_l(,X:]kfWNcf7tl+*u5)a`\Gtp-hVEI?3oI5Q/:mHbMS8dhkQ`Zr9*-*cLR#%Z_)q1%*`9@ZeMIB44fLn@)$<U)-egFcN:$_h3/KqCkA;T=>.>a"Zp"5>Ku)dM!o&&*SkZI]2s7ld;qF'@p1,]:RKKZ?ME7nS2l)S%i*J3ZXoSC.I=1N*G:K`RW.B1WmDa^!*04P`oq$eS4i:ZF+Sa8lR'#\-TUfHOOW6B]F8C;le$A%YY^uM>V"OJT>RkYU=a`>KJ_T_O%7rZ9$\\!3g`hhWU%c$F[Xt^W<$VSs#*0i(-?_Ua2-J](KoI,(2p:943hSnmgRg&prg^fkGB'"^+Vi!n_59e\nnnY^p,(3rJ#rCRW%k*H(Zj7'5&R=UMZ,u9jUAtbhQDR^4gpeR7Qo5j1K3=36Tn1NEtTMO$E63=$Ta=X(T6=@4VJ@s%_J,D'8\;Ypt56Ki^B1MW_^D_!F%krZXW5GuD,:on*7+>PWL0MW_EU&m#n2H-3XknCf#fdGSgD#\U49Filt"&jc/5)(dg#g0LA1cnC;6b5"W@,,:#fW]i1oO.r0jAU&d%-@#rU_mCE3m12BHb3AR!bB1Vc%kA*Rp:+Up)tP:\FBgjF(iKZmGAE<tbs!rMI,\Y`nrq7O!$W/]fp`MV2Pg.1p\hPbr\^0)#j5oG%===#o(;I\3hR[t.rN_!?V1I*p3o6)?('D^b#7_%-Cn-dJ;Wm8sMI+W=iB'>1SotWU3&(Q:Rs@m<Po41q3J&#`m0qcjA(Z8!36bKC%?hB9X!5<0ndn29Xa9+^>.HNe-krFND#\'%j.F5MhFeg]Da.?$a>B("kAoOBp4I'5(k)2&XQqi]+<id/iggJA6?"ee,L9pC%HEuW0%G0_>82'Go`aW&G&`j9JHMcP=hLCK;';YLB81QS:a,3SMlCJ\_j_IOn3H2Df_qhZ66Z3nC+3JU2/K<+Rm1__#_\dMK/.9Oi9^P7k$%k>Xj>7hIB2m)O!`cRYt@=e$P!55c&YZh;7,O[Q[bZ?^?-!.8g;=je['S;,f%FTdH3S9bih7*R%^8\;0K<05`QPge`+a.YMaH;4q&%mu!5mnLW[%cCFu%_1s05/S]8NQjih%RMcYM^(F!(2a^/-k(L+LXA<*c%`A)jYKZ#&XV_[?@q\&o\Ts\p,f>+$c5WIJ*lau.F<52b%>L\%>l=m+]3q_'OP5tKNgrY#c+RHR(K)M#2f^H>?)i<USUl#"'/%UD]kR&Qfr8Vm2"u8:+_/A9=&189-EO"Y#[).%XTb+]nCu(7/%**VL@D7-s)c*RqPTCiW'3,N];=n0>Jj't]=USdt7r$%(nF0d.Nj-%VQ)uhk?,(:TWn=tk9TDnYs+i]"A(?L]f4j/.Vgj6d='TP8I%$pK)#p":5l-dp%HipSn3:(NrI&?m!%\>(F#-_FCus(Cc`s,p#M!f,+r%N`ZmBFMq^$nk2V6_:H0p7>D5[.qC%SolgL!P*iFVs?ed%Yog#s/37bQU:k/@7aDLbMa$f]^8II$o`+f(B+usO8chNVA._!>Z7jQFW*Chjnr8D8;:_+b?Js`aE$<t.7TF.Yg!um##I6_lODb0s%TE@j?i5Q2$3l;2o#L@<I)IUqAs$efbk#qUX&4FqQ1s^4U$cW%bK?uVB0<:O8G&tK[U?+75&kGfnSZ1#WV%5BJ_q9I'pmE94JsAT)%?=>/8d>2PM_P*R"QjJY$=phH*4;/9HW"]JR?n[4(6:R!6AA=lZnI"I_N`m0$D,B"3,4O)ZSBUQ6,E(2KV;E[G&U8B&aN@1A`tG_Q%;,os*18qWW"CJ.hEkoep_J`sMdi\>nCpSSS\KUs^Y@_<WFcErHK*1A27A&LF%(1h`=!2Od]CEojqUkbmo@//"kX[5t565`]:.8Q8%+j]_ZJ-H/gju&.Y3D`UNo!5?U+5eDb,WZM/5Dq<b,E6dFbReq)-`bUsd[mP?VX^gKgD:%Vj2$\!P"<Zo;I0LEO?JTJMjb!ubjueb%_'\;%?@mS21D'`m%uY^."/,6`SeV91!'un5,FDId$4hPN8-'m&='7fqLgcWMGTk($f('G].i;$4(fs-U8K],Nh[7dU<qIV;Pr4NO%S;%X!F-8HT?PhdNLN=$1!)$2JR@GD\<I>L.fVHVg<QI.i+KEY6g[?N29MX\<0!EEl0VtPeKBAW"0h19nNG*]`6qBMSWc0qjT5ac3%GXj]u1duC8"?#OrcP;`G:(k@R#RX"bWI"mp1mKB^OhpE'q1c/XKm>`'9!Q#F_M'4+N5?kdP_6LjjG)UOZu?l;jWuVm!d8i#/J&M]%WgY-*n5Q"t.,ku(e&2edK#29F'GU';1mf2s2.Fc[$6r+:Mq&)R":,TRN"jV_N$)[m=(<;SS.Hh456m"6=:1j86)#Wtds_d9>*(U&%n)qcnc&$^K?o<EE4:')mYG+KX_`k@kk$,-jA.hBG*?mt0!THHO1]RKn`"-!EJUC,QIK)D$j>9WN">kPd8+")c+=aDu.dd;n5qfO!%jU]XuYQ^RS<[K8Y1su=gfd-:a&*.21\Y*^j`\&&HKo?sEr@H7_e5rpWBS!i:oS.h#/99g`c]#mV"C@p",/hue-E9>0a_W"p"[-AN%!]h4:$9h-Er;Wbl56o0B.-F`)QAJm9e65d2<&4dCPd,1"3<\j%<$?60?uqWAMUi^3"YcYQM1gRYcDbj\&G$S<Qm52b!8`fk8E!)M%5Z1K*"Ye*^-&s$I"fMtT.?Up_bjZOH-QX$IGsr=MIY>WJ\Lde'7"+DuDM1&0c7_+;A8Xf2:tSpIJLZOS:7"@Cj<s&2R%=>fOp\Th%%]0jGGhOF9*(32.:fo..UAQVE\I'&VbWW0Y9CF=H<lJiI@`eUR_\q>M:8$,Va/SudFrC?nilVFL.hZAVfE!X]#XM=]Go45HFTGW]%i/S091Z2(@8@F.h,U(O!KfM9>=JH2'P)8A+6uEBYk@,EP,D5(jP2o*obRkj0U'&eX(6/NXO"*h(eZ_H4La)rO5Dk9bO^k!!p$W`:%A--7TN&1\j;n.kI@hMk!4HB"2T;W4EUAt4NS7fY;Pq.dEX->cFflFc"^$klB)=kRCBAhc*3q<5]l4:ItbOcb0^[MMN$-:6-(9b!8%87-p0ZSc^82I<$XS_X>,rl_GA5>$bC`s#n&8tA:;/jCN2D?6H$:3_$_)ZK1MP;uW>jsf]Y&]=N7TsNG3Kq8&>[\&IV~>%AI9_PrivateDataEnd