%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 14.0.0%%For: (Nick La) ()%%Title: (2-03.eps)%%CreationDate: 1/6/10 3:42 PM%%Canvassize: 16383%%BoundingBox: 96 240 128 272%%HiResBoundingBox: 96 240 128 272%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_Cropmarks: 96 240 128 272%AI3_TemplateBox: 112.5 255.5 112.5 255.5%AI3_TileBox: -194 -140 418 652%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 32 32%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 1%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: 74 277 24.71 1893 1050 18 0 0 18 96 0 0%AI5_OpenViewLayers: 77%%PageOrigin:0 0%AI7_GridSettings: 4 4 4 4 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 128 8%%BeginData: 21420 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDC0FFA87D527D527D52A8FD77FF7D7D527D597D527D597D%FD75FF527D527D527D597D527D527DA8FD72FF7D7D52FD077D597D537DFD%71FF527D527D7D7EFD067D527D527DA8FD6EFF7D7D597D7DFD07A87D847D%7D527DFD6DFF7D7D52FD047DA8A8FFA8A884A87D7D597D527DFD6BFF7D7D%537D7DA884A8A8FFFFFFA8FFA8A8FD047D527DFD69FF597D52FD047DA8A8%FFA8FFA8FFFD04A87D7D527D527DFD67FF7D7D527D7DA87EA8A8FD09FFA8%A8FD047D597DFD65FF537D527D7D847DA8A8FFA8FFA8FFA8FFA8FFA8A884%A87D7D527D527DFD63FF7D7D527D7DA87DA8A8FFA8FFFFFFA8FFFFFFA8FF%FFAFA8A87D7D597D537DFD61FF7D7D527D7D7E7DA8A8FFA8FFA8FFA8A8A8%FFA8FFA8FFA8A87DA87D7D527D527DFD5FFF7D7D597D7DFD04A8FD07FFA8%A8A8FD05FFA8FFA8A87D7E7D7D5284FD5DFF7D7D52FD047DA8A8FFA8FFA8%FFFD04A87DA8A8FFA8FFA8FFFD04A87D7D537D527DFD5BFF7D7D537D7DA8%84A8A8FFFFFFA8FFA8A9A8A87DA87DA8A8FFA8FFFFFFA8FFA8A8FD047D52%7DFD59FF7D7D52FD047DA8A8FFA8FFA8FFFD04A8FD057DA8A8FFA8FFA8FF%FD04A87D7D527D527DFD57FF7D7D527D7DA87DA8A8FD05FFA8FFA8A87D7E%7D7D7DFD04A8FD07FFA8A8FD047D597DFD55FF7D7D527D7D847DA8A8FFA8%FFA8FFA8A87EA87D7D527D527D7D847DA8A8FFA8FFA8FFA8A87EA87D7D52%7D527DFD53FF7D7D527D7DA87DA8A8FFA8FFFFFFA8FFA8A8FD047D527D53%7D7DA884A8A8FFFFFFA8FFA8A9A8A87D7D537D537DFD51FF7D7D527D597D%7DA8A8FFA8FFA8FFA8A87DA87D7D527D527C767D527D7D7E7DA8A8FFA8FF%A8FFA8A87DA87D7D527D527DFD4FFF7D7D597D7DA884A8A8FD07FFA8A8FD%047D59A1BBC27C7D527D7DA87DA8A8FD05FFA8FFA8A87D7E7D7D5284FD4D%FF7D7D52FD047DA8A8FFA8FFA8FFFD04A87D7D537D52A1BBC199C1767D52%FD047DA8A8FFA8FFA8FFFD04A87D7D537D527DFD4BFF7D7D537D7DA87EA8%A8FFFFFFA8FFFFAFA8A87D7D597D53A1BBC2BBC2BBC27C7D527D7DA87DA8%A8FFA8FFFFFFA8FFA8A8FD047D527DFD49FF7D7D52FD047DA8A8FFA8FFA8%FFFD04A87D7D527D527C99BB99C199BB99C1767D52FD047DA8A8FFA8FFA8%FFA8A884A87D7D527D527DFD47FF7D7D527D7DA87DA8A8FD05FFA8FFA8A8%7D7E7D7D52A1BBC2BBC2BBC2BBC2BBC27C7D597D7DFD04A8FD05FFA9FFA8%A8FD047D597DFD45FF7D7D527D7D847DA8A8FFA8FFA8FFFD04A87D7D527D%527C99C1BBBB99C1BBBB99C1BBBB767D527D7DA87DA8A8FFA8FFA8FFA8A8%7EA87D7D527D527DFD43FF7D7D527D7D847DA8A8FFA8FFFFFFA8FFA8A8FD%047D52A1BBC2BBC2BBC1BBC2BBC1BBC2BBC1767D537D7DA884A8A8FFFFFF%A8FFFD04A87D7D537D537DFD41FF7D7D527D597D7DA8A8FFA8FFA8FFA8A8%7EA87D7D527D527C99C199BB99C199BB99C199BB99BB99BB767D527D7D7E%7DA8A8FFA8FFA8FFA8A87DA87D7D527D527DFD3FFF7D7D597D7DA884A8A8%FD07FFA8A8FD047D597DBBC2BBC2BBC2BBC2BBC2BBC1BBC2BBC1BBC27C7D%527D7DA87EA8A8FD05FFA8FFA8A8FD047D52A8FD3DFF7D7D52FD047DA8A8%FFA8FFA8FFA8A9A8A87D7D597D527D99BB99C1BBBB99C1BBBB99C1BBBB99%C1BBBB99C1767D52FD047DA8A8FFA8FFA8FFFD04A87D7D527D52A8FD3BFF%7D7D537D7DA87EA8A8FFFFFFA8FFFFFFA8A8FD047D537D99C2BBC1BBC2BB%C1BBC2BBC1BBC2BBC1BBC1BBC1BBC27C7D527D7DA87DA8A8FFA8FFFFFFA8%FFA8A8FD047D52A8FD39FF7D7D52FD047DA8A8FFA8FFA8FFFD04A87D7D52%7D527D99BB99C199BB99C199BB99BB99BB99BB99BB99BB99BB99BB767D52%FD047DA8A8FFA8FFA8FFA8A87EA87D7D527D52A8FD37FF7D7D527D7DA87D%A8A8FD05FFA8FFA8A87D847D7D527DBBC2BBC2BBC2BBC2BBC1BBC2BBC1BB%C2BBC1BBC2BBC1BBC1BBC2767D597D7DFD04A8FD05FFA8AFA8A87D7D597D%59A8FD35FF7D7D527D7D7E7DA8A8FFA8FFA8FFFD04A87D7D527D527D99C1%BBBB99C1BBBB99C1BBBB99C1BBBB99C1BBBB99BBBBBB99BBBBBB767D527D%7DA87DA8A8FFA8FFA8FFA8A87DA87D7D527D527EFD33FF7D7D527D7D847D%A8A8FFA8FFFFFFA8FFA8A8FD047D527DBBC1BBC2BBC1BBC2BBC1BBC1BBC1%BBC1BBC1BBC1BBC1BBC1BBBBBBC1BBC1767D537D7DFD04A8FFFFFFA8FFFD%04A87D7D537D53A8FD31FF7D7D527D597D7DA8A8FFA8FFA8FFA8A87EA87D%7D527D527C99C199BB99BB99BB99BB99BB99BB99BB99BB99BB99BB99BB99%BB99BB99BB99BB527D527D7D847DA8A8FFA8FFA8FFA8A87DA87D7D527D52%A8FD2FFF847D597D7DA87EA8A8FD07FFA8A8FD047D597DBBC2BBC2BBC2BB%C1BBC2BBC1BBC2BBC1BBC2BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC27C7D52%7D7DA87EA8A8FD05FFA8FFA8A8FD047D52A8FD2DFF7D7D52FD047DA8A8FF%A8FFA8FFA8FFA8A87D7D597D527D99BB99C1BBBB99C1BBBB99C1BBBB99BB%BBBB99BBBBBB99BBBBBB99BBBBBB99BBBBBB99BB767D52FD047DA8A8FFA8%FFA8FFFD04A87D7D527D52A8FD2BFF7E7D537D7DA87DA8A8FFFFFFA8FFFF%FFA8A8FD047D537D99C2BBC1BBC2BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1%BBBBBBC1BBBBBBC1BBBBBBC1BBBBBBC17C7D527D7DA87DA8A8FFA8FFFFFF%A8FFA8A8FD047D52A8FD29FF7D7D52FD047DA8A8FFA8FFA8FFFD04A87D7D%537D527D99BB99BB99BB99BB99BB99BB99BB99BB99BB99BB99BB99BB99BB%99BB99BB98BB99BB98BB99BB98BB767D52FD047DA8A8FFA8FFA8FFA8A87E%A87D7D527D52A8FD27FFA87D527D7DA87DA8A8FD07FFA8A87D847D7D527D%BBC2BBC2BBC1BBC2BBC1BBC2BBC1BBC2BBC1BBC1BBC1BBC1BBC1BBC1BBC1%BBC1BBBBBBC1BBBBBBC1BBC1767D597D7DFD04A8FD05FFA8A9A8A87D7D59%7D59A8FD25FF7D7D52FD047DA8A8FFA8FFA8FFFD04A87D7D527D527D99C1%BBBB99C1BBBB99C1BBBB99BBBBBB99BBBBBB99BBBBBB99BBBBBB99BBBBBB%99BBBBBB99BBBBBB98BBBBBB767D527D7DA87DA8A8FFA8FFA8FFA8A87DA8%7D7D527D52A8FD23FFA87D527D7D7E7DA8A8FFA8FFFFFFA8FFA8A87D7E7D%7D527DBBC1BBC2BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBBBBBC1BBBBBB%C1BBBBBBC1FD0EBB767D537D7DFD04A8FFFFFFA8FFFD04A87D7D527D53A8%FD21FF7D7D527D537D7DA8A8FFA8FFA8FFA8A884A87D7D527D527C99BB99%BB99BB99BB99BB99BB99BB99BB99BB99BB99BB99BB98BB99BB98BB99BB98%BB99BB98BB99BB98BB99BB98BB98BB527D527D7D847DA8A8FFA8FFA8FFA8%A87DA87D7D527D52A8FD1FFF847D597D7DA87EA8A8FD07FFA8A8FD047D59%7DBBC2BBC1BBC2BBC1BBC2BBC1BBC2BBC1BBC1BBC1BBC1BBC1BBC1BBC1BB%C1BBBBBBC1BBBBBBC1BBBBBBC1FD07BBC17C7D527D7DA884A9A8FD05FFA8%FFA8A8FD047D52A8FD1DFF7D7D52FD047DA8A8FFA8FFA8FFA8FFA8A8FD04%7D527D99BB99C1BBBB99C1BBBB99BBBBBB99BBBBBB99BBBBBB99BBBBBB99%BBBBBB99BBBBBB99BBBBBB98BBBBBB98BBBBBB98BBBBBB98BB767D527D7D%7E7DA8A8FFA8FFA8FFA8A884A87D7D527D52A8FD1BFF7E7D537D7DA87DA8%A8FFFFFFA8FFFFFFA8A8FD047D537D99C2BBC1BBC1BBC1BBC1BBC1BBC1BB%C1BBC1BBBBBBC1BBBBBBC1BBBBBBC1FD18BB7C7D527D7DA87EA8A8FFA8FF%FFFFA8AFA8A8FD047D52A8FD19FF7D7D52FD047DA8A8A9A8FFA8FFA8A9A8%A87D7D537D527D99BB99BB99BB99BB99BB99BB99BB99BB99BB99BB99BB98%BB99BB98BB99BB98BB99BB98BB99BB98BB99BB98BB98BB98BB98BB92BB98%BB92BB767D52FD047DA8A8FFA8FFA8FFA8A87D847D7D527D52A8FD17FFA8%7D527D7D847DA8A8FD07FFA8A87DA87D7D527DBBC1BBC2BBC1BBC2BBC1BB%C2BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBC1BBBBBBC1BBBBBBC1BBBBBBC1FD%12BB767D597D7DFD04A8FD05FFA8A9A8A87D7D537D59A8FD15FF7D7D527D%597D7DA8A8FFA8FFA8FFFD04A87D7D527D527D99C1BBBB99C1BBBB99BBBB%BB99BBBBBB99BBBBBB99BBBBBB99BBBBBB99BBBBBB99BBBBBB98BBBBBB98%BBBBBB98BBBBBB98BB99BB98BB98BB98BB98BB767D527D7DA87DA8A8FFA8%FFA8FFA8A87DA87D7D527D52A8FD13FFA87D52FD047DA8A8FFA8FFFFFFA8%FFA8A87D847D7D527DBBC1BBC1BBC1BBC1BBC1BBC1BBBBBBC1BBBBBBC1BB%BBBBC1BBBBBBC1FD22BB767D537D7DFD04A8FFFFFFA8FFFD04A87D7D527D%53A8FD11FF7D7D527D527D7DA8A8FFA8FFA8FFFD04A87D7D527D527C99BB%99BB99BB99BB99BB99BB99BB99BB99BB99BB98BB99BB98BB99BB98BB99BB%98BB99BB98BB98BB98BB98BB98BB98BB92BB98BB92BB98BB92BB98BB92BB%98BB527D527D7DA87DA8A8FFA8FFA8FFA8A87DA87D7D527D52A8FD0FFFA8%7D597D7DA87DA8A8FD07FFA8A87D7E7D7D597D99C2BBC1BBC2BBC1BBC1BB%C1BBC1BBC1BBC1BBC1BBC1BBBBBBC1BBBBBBC1BBBBBBC1BBBBBBC1FD1BBB%C17D7D527D7DA8A8A9A8FD05FFA8FFA8A8FD047D52FD0EFFA87D52FD047D%A8A8AFA8FFA8FFA8FFA8A8FD047D527D99BB99C1BBBB99BBBBBB99BBBBBB%99BBBBBB99BBBBBB99BBBBBB99BBBBBB98BBBBBB98BBBBBB98BBBBBB98BB%BBBB98BB99BB98BB98BB92BB98BB92BB98BB92BB98BB92BB527D527D7D7E%7DA8A8FFA8FFA8FFA8A884847D7D527D52A8FD0BFFA87D537D7DA87DA8A8%FFFFFFA8FFFFFFA8A8FD047D537D99C1BBC1BBC1BBC1BBC1BBBBBBC1BBBB%BBC1BBBBBBC1BBBBBBC1FD1EBBBABBBBBBBABBBBBB98BBBBBB98C17C7D52%7D7DA87EA8A8FFA8FFFFFFA8A9A8A8FD047D52A8FD09FFA87D52FD047DFD%04A8FFA8FFA8AFA8A87D7D537D527D99BB99BB99BB99BB99BB99BB99BB99%BB99BB98BB99BB98BB99BB98BB99BB98BB99BB98BB98BB98BB98BB98BB98%BB92BB98BB92BB98BB92BB98BB92BB98BB92BB92BB92BB92BB9299527D52%7D7D7E7DA8A8FFA8FFA8FFA8A87D847D7D527D52A8FD07FFA87D527D7D84%7DA8A8FD07FFA8A87DA87D7D527D99C1BBC2BBC1BBC1BBC1BBC1BBC1BBC1%BBC1BBC1BBBBBBC1BBBBBBC1BBBBBBC1BBBBBBC1FD26BB527D597D7DFD04%A8FD05FFFD04A87D7D537D59A8FD05FFA87D527D597D7DA8A8FFA8FFA8FF%FD04A87D7D537D527D4ABBBBBB99BBBBBB99BBBBBB99BBBBBB99BBBBBB99%BBBBBB99BBBBBB98BBBBBB98BBBBBB98BBBBBB98BBBBBB98BB99BB98BB98%BB92BB98BB92BB98BB92BB98BB92BB98BB92BB98BB92BB986F527D527D7D%A87DA8A8FFA8FFA8FFA8A87DA87D7D527D52A8FFFFFFA87D52FD047DA8A8%FFA8FFFFFFA8FFA8A87D847D7D527D4B6FBBC1BBC1BBC1BBBBBBC1BBBBBB%C1BBBBBBC1FD22BBBABBBBBBBABBBBBB98BBBBBB98BBBBBB98BBBBBB98BB%4A6F537D597D7DFD04A8FFFFFFA8FFA8A884A87D7D527D53A8FFA87D527D%527D7DA87EA9A8FFA8FFFD04A87D7D527D527DA86F44BB99BB99BB99BB99%BB98BB99BB98BB99BB98BB99BB98BB99BB98BB99BB98BB98BB98BB98BB98%BB98BB92BB98BB92BB98BB92BB98BB92BB98BB92BB92BB92BB92BB92BB92%BB92BB92BB926F44A8527D527D7DA87DA8A8FFA8FFA8FFA8A87DA87D7D52%7D52FFA8597D7D847DA8A8FD07FFA8A87D7E7D7D597DA8FF4A6FBBC1BBC1%BBC1BBC1BBC1BBC1BBC1BBBBBBC1BBBBBBC1BBBBBBC1FD2ABB99BBBBBB99%BB4A6FFFFF7D7D527D7DA8A8FFA8FD05FFA8A884A87D7D597D7D527D527D%7DA87DA8A8FFA8FFA8FFA8A8FD047D527DA8FFA86F4ABB99BBBBBB99BBBB%BB99BBBBBB99BBBBBB99BBBBBB98BBBBBB98BBBBBB98BBBBBB98BBBBBB98%BB99BB98BB98BB92BB98BB92BB98BB92BB98BB92BB98BB92BB98BB92BB98%BB92BB98BB926F4AFFA8A8527D527D7D847DA8A8FFA8FFA8FFA8A87D7D59%7D527D7D527D7DA87DA8FFFFA8FFFFAFA8A8FD047D537DA8FFFFFF4A6FBB%BBBBC1BBBBBBC1BBBBBBC1FD22BBBABBBBBBBABBBBBB98BBBBBB98BBBBBB%98BBBBBB98BBBBBB98BBBBBB4A6FFFFFA8FF7D7D527D7DA87EA8A8FFA8FF%FFFFA8A87D7D597D53527D527D7DA8A8FFA8FFA8A87EA87D7D597D527DA8%FFA8FFFF4B44BB99BB98BB99BB98BB99BB98BB99BB98BB99BB98BB99BB98%BB98BB98BB98BB92BB98BB92BB98BB92BB98BB92BB98BB92BB92BB92BB92%BB92BB92BB92BB92BB92BB92BB92BB92BB92BB924B44FFA8FFA8A8527D52%7D7D7E7DA8A8FFA8FFA8A87DA87D7D527D7D527D7DA8A8FFA8FFFFA8A8A8%7DA87D7D527DA8FD05FF4A6FBBC1BBC1BBC1BBC1BBBBBBC1BBBBBBC1BBBB%BBC1FD26BB99BBBBBB99BBBBBB99BBBBBB99BBBBBB4A6FFFFFA8FFFFFF59%FD047DA884A8A8FFFFFFA8A87D7E7D7D59527D527D7DA87DA8A8A87DA87D%7D537D527DA8FFFFFFA8FFFF4B44BBBBBB99BBBBBB99BBBBBB99BBBBBB98%BBBBBB98BBBBBB98BB996F446F4A4B446F4A4B446F4A4B446F4A4B446F4A%4B44BB98BB92BB98BB92BB98BB92BB98BB92BB98BB92BB92BB92BB924B44%FFA8FFA8FFA8A8527D527D7DA87DA87DA8A8A87DA87D7D527D7D537D7D84%7DA87EA87EA87D847D7D527DA8FD07FF4A6FBBC1BBBBBBC1FD14BB4A6F4A%6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F98BBBBBB98BBBBBB98BBBB%BB98BBBBBB98BBBBBB98BB99BB98BB4A6FA8FFFFFFA8FFFFA8527D597D7D%A87DA87DA884A87D7D597D7DA87D527D52FD077D527D527DA8FFFFFFA8FF%A8FFA86F44BB98BB99BB98BB99BB98BB99BB98BB98BB98BB98BB98BB98BB%926F44A1A1A7A1A1A1A7A1A1A1A7A1A1A1A7A1A1A16F44BB92BB92BB92BB%92BB92BB92BB92BB92BB92BB92BB92BB92BB926F44FFA8FFA8FFA8FFA8A8%527D527D59FD047D7E7D7D527D52FFFF7E7D52FD047D7EFD047D597D52FD%09FF4A6FBBC1BBBBBBC1BBBBBBC1BBBBBBC1FD0CBB4A6FFD12FF4A6FFD04%BB99BBBBBB99BBBBBB99BBBBBB99BBBBBB99BB99BB99BB4A6FA8FFFFFFA8%FFFFFFA87D597D53FD047D847D7D597D59A8FFFFFF7D7D527D527D527D52%7D527D527DA8FFFFFFA8FFFFFFA86F4ABB99BBBBBB99BBBBBB98BBBBBB98%BBBBBB98BBBBBB98BB99BB986F4AFD09FFA9FFFFFFA8FFFFFFA86F4ABB92%BB98BB92BB98BB92BB98BB92BB92BB92BB92BB92BB92BB926F4AFFA8FFA8%FFA8FFA8FF527D527D527D537D527D527D527DFD05FF7D7D527D537D527D%537D527D53FD09FF4A6FFD1ABB4A6FFD12FF4A6FBBBB98BBBBBB98BBBBBB%98BBBBBB98BB99BB98BB99BB98BB99BB4A6FFFFFA8FFFFFFA8FFFF7D527D%537D527D537D527D53A8FD07FFA87D527D527D527D527D527DA8FFA8FFA8%FFA8FFA84B44BB99BB98BB99BB98BB98BB98BB98BB98BB98BB92BB98BB92%BB984B44FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA84B44BB92BB92BB92%BB92BB92BB92BB92BB92BB92BB92BB92BB92BB924B44FFA8FFA8FFA8FFA8%FF527D527D7D7D527D527D59A8FD0BFFA8FFA8FFFF7D527D59FD09FF4A6F%BBBBBBC1BBBBBBC1FD12BB4A6FFD12FF4A6FBBBB99BBBBBB99BBBBBB99BB%BBBB99BB99BB99BB99BB99BB99BB4A6FFFFFA8FFFFFFA8FFFF7D527D59FF%FFFFA8FD14FF527D527DFFFFA8FFFFFFA8FFFF4B44BBBBBB98BBBBBB98BB%BBBB98BBBBBB98BB99BB98BB98BB92BB984B44FFFFFFA9FFFFFFA8FFFFFF%A8FFFFFFA8FFFF4B44BB98BB92BB98BB92BB92BB92BB92BB92BB92BB92BB%92BB92BB924B44FFA8FFA8FFA8FFA8FF527D527DFD18FF7D537D52FD09FF%4A6FFD18BBBABB4A6FFD12FF4A6F98BBBBBB98BB99BB98BB99BB98BB99BB%92BB99BB92BB99BB93BB4A6FA8FFFFFFA8FFFFFFA87D537D52FD18FF527D%527DA8FFA8FFA8FFA8FFA86F44BB98BB98BB98BB98BB98BB98BB92BB98BB%92BB98BB92BB98BB926F44FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA86F%44BB92BB92BB92BB92BB92BB92BB92BB92BB92BB929992BB9299926F44FF%A8FFA8FFA8FFA8FF527D527DFD18FF7D597D52FD09FF4A6FBBC1FD18BB4A%6FFD12FF4A6F99BBBBBB99BBBBBB99BB99BB99BB99BB99BB99BB99BB99BB%99BB4A6FA8FFFFFFA8FFFFFFA87D597D52FD18FF527D527DA8FFFFFFA8FF%FFFFA86F4ABB98BBBBBB98BBBBBB98BB99BB98BB98BB92BB98BB92BB98BB%926F4AFFA8FFFFFFA8FFFFFFA8FFAFFFA8FFA8FFA86F4ABB92BB92BB92BB%92BB92BB92BB92BB92BB92BB92BB92BB9299926F4AFFA8FFA8FFA8FFA8FF%527D527DFD18FF7D527D53FD09FF4A6FFD12BBBABBBBBBBABBBBBB4A6FFD%12FF4A6F99BB98BB99BB98BB99BB92BB99BB93BB99BB93BB99BB93BB99BB%4A6FFFFFA8FFFFFFA8FFAF7D527D53FD18FF527D527DA8FFA8FFA8FFA8FF%A84B44BB98BB92BB98BB92BB98BB92BB98BB92BB98BB92BB92BB92BB924B%44FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA84B44BB92BB92BB92BB92BB%92BB92BB929992BB929992BB929992BB924B44FFA8FFA8FFA8FFA8FF527D%527DFD18FF7D527D59FD09FF4A6FFD1ABB4A6FFD12FF4A6FBBBB99BB99BB%99BB99BB99BB99BB99BB99BB99BB99BB99BB99BB4A6FFFFFA8FFFFFFA8FF%FF7D527D59FD18FF527D527DFFFFA8FFFFFFA8FFAF4B44BBBBBB98BB98BB%98BB98BB92BB98BB92BB98BB92BB98BB92BB984B44FFFFFFA8FFAFFFA8FF%A8FFA8FFA8FFA8FFA84B44BB92BB92BB92BB92BB92BB92BB92BB92BB9299%92BB929992BB924B44FFA8FFA8FFA8FFA8FF527D527DFD18FF7D537D52FD%09FF4A6FFD0CBBBABBBBBBBABBBBBB98BBBBBB98BB4A6FFD08FFA9FFFFFF%A8FFFFFFA8FF4A6F98BB99BB92BB99BB92BB99BB93BB99BB93BB99BB93BB%99BB93BB4A6FA8FFAFFFA8FFAFFFA87D537D52FD18FF527D527DA8FFA8FF%A8FFA8FFA86F44BB92BB98BB92BB98BB92BB98BB92BB92BB92BB92BB92BB%92BB926F44FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA86F44BB92BB92BB%92BB929992BB929992BB929992BB929992BB9299926F44FFA8FFA8FFA8FF%A8FF527D527DFD18FF7D597D52FD09FF4A6FFD18BB99BB4A6FFD12FF4A6F%99BB99BB99BB99BB99BB99BB99BB99BB99BB99BB99BB99BB99BB4A6FA8FF%FFFFA8FFFFFFA87D597D52FD18FF527D527DA8FFAFFFA8FFAFFFA86F4ABB%98BB98BB92BB98BB92BB98BB92BB98BB92BB98BB92BB98BB926F4AFFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA86F4ABB92BB92BB92BB929992BB9299%92BB929992BB929992BB9299926F4AFFA8FFA8FFA8FFA8FF527D527DFD18%FF7D527D53FD09FF4A6FFD06BBBABBBBBBBABBBBBB98BBBBBB98BBBBBB98%BBBBBB4A6FFFFFA9FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF4A6F99BB92BB99%BB93BB99BB93BB99BB93BB99BB93BB99BB93BB99BB4A6FA8FFA8FFA8FFA8%FFA87D527D53FD18FF527D527DA8FFA8FFA8FFA8FFA84B44BB98BB92BB98%BB92BB92BB92BB92BB92BB92BB92BB92BB92BB924B44FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA84B44BB929992BB929992BB929992BB929992BB92%99929992999299924B44FFA8FFA8FFA8FFA8FF527D527DFD18FF7D527D59%FD09FF4A6FFD12BB99BBBBBB99BBBBBB4A6FFD0EFFA8FFFFFF4A6F99BB99%BB99BB99BB99BB99BB99BB99BB99BB99BB99BB93BB99BB4A6FFFFFA8FFFF%FFA8FFA97D527D59FD18FF527D527DAFFFA8FFA8FFA8FFA84B44BB98BB92%BB98BB92BB98BB92BB98BB92BB98BB92BB98BB92BB984B44FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA84B44BB929992BB929992BB929992BB929992%BB929992BB92999299924B44FFA8FFA8FFA8FFA8FF527D527DFD18FF7D53%7D52FD09FF4A6FBABBBBBB98BBBBBB98BBBBBB98BBBBBB98BBBBBB98BBBB%BB98BB4A6FA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF4A6F93BB99BB93%BB99BB93BB99BB93BB99BB93BB99BB93BB99BB93BB4A6FA8FFA8FFA8FFA8%FFA87D537D52FD18FF527D527DA8FFA8FFA8FFA8FFA86F44BB92BB92BB92%BB92BB92BB92BB92BB92BB92BB92BB92BB92BB926F44FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA86F449992BB929992BB9299929992999299929992%99929992999299926F44FFA8FFA8FFA8FFA8FF527D527DFD18FF7D597D52%FD09FF4A6FFD0CBB99BBBBBB99BBBBBB99BBBBBB99BB4A6FFD04FFA8FFFF%FFA8FFFFFFA8FFFFFFA8FF4A6F99BB99BB99BB99BB99BB99BB99BB99BB93%BB99BB93BB99BB93BB4A6FA8FFA9FFA8FFA9FFA87D597D52FD18FF527D52%7DA8FFA8FFA8FFA8FFA86F4ABB92BB98BB92BB98BB92BB98BB92BB98BB92%BB98BB92BB92BB926F4AFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA86F4A%9992BB929992BB929992BB929992BB92999299929992999299926F4AFFA8%FFA8FFA8FFA8FF527D527DFD18FF7D527D53FFA9FFFFFFA9FFFFFF4A6FBB%BB98BBBBBB98BBBBBB98BBBBBB98BBBBBB98BB99BB98BB99BB4A6FFFFFA8%FFFFFFA8FFFFFFA8FFAFFFA8FFA8FF4A6F99BB93BB99BB93BB99BB93BB99%BB93BB99BB93BB999993BB99994A6FA8FFA8FFA8FFA8FFA87D527D53FD18%FF527D527DA8FFA8FFA8FFA8FFA84B44BB92BB92BB92BB92BB92BB92BB92%BB92BB92BB92BB92BB92BB924B44FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA84B44BB92999299929992999299929992999299929992999299929992%4B44FFA8FFA8FFA8FFA8FF527D527DFD18FF7D527D59FD09FF4A6FFD06BB%99BBBBBB99BBBBBB99BBBBBB99BBBBBB99BB99BB4A6FFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFA9FF4A6F99BB99BB99BB93BB99BB93BB99BB93BB99BB%93BB99BB93BB99BB4A6FA9FFA8FFA8FFA8FFA87D527D59FD18FF527D527D%A8FFA8FFA8FFA8FFA84B44BB98BB92BB98BB92BB98BB92BB92BB92BB92BB%92BB92BB92BB924B44FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA84B44BB%929992BB929992BB92999299929992999299929992999299924B44FFA8FF%A8FFA8FFA8FF527D527DFD18FF7D537D52FFFFFFA8FFFFFFA8FF4A6F98BB%BBBB98BBBBBB98BBBBBB98BB99BB98BB99BB98BB99BB92BB4A6FA8FFFFFF%A8FFAFFFA8FFA8FFA8FFA8FFA8FF4A6F93BB99BB93BB99BB93BB99BB93BB%999993BB999993BB999993BB4A6FA8FFA8FFA8FFA8FFA87D537D52FD18FF%527D527DA8FFA8FFA8FFA8FFA86F44BB92BB92BB92BB92BB92BB92BB92BB%92BB92BB92BB92BB92BB926F44FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A86F4499929992999299929992999299929992999299929992999299926F%44FFA8FFA8FFA8FFA8FF527D527DFD18FF7D597D52FD09FF4A6F99BBBBBB%99BBBBBB99BBBBBB99BBBBBB99BB99BB99BB99BB99BB4A6FA8FFFFFFA8FF%FFFFA8FFA8FFA8FFA8FFA8FF4A6F93BB99BB93BB99BB93BB99BB93BB99BB%93BB99BB93BB999993BB4A6FA8FFA8FFA8FFA8FFA87D597D52FD18FF527D%527DA8FFA8FFA8FFA8FFA86F4A4B446F4A4B446F4A4B446F4A4B446F4A4B%446F4A4B446F4A4B446F4A4B446F4A4B446F4A4B446F4A4B446F4A4B446F%4A4B446F4A4B446F4A4B446F4A4B446F4A4B446F4A4B446F4A4B446F4AFF%A8FFA8FFA8FFA8FF527D527DFD18FF7D527D53FFA8FFFFFFA8FFFFFF4A6F%4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F%4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6F%4A6F4A6F4A6F4A6F4A6F4A6F4A6F4A6FA8FFA8FFA8FFA8FFA87D527D53FD%18FF527D527DA8FFA8FFA8FFA8FFA8CA7CA1A1A17CA1A1A17CA1A1A17CA1%A1A17CA1A1A17CA1A1A17CA1A1A17CA1A1A17CA1A1A17CA1A1A17CA17DA1%7CA17DA17CA17DA17CA17DA17CA17DA17CA17DA17CA17DA17CA17DA17CA1%7DA1A8FFA8FFA8FFA8FFA8FF527D527DFD18FF7D527D59FD15FFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFA9FFA8FFA9FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA87D527D59FD18FF527D527DA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF527D%527DFD18FF7D537D52A9FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFAFFFA8FFAFFF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA87D537D52FD18FF527D527D7DFFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFA8FF%A8A8527D527DFD18FF7D597D527EFD0EFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFA9FFA8FFA9FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FF7D7D597D59FD18FF7D7D527D52A8A8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7D527D527DFD%19FF527D537D52A8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFAFFFA8FFAFFFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FF7E7D537D527DA8FD19FF7D527D527D527D7DA8A8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFA8FFA8A87EA87D7D527D527D7D%FD1BFF7D597D527D597D527D597D527D597D527D597D527D597D527D597D%527D597D527D597D527D597D527D597D527D597D527D597D527D597D527D%597D527D597D527D597D527D597D527D597D527D597D527D597D527D597D%527D597D527D597D527D597D7DFD1CFFA87D527D527D527D527D527D527D%527D527D527D527D527D527D527D527D527D527D527D527D527D527D527D%527D527D527D527D527D527D527D527D527D527D527D527D527D527D527D%527D527D527D527D527D527D527D527D527D527D527D527D52FD1FFF7E53%7D527D537D527D537D527D537D527D537D527D537D527D537D527D537D52%7D537D527D537D527D537D527D537D527D537D527D537D527D537D527D53%7D527D537D527D537D527D537D527D537D527D537D527D537D527D537D52%7D537D7DFD22FF7D7D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527DA8FDFCFFFDFCFFFDFCFFFDFCFFFD20FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
userdict /lv1Fix true putuserdict /_contoneDevice true put%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI5_End_NonPrinting--28 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[<666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A>0 %_Br[0.1 0 50 100 %_BS%_0.1 0 50 100 Bs0.4 0 50 0 %_BS%_0.4 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 10)(Unnamed gradient 10) 0 2 Bd[<E6E5E5E5E4E4E3E3E2E2E1E1E0E0DFDEDEDDDDDCDBDBDAD9D9D8D8D7D6D6D5D4D3D3D2D1D1D0CFCFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C0BFBFBEBDBCBBBBBAB9B8B7B6B6B5B4B3B2B2B1B0AFAEADACACABAAA9A8A7A6A6A5A4A3A2A1A09F9F9E9D9C9B9A99989796969594939291908F8E8D8C8C8B8A898887868584838281807F7E7D7C7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59>0 %_Br[0.35 0 50 100 %_BS%_0.35 0 50 100 Bs0.9 0 56.7568 59.3407 %_BS%_0.9 0 56.7568 59.3407 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 11)(Unnamed gradient 11) 0 2 Bd[<000000010101010202030303040405050506060707080809090A0A0B0C0C0D0D0E0E0F101011111213131414151616171818191A1A1B1C1C1D1E1F1F202121222324242526262728292A2A2B2C2D2D2E2F303031323334343536373839393A3B3C3D3E3E3F40414243434445464748494A4A4B4C4D4E4F50515252535455565758595A5B5C5D5E5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C><00000000000000010101010101010202020202020203030303030304040404040505050505060606060607070707070808080808090909090A0A0A0A0B0B0B0B0C0C0C0C0C0D0D0D0D0E0E0E0E0F0F0F101010101111111112121212131313141414141515151516161617171717181818191919191A1A1A1B1B1B1C1C1C1C1D1D1D1E1E1E1F1F1F202020202121212222222323232424242525252626262727272828282929>0<0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A09090909090909090909090909080808080808080808080808070707070707070707070707060606060606060606060606050505050505050505050504040404040404040404030303030303030303030302020202020202020202010101010101010101010000000000>1 %_Br[0.484375 0.160156 0 0 1 50 100 %_BS%_0.484375 0.160156 0 0 1 50 100 Bs0.95 0 59.5506 0 %_BS%_0.95 0 59.5506 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 12)(Unnamed gradient 12) 0 3 Bd[<C6C7C7C8C8C8C9C9CACACACBCBCCCCCDCDCDCECECFCFD0D0D0D1D1D2D2D3D3D3D4D4D5D5><48494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364656667696A6B6C>001 %_Br<292929292A2A2A2B2B2B2C2C2C2D2D2D2E2E2F2F30303131313232333334353536363737383839393A3B3B3C3C3D3D3E3F3F4041414242434444454646474848494A4A4B4C4C4D4E4E4F50515152535354555656575859595A5B5C5C5D5E5F5F6061626263646566666768696A6A6B6C6D6E6E6F7071727273747576777778797A7B7C7D7D7E7F80818283838485868788898A8B8B8C8D8E8F90919293949495969798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6><0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F101010101010111111111111121212121213131313131414141414151515151616161616171717171818181819191919191A1A1A1A1B1B1B1B1C1C1C1D1D1D1D1E1E1E1E1F1F1F1F202020212121212222222323232324242425252525262626272727272828282929292A2A2A2B2B2B2B2C2C2C2D2D2D2E2E2E2F2F2F303030313131313232323333333434343535353636363737373838383939393A3A3B3B3B3C3C3C3D3D3D3E3E3E3F3F3F4040404141424242434343444444454546464647474748>001 %_Br[0.835938 0.421875 0 0 1 50 100 %_BS%_0.835938 0.421875 0 0 1 50 100 Bs0.777344 0.28125 0 0 1 50 58.427 %_BS%_0.777344 0.28125 0 0 1 50 58.427 Bs0.160156 0.054688 0 0 1 59.5506 0 %_BS%_0.160156 0.054688 0 0 1 59.5506 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 13)(Unnamed gradient 13) 0 3 Bd[<5B5B5C5D5E5E5F606161626364646566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F808081828383848586878788898A8A8B8C8D8D8E8F90909192939394959696><0000000001010101010101020202020202020203030303030303040404040404040505050505050506060606060606070707070707070708080808080808090909090909090A0A0A0A0A0A0A0B0B0B0B><AFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>01 %_Br<313132333434353636373838393A3A3B3C3C3D3E3E3F4040414242434444454646474848494A4A4B4C4C4D4E4E4F5051515253535455555657575859595A5B>0<7172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF>01 %_Br[0.589844 0.042969 1 0 1 50 100 %_BS%_0.589844 0.042969 1 0 1 50 100 Bs0.355469 0 0.6875 0 1 50 50 %_BS%_0.355469 0 0.6875 0 1 50 50 Bs0.191406 0 0.441406 0 1 50 0 %_BS%_0.191406 0 0.441406 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 14)(Unnamed gradient 14) 1 3 Bd[<292929292A2A2A2B2B2B2C2C2C2D2D2D2E2E2F2F30303131313232333334353536363737383839393A3B3B3C3C3D3D3E3F3F4041414242434444454646474848494A4A4B4C4C4D4E4E4F50515152535354555656575859595A5B5C5C5D5E5F5F6061626263646566666768696A6A6B6C6D6E6E6F7071727273747576777778797A7B7C7D7D7E7F80818283838485868788898A8B8B8C8D8E8F90919293949495969798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6><0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F101010101010111111111111121212121213131313131414141414151515151616161616171717171818181819191919191A1A1A1A1B1B1B1B1C1C1C1D1D1D1D1E1E1E1E1F1F1F1F202020212121212222222323232324242425252525262626272727272828282929292A2A2A2B2B2B2B2C2C2C2D2D2D2E2E2E2F2F2F303030313131313232323333333434343535353636363737373838383939393A3A3B3B3B3C3C3C3D3D3D3E3E3E3F3F3F4040404141424242434343444444454546464647474748>001 %_Br<C6C7C7C8C8C8C9C9CACACACBCBCCCCCDCDCDCECECFCFD0D0D0D1D1D2D2D3D3D3D4D4D5D5><48494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364656667696A6B6C>001 %_Br[0.160156 0.054688 0 0 1 59.5506 0 %_BS%_0.160156 0.054688 0 0 1 59.5506 0 Bs0.777344 0.28125 0 0 1 50 58.427 %_BS%_0.777344 0.28125 0 0 1 50 58.427 Bs0.835938 0.421875 0 0 1 50 100 %_BS%_0.835938 0.421875 0 0 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 15)(Unnamed gradient 15) 0 3 Bd[<0102030405060708090A0B0C0D0E0F1011121415161718191A1B1C1D1E1F20><AAABABACACADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B7B7B8B8B9B9BABA><FBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9><00000000010101010101020202020202030303030303040404040404050505>1 %_Br<0000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101><8080818282838484858686878888898A8A8B8C8C8D8E8E8F9090919292939494959696979898999A9A9B9C9C9D9E9E9FA0A0A1A2A2A3A4A4A5A6A6A7A8A8A9AAAA><BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFB>01 %_Br[0.125 0.730469 0.976563 0.019531 1 50 100 %_BS%_0.125 0.730469 0.976563 0.019531 1 50 100 Bs0.003906 0.667969 0.984375 0 1 50 50 %_BS%_0.003906 0.667969 0.984375 0 1 50 50 Bs0 0.5 0.730469 0 1 50 0 %_BS%_0 0.5 0.730469 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 16)(Unnamed gradient 16) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6>0 %_Br[0.9 0 50 100 %_BS%_0.9 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 17)(Unnamed gradient 17) 0 3 Bd[<C6C7C7C8C8C8C9C9CACACACBCBCCCCCDCDCDCECECFCFD0D0D0D1D1D2D2D3D3D3D4D4D5D5><48494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364656667696A6B6C>001 %_Br<8F90909091919192929393949495969697979899999A9B9B9C9D9D9E9FA0A0A1A2A3A4A4A5A6A7A8A8A9AAABACADAEAEAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C1C2C3C4C5C6><2F2F2F2F2F303030303031313131323232323333333434343535353636363737373838383939393A3A3B3B3B3C3C3C3D3D3E3E3F3F3F40404141414242434344444545454646474748>001 %_Br[0.835938 0.421875 0 0 1 50 100 %_BS%_0.835938 0.421875 0 0 1 50 100 Bs0.777344 0.28125 0 0 1 50 58.427 %_BS%_0.777344 0.28125 0 0 1 50 58.427 Bs0.5625 0.183594 0 0 1 59.5506 0 %_BS%_0.5625 0.183594 0 0 1 59.5506 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 2)(Unnamed gradient 2) 0 3 Bd[<2F2F3030313131323233333434343535363636373738383839393A3A3A3B3B3C3C3C3D3D3D3E3E><171717181818181919191A1A1A1A1B1B1B1B1C1C1C1C1C1D1D1D1D1E1E1E1E1F1F1F1F1F202020><6465666768696A6B6C6D6E6F70717273747576767778797A7B7C7D7E7F80808182838484858686>01 %_Br<1A1A1B1B1C1C1D1D1D1E1E1F1F2020202121222223232324242525262626272728282829292A2A2B2B2B2C2C2D2D2D2E2E2E2F><0C0C0C0D0D0D0D0E0E0E0E0E0F0F0F0F1010101011111111111212121213131313131414141414151515151616161616171717><333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061626364>01 %_Br[0.242188 0.125 0.527344 0 1 50 100 %_BS%_0.242188 0.125 0.527344 0 1 50 100 Bs0.183594 0.089844 0.390625 0 1 46.0674 50 %_BS%_0.183594 0.089844 0.390625 0 1 46.0674 50 Bs0.101563 0.046875 0.199219 0 1 48.3146 0 %_BS%_0.101563 0.046875 0.199219 0 1 48.3146 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 25)(Unnamed gradient 25) 0 2 Bd[<CCCCCCCCCCCCCCCCCBCBCBCBCBCBCBCACACACACACAC9C9C9C9C8C8C8C8C8C7C7C7C7C6C6C6C5C5C5C5C4C4C4C3C3C3C2C2C2C1C1C1C0C0BFBFBFBEBEBEBDBDBCBCBCBBBBBABABAB9B9B8B8B7B7B7B6B6B5B5B4B4B3B3B2B2B1B1B0B0AFAFAEAEADADACACABABAAAAA9A9A8A8A7A6A6A5A5A4A4A3A2A2A1A1A0A09F9E9E9D9D9C9B9B9A999998989796969594949392929190908F8F8E8D8C8C8B8A8A89888887868685848383828181807F7E7E7D7C7B7B7A797878777675757473727271706F6F6E6D6C6B6B6A6968676766656463626261605F5E5E5D5C5B5A5958585756555453525251504F4E4D4C4B4B4A49484746454443434241403F3E3D3C3B3A39383737363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A1A>0 %_Br[0.1 0 50 85 %_BS%_0.1 0 50 85 Bs0.8 0 65 50 %_BS%_0.8 0 65 50 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 26)(Unnamed gradient 26) 0 5 Bd[<FFFEFDFCFBFAF9F8F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E8E7E6E5E4E3E2E1E0DFDEDDDCDCDBDAD9D8D7D6D6D5D4D3D2D1D1D0CFCECDCDCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBFBEBDBCBCBBBABAB9B9B8B7B7B6B5B5B4B4B3B2B2B1B1B0AFAFAEAEADADACABABAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A2A1A1A0A09F9F9E9E9E9D9D9C9C9C9B9B9A9A9A99999998989897979796969695959594949493939392929292919191909090908F8F8F8F8E8E8E8E8E8D8D8D8D8D8C8C8C8C8C8B8B8B8B8B8A8A8A8A8A8A89898989898989888888888888888887878787878787878787878686868686868686868686868686858585858585858585858585858585858585858585858585858585858585858585858585858585858585>0 %_Br<7978777675747371706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><5F5E5D5C5B5B5A595858575655545453525150504F4E4D4C4C4B4A494948474645454443424141403F3E3E3D3C3B3A3A3938373636353433323231302F2F2E2D2C2B2B2A292827272625242323222120201F1E1D1C1C1B1A191818171615151413121111100F0E0D0D0C0B0A09090807060605040302020100><5C5B5A595958575656555453525251504F4F4E4D4C4C4B4A494948474645454443424241403F3F3E3D3C3C3B3A393938373635353433323231302F2F2E2D2C2C2B2A292828272625252423222221201F1F1E1D1C1B1B1A191818171615151413121211100F0F0E0D0C0B0B0A09080807060505040302020100><05050505050505050505050504040404040404040404040404040404040404040404040403030303030303030303030303030303030303030303030302020202020202020202020202020202020202020202020201010101010101010101010101010101010101010101010100000000000000000000000000>1 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707173747576777879><000102020304050606070809090A0B0C0D0D0E0F101111121314151516171818191A1B1C1C1D1E1F202021222323242526272728292A2B2B2C2D2E2F2F3031323233343536363738393A3A3B3C3D3E3E3F404141424344454546474849494A4B4C4C4D4E4F505051525354545556575858595A5B5B5C5D5E5F><000102020304050506070808090A0B0B0C0D0E0F0F101112121314151516171818191A1B1B1C1D1E1F1F202122222324252526272828292A2B2C2C2D2E2F2F303132323334353536373839393A3B3C3C3D3E3F3F404142424344454546474849494A4B4C4C4D4E4F4F505152525354555656575859595A5B5C><00000000000000000000000000010101010101010101010101010101010101010101010101020202020202020202020202020202020202020202020202030303030303030303030303030303030303030303030303040404040404040404040404040404040404040404040404050505050505050505050505>1 %_Br<363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0.52 0 50 100 %_BS%_0.52 0 50 100 Bs1 0 23.8095 90.1099 %_BS%_1 0 23.8095 90.1099 Bs0.472656 0.371094 0.359375 0.019531 1 50 70.3297 %_BS%_0.472656 0.371094 0.359375 0.019531 1 50 70.3297 Bs0 0 0 0 1 50 50 %_BS%_0 0 0 0 1 50 50 Bs0.21 0 50 0 %_BS%_0.21 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 27)(Unnamed gradient 27) 0 2 Bd[<4D4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs0.3 0 50 0 %_BS%_0.3 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 28)(Unnamed gradient 28) 0 3 Bd[<C6C7C7C8C8C8C9C9CACACACBCBCCCCCDCDCDCECECFCFD0D0D0D1D1D2D2D3D3D3D4D4D5D5><48494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364656667696A6B6C>001 %_Br<8F90909091919192929393949495969697979899999A9B9B9C9D9D9E9FA0A0A1A2A3A4A4A5A6A7A8A8A9AAABACADAEAEAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C1C2C3C4C5C6><2F2F2F2F2F303030303031313131323232323333333434343535353636363737373838383939393A3A3B3B3B3C3C3C3D3D3E3E3F3F3F40404141414242434344444545454646474748>001 %_Br[0.835938 0.421875 0 0 1 50 100 %_BS%_0.835938 0.421875 0 0 1 50 100 Bs0.777344 0.28125 0 0 1 50 58.427 %_BS%_0.777344 0.28125 0 0 1 50 58.427 Bs0.5625 0.183594 0 0 1 59.5506 0 %_BS%_0.5625 0.183594 0 0 1 59.5506 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 29)(Unnamed gradient 29) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6>0 %_Br[0.9 0 50 100 %_BS%_0.9 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 3)(Unnamed gradient 3) 0 3 Bd[<000102030405060708090A0B0C0D0E0F1011131415161718191A1B1C1D1E1F><AAABABACADADAEAEAFAFB0B1B1B2B2B3B3B4B4B5B6B6B7B7B8B8B9BABABBBB><FCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9><00000000010101010101010102020202020202030303030303030304040404>1 %_Br0<8080818282838484858686878888898A8A8B8C8C8D8E8E8F9090919293939495959697979899999A9B9B9C9D9D9E9F9FA0A1A1A2A3A4A4A5A6A6A7A8A8A9AAAA><BCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC>01 %_Br[0.121094 0.734375 0.976563 0.015625 1 50 100 %_BS%_0.121094 0.734375 0.976563 0.015625 1 50 100 Bs0 0.667969 0.988281 0 1 50 50 %_BS%_0 0.667969 0.988281 0 1 50 50 Bs0 0.5 0.738281 0 1 50 0 %_BS%_0 0.5 0.738281 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 30)(Unnamed gradient 30) 0 3 Bd[<5B5B5C5D5E5E5F606161626364646566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F808081828383848586878788898A8A8B8C8D8D8E8F90909192939394959696><0000000001010101010101020202020202020203030303030303040404040404040505050505050506060606060606070707070707070708080808080808090909090909090A0A0A0A0A0A0A0B0B0B0B><AFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>01 %_Br<313132333434353636373838393A3A3B3C3C3D3E3E3F4040414242434444454646474848494A4A4B4C4C4D4E4E4F5051515253535455555657575859595A5B>0<7172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF>01 %_Br[0.589844 0.042969 1 0 1 50 100 %_BS%_0.589844 0.042969 1 0 1 50 100 Bs0.355469 0 0.6875 0 1 50 50 %_BS%_0.355469 0 0.6875 0 1 50 50 Bs0.191406 0 0.441406 0 1 50 0 %_BS%_0.191406 0 0.441406 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 31)(Unnamed gradient 31) 0 3 Bd[<000102030405060708090A0B0C0D0E0F1011131415161718191A1B1C1D1E1F><AAABABACADADAEAEAFAFB0B1B1B2B2B3B3B4B4B5B6B6B7B7B8B8B9BABABBBB><FCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9><00000000010101010101010102020202020202030303030303030304040404>1 %_Br0<8080818282838484858686878888898A8A8B8C8C8D8E8E8F9090919293939495959697979899999A9B9B9C9D9D9E9F9FA0A1A1A2A3A4A4A5A6A6A7A8A8A9AAAA><BCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC>01 %_Br[0.121094 0.734375 0.976563 0.015625 1 50 100 %_BS%_0.121094 0.734375 0.976563 0.015625 1 50 100 Bs0 0.667969 0.988281 0 1 50 50 %_BS%_0 0.667969 0.988281 0 1 50 50 Bs0 0.5 0.738281 0 1 50 0 %_BS%_0 0.5 0.738281 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 33)(Unnamed gradient 33) 0 3 Bd[<000000000000000000000001010101010101010101010101010101010101010202020202020202020202><333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051525354555758595A5B5C5D>0.99218801 %_Br<0202020202020202020202020202020202020202020202020202020202020202020202020101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000><1313131414141414151515151616161616171717171818181818191919191A1A1A1A1A1B1B1B1B1B1C1C1C1C1D1D1D1D1D1E1E1E1E1F1F1F1F1F2020202021212121212222222223232323232424242425252525252626262626272727272828282828292929292A2A2A2A2A2B2B2B2B2C2C2C2C2C2D2D2D2D2E2E2E2E2E2F2F2F2F30303030303131313131323232323333><6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFD>01 %_Br[0.007813 0.363281 0.992188 0 1 50 100 %_BS%_0.007813 0.363281 0.992188 0 1 50 100 Bs0 0.199219 0.992188 0 1 50 50 %_BS%_0 0.199219 0.992188 0 1 50 50 Bs0.007813 0.074219 0.421875 0 1 50 0 %_BS%_0.007813 0.074219 0.421875 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 4)(Unnamed gradient 4) 0 2 Bd[<4D4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs0.3 0 50 0 %_BS%_0.3 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 40)(Unnamed gradient 40) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6>0 %_Br[0 0 0 0.098039 1 50 100 %_BS%_0 0 0 0.098039 1 50 100 Bs0 0 0 0 1 48.3253 0 %_BS%_0 0 0 0 1 48.3253 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 41)(Unnamed gradient 41) 0 3 Bd[<000102030405060708090A0B0C0D0F101112131415161718191A1B1C1D1E1F><AAABABACACADADAEAFAFB0B0B1B1B2B3B3B4B4B5B5B6B6B7B8B8B9B9BABABB><FCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9><00000000010101010101010102020202020202030303030303030304040404>1 %_Br0<8081818283838485858687878889898A8B8B8C8D8D8E8F8F9091919292939494959696979898999A9A9B9C9C9D9E9E9FA0A0A1A2A2A3A4A4A5A5A6A7A7A8A9A9AA><BCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC>01 %_Br[0.121569 0.733333 0.976471 0.015686 1 50 100 %_BS%_0.121569 0.733333 0.976471 0.015686 1 50 100 Bs0 0.666667 0.988235 0 1 49.823 50 %_BS%_0 0.666667 0.988235 0 1 49.823 50 Bs0 0.501961 0.737255 0 1 49.7228 0 %_BS%_0 0.501961 0.737255 0 1 49.7228 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 42)(Unnamed gradient 42) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6>0 %_Br[0 0 0 0.098039 1 50 100 %_BS%_0 0 0 0.098039 1 50 100 Bs0 0 0 0 1 48.3253 0 %_BS%_0 0 0 0 1 48.3253 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 5)(Unnamed gradient 5) 0 3 Bd[<1919191A1A1A1A1A1B1B1B1B1B1C1C1C1C1C1C1D1D1D1D1D1E1E1E1E1E1E1F1F1F1F1F1F202020><46464747484849494A4A4B4B4C4C4D4D4E4E4F4F50505151525253535454555555565657575758><8082838485868788898A8B8C8D8E8F90909192939495969798999A9B9C9C9D9E9FA0A1A1A2A3A3>01 %_Br<0E0E0E0E0F0F0F0F0F0F10101010101011111111111112121212121212131313131313141414141414151515151515151616161616161717171717171718181818181819191919><3C3C3C3C3C3D3D3D3D3D3D3D3E3E3E3E3E3E3E3F3F3F3F3F3F3F404040404040404141414141414142424242424242434343434343434444444444444445454545454545454646><3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6A6B6C6D6E6F707172737475767778797A7A7B7C7D7E7F8080>01 %_Br[0.125 0.34375 0.640625 0 1 50 100 %_BS%_0.125 0.34375 0.640625 0 1 50 100 Bs0.097656 0.273438 0.503906 0 1 46.0674 50 %_BS%_0.097656 0.273438 0.503906 0 1 46.0674 50 Bs0.054688 0.234375 0.238281 0 1 48.3146 0 %_BS%_0.054688 0.234375 0.238281 0 1 48.3146 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 6)(Unnamed gradient 6) 0 3 Bd[<0C0D0E0F1011121314><0708090A0B0C0C0D0E><6F6E6D6C6B6A696868>01 %_Br<080808080808080808090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C><0606060606060606060606060606060606060606060606060606060606060606060606070707070707070707070707070707070707070707070707070707070707070707><2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646566676869696A6B6C6D6E6F>01 %_Br[0.078125 0.054688 0.40625 0 1 50 100 %_BS%_0.078125 0.054688 0.40625 0 1 50 100 Bs0.046875 0.027344 0.433594 0 1 46.0674 50 %_BS%_0.046875 0.027344 0.433594 0 1 46.0674 50 Bs0.03125 0.023438 0.179688 0 1 48.3146 0 %_BS%_0.03125 0.023438 0.179688 0 1 48.3146 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 7)(Unnamed gradient 7) 0 3 Bd[<000000000000000000000001010101010101010101010101010101010101010202020202020202020202><333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051525354555758595A5B5C5D>0.99218801 %_Br<0202020202020202020202020202020202020202020202020202020202020202020202020101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000><1313131414141414151515151616161616171717171818181818191919191A1A1A1A1A1B1B1B1B1B1C1C1C1C1D1D1D1D1D1E1E1E1E1F1F1F1F1F2020202021212121212222222223232323232424242425252525252626262626272727272828282828292929292A2A2A2A2A2B2B2B2B2C2C2C2C2C2D2D2D2D2E2E2E2E2E2F2F2F2F30303030303131313131323232323333><6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFD>01 %_Br[0.007813 0.363281 0.992188 0 1 50 100 %_BS%_0.007813 0.363281 0.992188 0 1 50 100 Bs0 0.199219 0.992188 0 1 50 50 %_BS%_0 0.199219 0.992188 0 1 50 50 Bs0.007813 0.074219 0.421875 0 1 50 0 %_BS%_0.007813 0.074219 0.421875 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 8)(Unnamed gradient 8) 1 3 Bd[<0B0B0B0C0C0C0C0D0D0D0D0D0E0E0E0E0F0F0F0F10101010101111111112121212121313131313141414141515151515161616><18181919191A1A1B1B1B1C1C1C1D1D1E1E1E1F1F1F202020212122222223232324242425252526262727272828282929292A2A><3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263646565666768696A6B6C6D>01 %_Br<16161617171717181818191919191A1A1A1A1B1B1B1B1B1C1C1C1C1D1D1D1D1E1E1E1E1E1F1F1F><2A2A2B2B2B2C2C2D2D2D2E2E2F2F2F303031313132323333333434343535353636363737373838><6D6E6F707172737475767778797A7B7C7D7E7E7F80818283848586878889898A8B8C8D8D8E8F8F>01 %_Br[0.042969 0.09375 0.234375 0 1 48.3146 0 %_BS%_0.042969 0.09375 0.234375 0 1 48.3146 0 Bs0.085938 0.164063 0.425781 0 1 46.0674 50 %_BS%_0.085938 0.164063 0.425781 0 1 46.0674 50 Bs0.121094 0.21875 0.5625 0 1 50 100 %_BS%_0.121094 0.21875 0.5625 0 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 9)(Unnamed gradient 9) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BF>0 %_Br[0.75 0 50 100 %_BS%_0.75 0 50 100 Bs1 0 50 53.8462 %_BS%_1 0 50 53.8462 BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 5 pt. ) -(Flat/ Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Callig) -(raphic Brush Tool/ 7 pt. Round/ Adobe Calligraphic Brush Tool/) -( 15 pt. Round/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(15 pt. Round)(1 15 15 100 100 15 15 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(2 pt. Oval)(1 2 2 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Oval)(1 5 5 10 90 -65 35 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(7 pt. Round)(1 7 7 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 1 255 79 79 0 50 Lb(Layer 2) Ln0 Au0 O0 J 0 j 1 w 4 M []0 d0 XR124.5 244.5 m124.5 243.3999 123.6001 242.5 122.5 242.5 C101.5 242.5 l100.3999 242.5 99.5 243.3999 99.5 244.5 C99.5 254.5 l99.5 255.6001 100.124 257.1489 100.8862 257.9419 C110.6138 268.0581 l111.376 268.8511 112.624 268.8511 113.3862 268.0581 C123.1138 257.9419 l123.876 257.1489 124.5 255.6001 124.5 254.5 C124.5 244.5 LBb1 (Unnamed gradient 40) -0.000977 0 0 1.00049 14.2109 24.6141 24.6141 -14.2109 -314542.442 -70634.4297 Bg14.2179 -24.6261 122.6917 70.8361 42.3154 228.7598 Xm114511.8125 -198340.2813 122.6917 70.8361 -114469.5 198569.0469 Bc14.2179 -24.6261 122.6917 70.8361 42.3154 228.7598 Bm114511.8125 -198340.2813 122.6917 70.8361 56.5332 204.1338 Bcf0 BB0 0 0 0.5 k124.5 244.5 m124 244.5 l123.9985 243.6782 123.3218 243.0015 122.5 243 C101.5 243 l100.6782 243.0015 100.0015 243.6782 100 244.5 C100 254.5 l99.998 254.957 100.1377 255.5737 100.3711 256.1494 c100.6016 256.7261 100.9287 257.2671 101.2466 257.5952 C110.9741 267.7114 l111.2603 268.0083 111.6284 268.1519 112 268.1528 c112.3716 268.1519 112.7397 268.0083 113.0259 267.7114 C122.7534 257.5952 l123.0713 257.2671 123.3984 256.7261 123.6289 256.1494 c123.8623 255.5737 124.002 254.957 124 254.5 C124 244.5 L124.5 244.5 L125 244.5 L125 254.5 l124.998 255.1431 124.8257 255.8506 124.5566 256.5229 c124.2847 257.1938 123.9185 257.8237 123.4741 258.2886 C113.7466 268.4048 l113.2705 268.9009 112.6333 269.1538 112 269.1528 c111.3667 269.1538 110.7295 268.9009 110.2534 268.4048 C100.5259 258.2886 l100.0815 257.8237 99.7153 257.1938 99.4434 256.5229 c99.1743 255.8506 99.002 255.1431 99 254.5 C99 244.5 l99.002 243.1216 100.1216 242.002 101.5 242 C122.5 242 l123.8784 242.002 124.998 243.1216 125 244.5 C124.5 244.5 Lf121.5 245.4814 m102.5 245.4814 L102.5 258.0781 L112 268 L121.5 258.0781 L121.5 245.4814 LBb1 (Unnamed gradient 41) 0.000488 0 0 1 12.1255 21.002 21.002 -12.1255 -267181.41 -59067.8008 Bg12.1255 -21.002 103.7122 59.8783 53.1182 234.0093 Xm97707.1797 -169233.8125 103.7122 59.8783 -97654.0625 169467.8281 Bc6.06274 -10.501 103.7122 59.8783 53.1182 234.0093 Bm6.06274 -10.501 103.7122 59.8783 59.1807 223.5083 Bm97707.1797 -169233.8125 103.7122 59.8783 65.2437 213.0073 Bcf0 BB0.289063 0.851563 1 0.292969 k121.5 245.4814 m121.5 245.7314 L102.75 245.7314 L102.75 257.9775 L112 267.6387 L121.25 257.9775 L121.25 245.4814 L121.5 245.4814 L121.5 245.7314 L121.5 245.4814 L121.75 245.4814 L121.75 258.0781 L121.6807 258.251 L112.1807 268.1729 L112 268.25 L111.8193 268.1729 L102.3193 258.251 L102.25 258.0781 L102.25 245.4814 L102.3232 245.3047 L102.5 245.2314 L121.5 245.2314 L121.6768 245.3047 L121.75 245.4814 L121.5 245.4814 Lf114.5 245.5 m109.5 245.5 L109.5 254.5 L114.5 254.5 L114.5 245.5 LBb1 (Unnamed gradient 42) 0.000488 -0.000977 0 1 5.14746 8.91566 8.91566 -5.14746 -108708.5313 -20356.5098 Bg5.14746 -8.91566 43.3096 25.0048 87.7686 241.9609 Xm41478.2383 -71842.4219 43.3096 25.0048 -41390.4688 72084.3828 Bc5.14746 -8.91566 43.3096 25.0048 87.7686 241.9609 Bm41478.2383 -71842.4219 43.3096 25.0048 92.916 233.0454 Bcf0 BB0.289063 0.851563 1 0.292969 k114.5 245.5 m114.5 245.75 L109.75 245.75 L109.75 254.25 L114.25 254.25 L114.25 245.5 L114.5 245.5 L114.5 245.75 L114.5 245.5 L114.75 245.5 L114.75 254.5 L114.6768 254.6768 L114.5 254.75 L109.5 254.75 L109.3232 254.6768 L109.25 254.5 L109.25 245.5 L109.3232 245.3232 L109.5 245.25 L114.5 245.25 L114.6768 245.3232 L114.75 245.5 L114.5 245.5 Lf0 0 0 0.5 k127.1094 256.043 m120.0273 263.1992 L112.9453 270.3555 L112.8457 270.4473 l112.5996 270.6494 112.2998 270.75 112 270.75 c111.6572 270.75 111.3135 270.6182 111.0547 270.3555 C103.9727 263.1992 L96.8906 256.043 l96.3701 255.5166 96.3701 254.6563 96.8906 254.1299 C97.1377 253.8789 l97.6582 253.3535 98.5098 253.3535 99.0303 253.8789 C105.5151 260.4316 L112 266.9844 L118.4849 260.4316 L124.9697 253.8789 l125.4902 253.3535 126.3418 253.3535 126.8623 253.8789 C127.1094 254.1299 l127.6299 254.6563 127.6299 255.5166 127.1094 256.043 Cf127.1094 256.043 m127.4648 256.3945 L120.3828 263.5508 L113.2925 270.7158 L113.1846 270.8149 L113.1743 270.8242 L113.1631 270.8335 l112.8257 271.1113 112.4111 271.2505 112 271.25 c111.5303 271.2505 111.0552 271.0684 110.6987 270.7065 C103.6172 263.5508 L96.5352 256.3945 l96.1777 256.0337 96 255.5571 96 255.0864 c96 254.6157 96.1777 254.1396 96.5352 253.7783 C96.5303 253.7832 L96.7813 253.5283 L96.7827 253.5269 l97.1396 253.1665 97.6143 252.9844 98.084 252.9849 c98.5537 252.9844 99.0283 253.1665 99.3853 253.5269 C105.8706 260.0801 L112 266.2734 L118.1294 260.0801 L124.6143 253.5273 l124.9717 253.1665 125.4463 252.9844 125.916 252.9849 c126.3857 252.9844 126.8604 253.1665 127.2173 253.5269 C127.2192 253.5288 L127.4658 253.7793 L127.4648 253.7783 l127.8218 254.1396 128 254.6157 128 255.0864 c128 255.5571 127.8218 256.0337 127.4648 256.3945 C127.1094 256.043 L126.7539 255.6914 l126.917 255.5264 126.9995 255.3091 126.9995 255.0864 c126.9995 254.8638 126.917 254.647 126.7539 254.4814 C126.7466 254.4741 L126.5059 254.2295 L126.5044 254.228 L126.5073 254.231 l126.3438 254.0664 126.1323 253.9854 125.916 253.9849 c125.6997 253.9854 125.4883 254.0664 125.3247 254.231 C118.8403 260.7832 L112 267.6953 L105.1597 260.7832 L98.6748 254.2305 l98.5117 254.0664 98.3003 253.9854 98.084 253.9849 c97.8677 253.9854 97.6563 254.0664 97.4927 254.231 C97.2471 254.4805 L97.252 254.4756 L97.2461 254.4814 l97.0825 254.647 97.0005 254.8638 97 255.0864 c97.0005 255.3091 97.0825 255.5264 97.2461 255.6914 C104.3281 262.8477 L111.4175 270.0112 L111.4106 270.0044 l111.5718 270.168 111.7842 270.2495 112 270.25 c112.1885 270.2495 112.3735 270.1875 112.5283 270.061 C112.8457 270.4473 L112.5068 270.0796 L112.5981 269.9951 L119.6719 262.8477 L126.7539 255.6914 L127.1094 256.043 Lf0 0 0 0.496087 k111.0625 270.3486 m111.3193 270.6089 111.665 270.7344 112.0049 270.7344 c112.3022 270.7344 112.6001 270.6313 112.8477 270.4297 C112.9473 270.3384 L120.0186 263.1924 L127.0908 256.0464 l127.5425 255.5898 127.6089 254.8696 127.2695 254.3501 C127.0986 254.1387 L126.8525 253.8877 l126.3364 253.3667 125.48 253.3789 124.9639 253.8999 C119.1753 259.749 L118.4824 260.4492 L112 267 L105.5181 260.4502 L104.7231 259.6479 L99.0356 253.8999 l98.5195 253.3789 97.6636 253.3667 97.1475 253.8877 C96.9009 254.1387 L96.73 254.3501 l96.3906 254.8696 96.457 255.5898 96.9087 256.0464 C103.981 263.1924 L111.0625 270.3486 Lf0 0 0 0.492174 k111.0713 270.3408 m111.3257 270.5991 111.6738 270.7178 112.0107 270.7178 c112.3057 270.7178 112.604 270.6167 112.8506 270.4116 C112.9497 270.3198 L120.0103 263.1851 L127.0728 256.0488 l127.5205 255.5962 127.5957 254.8726 127.2593 254.3579 C127.0889 254.146 L126.8428 253.8965 l126.3315 253.3804 125.4707 253.4048 124.959 253.9209 C119.1733 259.7671 L118.4805 260.4668 L112 267.0151 L105.5215 260.4688 L104.7275 259.6665 L99.0415 253.9209 l98.5303 253.4048 97.6689 253.3804 97.1577 253.8965 C96.9121 254.146 L96.7412 254.3579 l96.4048 254.8726 96.48 255.5962 96.9277 256.0488 C103.9897 263.1851 L111.0713 270.3408 Lf0 0 0 0.488261 k111.0796 270.334 m111.3315 270.5898 111.6821 270.7021 112.0161 270.7021 c112.3081 270.7021 112.605 270.5991 112.8525 270.394 C112.9517 270.3027 L120.002 263.1782 L127.0542 256.0518 l127.498 255.6035 127.5825 254.876 127.249 254.3657 C127.0781 254.1548 L126.833 253.9053 l126.3257 253.3936 125.4604 253.4302 124.9536 253.9419 C119.1699 259.7852 L118.4785 260.4849 L112.0005 267.0308 L105.5244 260.4873 L104.731 259.686 L99.0474 253.9419 l98.54 253.4302 97.6743 253.3936 97.1675 253.9053 C96.9219 254.1548 L96.751 254.3657 l96.4175 254.876 96.502 255.6035 96.9458 256.0518 C103.998 263.1782 L111.0796 270.334 Lf0 0 0 0.484348 k111.0874 270.3267 m111.3374 270.5801 111.6899 270.6865 112.021 270.6865 c112.3101 270.6865 112.6069 270.5835 112.855 270.3765 C112.9531 270.2852 L119.9937 263.1714 L127.0366 256.0552 l127.4761 255.6108 127.5693 254.8804 127.2388 254.3745 C127.0684 254.1631 L126.8228 253.9141 l126.3203 253.4067 125.4502 253.4556 124.9478 253.9629 C119.1675 259.8032 L118.4761 260.5024 L112 267.0459 L105.5278 260.5059 L104.7339 259.7046 L99.0527 253.9629 l98.5498 253.4556 97.6797 253.4067 97.1777 253.9141 C96.9321 254.1631 L96.7612 254.3745 l96.4312 254.8804 96.5244 255.6108 96.9639 256.0552 C104.0068 263.1714 L111.0874 270.3267 Lf0 0 0 0.480435 k111.0957 270.3198 m111.3433 270.5708 111.6982 270.6709 112.0259 270.6709 c112.3125 270.6709 112.6079 270.5664 112.8569 270.3589 C112.9556 270.2681 L119.9849 263.1646 L127.0181 256.0581 l127.4536 255.6177 127.5562 254.8838 127.229 254.3828 C127.0576 254.1714 L126.813 253.9233 l126.3149 253.4209 125.4399 253.4819 124.9419 253.9844 C119.1646 259.8218 L118.4741 260.52 L112 267.062 L105.5303 260.5244 L104.7378 259.7241 L99.0576 253.9844 l98.5596 253.4819 97.6851 253.4209 97.187 253.9233 C96.9424 254.1714 L96.7715 254.3828 l96.4438 254.8838 96.5464 255.6177 96.9819 256.0581 C104.0151 263.1646 L111.0957 270.3198 Lf0 0 0 0.476522 k111.1035 270.3125 m111.3496 270.5615 111.7065 270.6548 112.0313 270.6548 c112.3154 270.6548 112.6094 270.5493 112.8594 270.3408 C112.9575 270.25 L119.9766 263.1577 L126.9995 256.061 l127.4312 255.625 127.543 254.8872 127.2188 254.3906 C127.0469 254.1797 L126.8027 253.9321 l126.3096 253.4341 125.4302 253.5073 124.9365 254.0054 C119.1616 259.8398 L118.4712 260.5381 L112 267.0771 L105.5337 260.5435 L104.7412 259.7432 L99.063 254.0054 l98.5698 253.5073 97.6904 253.4341 97.1968 253.9321 C96.9531 254.1797 L96.7813 254.3906 l96.4565 254.8872 96.5684 255.625 97.0005 256.061 C104.0234 263.1577 L111.1035 270.3125 Lf0 0 0 0.472609 k111.1118 270.3057 m111.355 270.5522 111.7144 270.6387 112.0361 270.6387 c112.3179 270.6387 112.6108 270.5317 112.8613 270.3232 C112.9595 270.2329 l113.0562 270.1353 119.9678 263.1509 Y126.981 256.0645 l127.4087 255.6318 127.5293 254.8911 127.208 254.3989 C127.0366 254.188 L126.793 253.9409 l126.3042 253.4473 125.4199 253.5327 124.9312 254.0264 C119.1592 259.8584 L118.4692 260.5562 L111.9995 267.0933 L105.5366 260.5625 L104.7451 259.7627 L99.0684 254.0264 l98.5796 253.5327 97.6953 253.4473 97.2065 253.9409 C96.9629 254.188 L96.7915 254.3989 l96.4702 254.8911 96.5908 255.6318 97.0186 256.0645 C104.0317 263.1514 L111.1118 270.3057 Lf0 0 0 0.468696 k111.1206 270.2979 m111.3618 270.5425 111.7231 270.6226 112.042 270.6226 c112.3208 270.6226 112.6123 270.5146 112.8638 270.3052 C112.9619 270.2148 l113.0723 270.1035 119.96 263.1436 119.96 263.144 C126.9629 256.0669 l127.3867 255.6387 127.5166 254.894 127.1982 254.4067 C127.0264 254.1963 L126.7832 253.9497 l126.2988 253.4604 125.4102 253.5581 124.9258 254.0474 C119.1563 259.8765 L118.4673 260.5732 L112.0005 267.1079 L105.5405 260.5806 L104.749 259.7813 L99.0742 254.0474 l98.5903 253.5581 97.7012 253.4604 97.2168 253.9497 C96.9736 254.1963 L96.8022 254.4067 l96.4834 254.894 96.6133 255.6387 97.0371 256.0669 C104.0405 263.144 L111.1206 270.2979 Lf0 0 0 0.464783 k111.1284 270.291 m111.3672 270.5332 111.7314 270.6064 112.0474 270.6064 c112.3237 270.6064 112.6138 270.498 112.8662 270.2876 C112.9639 270.1973 l113.0879 270.0723 119.9512 263.1367 119.9512 263.1372 C126.9443 256.0703 l127.3643 255.6455 127.5034 254.8975 127.188 254.4146 C127.0161 254.2046 L126.7734 253.958 l126.2935 253.4741 125.4004 253.584 124.9204 254.0679 C119.1533 259.895 L118.4653 260.5908 L112 267.1235 L105.543 260.5991 L104.7524 259.8008 L99.0801 254.0679 l98.6001 253.584 97.707 253.4741 97.2266 253.958 C96.9844 254.2046 L96.8125 254.4146 l96.4971 254.8975 96.6357 255.6455 97.0557 256.0703 C104.0493 263.1372 L111.1284 270.291 Lf0 0 0 0.46087 k111.1367 270.2837 m111.373 270.5234 111.7393 270.5908 112.0522 270.5908 c112.3262 270.5908 112.6167 270.4829 112.8687 270.27 C112.9658 270.1797 l113.1035 270.0405 119.9429 263.1299 Y126.9263 256.0732 l127.3423 255.6528 127.4902 254.9014 127.1777 254.4229 C127.0054 254.2129 L126.7632 253.9668 l126.2881 253.4873 125.3901 253.6094 124.9146 254.0889 C119.1509 259.9131 L118.4624 260.6084 L112 267.1396 L105.5464 260.6177 L104.7563 259.8203 L99.0854 254.0889 l98.6104 253.6094 97.7119 253.4873 97.2368 253.9668 C96.9946 254.2129 L96.8223 254.4229 l96.5098 254.9014 96.6582 255.6528 97.0742 256.0732 C104.0576 263.1304 L111.1367 270.2837 Lf0 0 0 0.456957 k111.1455 270.2769 m111.3794 270.5142 111.7471 270.5752 112.0571 270.5752 c112.3286 270.5752 112.6187 270.4663 112.8711 270.2524 C112.9678 270.1626 l113.1191 270.0093 119.9341 263.123 Y126.9082 256.0762 l127.3198 255.6602 127.4771 254.9053 127.1675 254.4316 C126.9956 254.2212 L126.7534 253.9761 l126.2827 253.501 125.3799 253.6348 124.9092 254.1104 C119.1479 259.9312 L118.4604 260.627 L112 267.1548 L105.5493 260.6367 L104.7598 259.8389 L99.0908 254.1104 l98.6201 253.6348 97.7173 253.501 97.2466 253.9761 C97.0049 254.2212 L96.833 254.4316 l96.5234 254.9053 96.6797 255.6602 97.0918 256.0762 C104.0659 263.1235 L111.1455 270.2769 Lf0 0 0 0.453044 k111.1533 270.2695 m111.3848 270.5049 111.7559 270.5596 112.063 270.5596 c112.3311 270.5596 112.6191 270.4492 112.873 270.2349 C112.9702 270.145 l113.1353 269.9775 119.9258 263.1162 Y126.8896 256.0796 l127.2974 255.667 127.4639 254.9087 127.1572 254.4395 C126.9849 254.23 L126.7432 253.9849 l126.2773 253.5146 125.3701 253.6611 124.9038 254.1313 C119.1455 259.9497 L118.4585 260.6445 L112 267.1704 L105.5522 260.6553 L104.7632 259.8584 L99.0962 254.1313 l98.6299 253.6611 97.7222 253.5146 97.2563 253.9849 C97.0151 254.23 L96.8428 254.4395 l96.5361 254.9087 96.7026 255.667 97.1104 256.0796 C104.0742 263.1162 L111.1533 270.2695 Lf0 0 0 0.449131 k111.1616 270.2627 m111.3911 270.4951 111.7637 270.5435 112.0679 270.5435 c112.3335 270.5435 112.6196 270.4307 112.875 270.2168 C112.9717 270.1274 l113.1509 269.9463 119.917 263.1094 Y126.8711 256.0825 l127.2749 255.6743 127.4502 254.9126 127.1465 254.4478 C126.9746 254.2383 L126.7339 253.9937 l126.272 253.5278 125.3599 253.6865 124.8979 254.1523 C119.1426 259.9678 L118.4556 260.6621 L112 267.1855 L105.5552 260.6738 L104.7666 259.8774 L99.1016 254.1523 l98.6401 253.6865 97.7275 253.5278 97.2661 253.9937 C97.0254 254.2383 L96.853 254.4478 l96.5493 254.9126 96.7246 255.6743 97.1289 256.0825 C104.0825 263.1094 L111.1616 270.2627 Lf0 0 0 0.445218 k111.1699 270.2549 m111.397 270.4863 111.7715 270.5278 112.0732 270.5278 c112.3359 270.5278 112.6221 270.415 112.8774 270.1992 C112.9736 270.1099 l113.1665 269.915 119.9087 263.1025 Y126.853 256.0859 l127.2529 255.6807 127.437 254.916 127.1362 254.4561 C126.9639 254.2466 L126.7241 254.0029 l126.2666 253.541 125.3496 253.7119 124.8926 254.1733 C119.1396 259.9863 L118.4536 260.6797 L112 267.2017 L105.5586 260.6924 L104.7705 259.897 L99.1074 254.1733 l98.6499 253.7119 97.7334 253.541 97.2754 254.0029 C97.0356 254.2466 L96.8633 254.4561 l96.5625 254.916 96.7471 255.6807 97.147 256.0859 C104.0908 263.1025 L111.1699 270.2549 Lf0 0 0 0.441305 k111.1777 270.248 m111.4028 270.4766 111.7803 270.5117 112.0781 270.5117 c112.3389 270.5117 112.6235 270.3979 112.8794 270.1816 C112.9761 270.0928 l113.1826 269.8838 119.8999 263.0957 Y126.8345 256.0889 l127.2305 255.6885 127.4238 254.9194 127.1265 254.4639 C126.9531 254.2549 L126.7139 254.0117 l126.2612 253.5547 125.3398 253.7378 124.8872 254.1948 C119.1367 260.0049 L118.4512 260.6982 L111.9995 267.2168 L105.5615 260.7114 L104.7739 259.916 L99.1128 254.1948 l98.6602 253.7378 97.7383 253.5547 97.2856 254.0117 C97.0459 254.2549 L96.873 254.4639 l96.5752 254.9194 96.769 255.6885 97.165 256.0889 C104.0996 263.0957 L111.1777 270.248 Lf0 0 0 0.437392 k111.1865 270.2402 m111.4092 270.4668 111.7886 270.4956 112.0835 270.4956 c112.3418 270.4956 112.6255 270.3809 112.8818 270.1641 C112.978 270.0742 l113.1987 269.8516 119.8916 263.0884 Y126.8164 256.0908 l127.2085 255.6953 127.4111 254.9229 127.1167 254.4717 C126.9434 254.2627 L126.7046 254.02 l126.2563 253.5679 125.3301 253.7632 124.8818 254.2153 C119.1343 260.0225 L118.4497 260.7153 L112 267.2324 L105.5645 260.7295 L104.7778 259.9346 L99.1182 254.2153 l98.6699 253.7632 97.7441 253.5679 97.2959 254.02 C97.0571 254.2627 L96.8838 254.4717 l96.5894 254.9229 96.7915 255.6953 97.1841 256.0908 C104.1084 263.0884 L111.1865 270.2402 Lf0 0 0 0.433479 k111.1943 270.2334 m111.4146 270.457 111.7964 270.4795 112.0889 270.4795 c112.3442 270.4795 112.6294 270.3677 112.8848 270.1465 C112.98 270.0571 l113.2144 269.8203 119.8828 263.0815 Y126.7979 256.0947 l127.186 255.7021 127.3979 254.9268 127.1064 254.4805 C126.9326 254.2715 L126.6943 254.0293 l126.251 253.5811 125.3198 253.7891 124.876 254.2363 C119.1313 260.0405 L118.4468 260.7329 L112 267.2476 L105.5679 260.748 L104.7817 259.9536 L99.124 254.2363 l98.6807 253.7891 97.7495 253.5811 97.3057 254.0293 C97.0674 254.2715 L96.894 254.4805 l96.6021 254.9268 96.814 255.7021 97.2021 256.0947 C104.1167 263.0815 L111.1943 270.2334 Lf0 0 0 0.429566 k111.2026 270.2266 m111.4209 270.4482 111.8047 270.4644 112.0938 270.4644 c112.3467 270.4644 112.6299 270.3491 112.8867 270.1289 C112.9819 270.0396 l113.2305 269.7891 119.875 263.0747 Y126.7793 256.0977 l127.1636 255.709 127.3848 254.9302 127.0957 254.4883 C126.9219 254.2793 L126.6846 254.0381 l126.2456 253.5947 125.3096 253.8145 124.8701 254.2578 C119.1289 260.0591 L118.4448 260.751 L112 267.2637 L105.5713 260.7666 L104.7852 259.9731 L99.1289 254.2578 l98.6899 253.8145 97.7544 253.5947 97.3154 254.0381 C97.0771 254.2793 L96.9043 254.4883 l96.6152 254.9302 96.8359 255.709 97.2202 256.0977 C104.125 263.0747 L111.2026 270.2266 Lf0 0 0 0.425653 k111.2109 270.2192 m111.4268 270.4385 111.8135 270.4478 112.0996 270.4478 c112.3501 270.4478 112.6313 270.332 112.8892 270.1108 C112.9844 270.022 l113.2461 269.7573 119.8667 263.0674 Y126.7617 256.1001 l127.1416 255.7158 127.3716 254.9336 127.0859 254.4961 C126.9126 254.2876 L126.6748 254.0469 l126.2402 253.6074 125.2998 253.8394 124.8657 254.2783 C119.126 260.0771 L118.4429 260.7686 L112 267.2783 L105.5742 260.7852 L104.7886 259.9917 L99.1353 254.2783 l98.7007 253.8394 97.7603 253.6074 97.3257 254.0469 C97.0884 254.2876 L96.9146 254.4961 l96.6289 254.9336 96.8589 255.7158 97.2393 256.1001 C104.1338 263.0674 L111.2109 270.2192 Lf0 0 0 0.421739 k111.2192 270.2119 m111.4331 270.4292 111.8213 270.4321 112.1045 270.4321 c112.3525 270.4321 112.6313 270.3135 112.8911 270.0928 C112.9863 270.0044 l113.2622 269.7256 119.8579 263.0605 Y126.7432 256.1035 l127.1201 255.7231 127.3584 254.937 127.0757 254.5044 C126.9019 254.2959 L126.665 254.0557 l126.2344 253.6216 125.2896 253.8657 124.8599 254.2998 C119.1235 260.0952 L118.4409 260.7861 L112 267.2939 L105.5771 260.8037 L104.792 260.0112 L99.1406 254.2998 l98.7104 253.8657 97.7651 253.6216 97.3354 254.0557 C97.0986 254.2959 L96.9248 254.5044 l96.6416 254.937 96.8809 255.7231 97.2573 256.1035 C104.1421 263.0605 L111.2192 270.2119 Lf0 0 0 0.417826 k111.2275 270.2051 m111.4385 270.4194 111.8296 270.416 112.1099 270.416 c112.3545 270.416 112.6338 270.2979 112.8936 270.0752 C112.9883 269.9873 l113.2778 269.6943 119.8491 263.0537 Y126.7246 256.1064 l127.0977 255.73 127.3452 254.9414 127.0654 254.5127 C126.8916 254.3047 L126.6543 254.0645 l126.2295 253.6348 125.2793 253.8911 124.854 254.3208 C119.1206 260.1138 L118.438 260.8037 L112 267.3096 L105.5801 260.8223 L104.7959 260.0303 L99.146 254.3208 l98.7207 253.8911 97.7705 253.6348 97.3452 254.0645 C97.1084 254.3047 L96.9351 254.5127 l96.6553 254.9414 96.9033 255.73 97.2754 256.1064 C104.1509 263.0537 L111.2275 270.2051 Lf0 0 0 0.413913 k111.2354 270.1978 m111.4448 270.4102 111.8379 270.4009 112.1152 270.4009 c112.3569 270.4009 112.6353 270.2808 112.8955 270.0576 C112.9902 269.9692 l113.293 269.6631 119.8408 263.0469 Y126.7061 256.1099 l127.0752 255.7373 127.332 254.9448 127.0547 254.521 C126.8809 254.313 L126.6445 254.0732 l126.2236 253.6484 125.2695 253.917 124.8486 254.3418 C119.1177 260.1323 L118.436 260.8218 L112 267.3252 L105.583 260.8413 L104.7993 260.0498 L99.1514 254.3418 l98.7305 253.917 97.7764 253.6484 97.3555 254.0732 C97.1187 254.313 L96.9448 254.521 l96.668 254.9448 96.9253 255.7373 97.2935 256.1099 C104.1592 263.0474 L111.2354 270.1978 Lf0 0 0 0.41 k111.2432 270.1909 m111.4502 270.4009 111.8457 270.3848 112.1201 270.3848 c112.3594 270.3848 112.6367 270.2642 112.8979 270.04 C112.9922 269.9521 l113.3091 269.6318 119.832 263.0405 Y126.688 256.1128 l127.0527 255.7446 127.3184 254.9482 127.0444 254.5293 C126.8701 254.3213 L126.6348 254.082 l126.2188 253.6621 125.2593 253.9429 124.8433 254.3628 C119.1152 260.1509 L118.4336 260.8394 L112 267.3408 L105.5859 260.8599 L104.8027 260.0688 L99.1563 254.3628 l98.7402 253.9429 97.7813 253.6621 97.3652 254.082 C97.1294 254.3213 L96.9551 254.5293 l96.6812 254.9482 96.9473 255.7446 97.312 256.1128 C104.1675 263.0405 L111.2432 270.1909 Lf0 0 0 0.406087 k111.252 270.1831 m111.457 270.3911 111.8545 270.3687 112.1255 270.3687 c112.3628 270.3687 112.6396 270.2485 112.9004 270.0225 C112.9946 269.9341 l113.3252 269.5996 119.8242 263.0332 Y126.6699 256.1152 l127.0308 255.751 127.3057 254.9517 127.0347 254.5366 C126.8604 254.3291 L126.625 254.0908 l126.2129 253.6748 125.2495 253.9678 124.8379 254.3833 C119.1123 260.1685 L118.4316 260.8574 L112 267.356 L105.5898 260.8784 L104.8071 260.0879 L99.1626 254.3833 l98.7505 253.9678 97.7871 253.6748 97.375 254.0908 C97.1401 254.3291 L96.9658 254.5366 l96.6948 254.9517 96.9702 255.751 97.3306 256.1152 C104.1763 263.0332 L111.252 270.1831 Lf0 0 0 0.402174 k111.2598 270.1763 m111.4629 270.3818 111.8623 270.3525 112.1304 270.3525 c112.3652 270.3525 112.6406 270.2319 112.9023 270.0049 C112.9966 269.917 l113.3413 269.5688 119.8154 263.0264 Y126.6514 256.1187 l127.0083 255.7583 127.292 254.9551 127.0244 254.5449 C126.8496 254.3379 L126.6152 254.0996 l126.208 253.6885 125.2393 253.9937 124.832 254.4048 C119.1099 260.187 L118.4292 260.875 L112 267.3711 L105.5928 260.897 L104.8105 260.1069 L99.168 254.4048 l98.7603 253.9937 97.7925 253.6885 97.3848 254.0996 C97.1504 254.3379 L96.9756 254.5449 l96.708 254.9551 96.9922 255.7583 97.3486 256.1187 C104.1846 263.0264 L111.2598 270.1763 Lf0 0 0 0.398261 k111.2681 270.1689 m111.4683 270.3721 111.8701 270.3369 112.1357 270.3369 c112.3677 270.3369 112.6426 270.2148 112.9048 269.9873 C112.9985 269.8994 l113.3569 269.5371 119.8071 263.0195 Y126.6333 256.1216 l126.9858 255.7651 127.2788 254.959 127.0142 254.5537 C126.8394 254.3462 L126.6055 254.1084 l126.2021 253.7017 125.2295 254.019 124.8262 254.4258 C119.1069 260.2056 L118.4268 260.8926 L112 267.3872 L105.5957 260.9155 L104.8145 260.1265 L99.1733 254.4258 l98.7705 254.019 97.7974 253.7017 97.3945 254.1084 C97.1606 254.3462 L96.9863 254.5537 l96.7207 254.959 97.0146 255.7651 97.3672 256.1216 C104.1929 263.0195 L111.2681 270.1689 Lf0 0 0 0.394348 k111.2769 270.1616 m111.4751 270.3623 111.8794 270.3208 112.1416 270.3208 c112.3711 270.3208 112.6431 270.1963 112.9072 269.9688 C113.001 269.8813 l113.373 269.5054 119.7988 263.0122 Y126.6152 256.1245 l126.9639 255.772 127.2661 254.9624 127.0044 254.5615 C126.8296 254.354 L126.5957 254.1172 l126.1973 253.7153 125.2197 254.0449 124.8218 254.4463 C119.1045 260.2227 L118.4253 260.9102 L112.0005 267.4023 L105.5991 260.9336 L104.8179 260.1455 L99.1792 254.4463 l98.7808 254.0449 97.8032 253.7153 97.4048 254.1172 C97.1714 254.354 L96.9966 254.5615 l96.7344 254.9624 97.0371 255.772 97.3857 256.1245 C104.2021 263.0127 L111.2769 270.1616 Lf0 0 0 0.390435 k111.2847 270.1543 m111.4805 270.353 111.8872 270.3047 112.1465 270.3047 c112.3735 270.3047 112.6455 270.1807 112.9092 269.9512 C113.0029 269.8638 l113.3887 269.4736 119.79 263.0054 119.79 263.0059 C126.5967 256.1274 l126.9414 255.7793 127.2529 254.9658 126.9941 254.5693 C126.8188 254.3623 L126.5854 254.126 l126.1919 253.7285 125.2095 254.0703 124.8159 254.4678 C119.1016 260.2412 L118.4229 260.9282 L112 267.418 L105.6021 260.9531 L104.8213 260.1641 L99.1846 254.4678 l98.791 254.0703 97.8081 253.7285 97.4146 254.126 C97.1816 254.3623 L97.0063 254.5693 l96.7476 254.9658 97.0591 255.7793 97.4038 256.1274 C104.2104 263.0059 L111.2847 270.1543 Lf0 0 0 0.386522 k111.293 270.1475 m111.4863 270.3438 111.895 270.2891 112.1514 270.2891 c112.3755 270.2891 112.645 270.1616 112.9111 269.9336 C113.0049 269.8467 l113.4043 269.4429 119.7817 262.998 Y126.5781 256.1304 l126.9189 255.7861 127.2393 254.9692 126.9834 254.5776 C126.8086 254.3711 L126.5762 254.1348 l126.1865 253.7422 125.1992 254.0957 124.8101 254.4888 C119.0986 260.2598 L118.4204 260.9458 L112 267.4336 L105.6045 260.9717 L104.8252 260.1836 L99.1895 254.4888 l98.8008 254.0957 97.8135 253.7422 97.4243 254.1348 C97.1924 254.3711 L97.0166 254.5776 l96.7607 254.9692 97.0811 255.7861 97.4219 256.1304 C104.2188 262.9985 L111.293 270.1475 Lf0 0 0 0.382609 k111.3018 270.1401 m111.4922 270.3345 111.9033 270.2729 112.1563 270.2729 c112.3779 270.2729 112.6494 270.1484 112.9141 269.916 C113.0068 269.8291 l113.4199 269.4111 119.7734 262.9912 Y126.5596 256.1338 l126.8965 255.7935 127.2266 254.9736 126.9736 254.5859 C126.7979 254.3794 L126.5654 254.144 l126.1807 253.7559 125.1895 254.1221 124.8047 254.5098 C119.0957 260.2783 L118.418 260.9634 L112 267.4492 L105.6084 260.9902 L104.8286 260.2026 L99.1953 254.5098 l98.8105 254.1221 97.8193 253.7559 97.4346 254.144 C97.2021 254.3794 L97.0269 254.5859 l96.7739 254.9736 97.1035 255.7935 97.4404 256.1338 C104.2271 262.9912 L111.3018 270.1401 Lf0 0 0 0.378696 k111.3096 270.1333 m111.499 270.3252 111.9116 270.2573 112.1621 270.2573 c112.3809 270.2573 112.6514 270.1318 112.916 269.8984 C113.0088 269.8115 l113.436 269.3799 119.7646 262.9844 Y126.5415 256.1367 l126.8745 255.8003 127.2129 254.9766 126.9629 254.5938 C126.7871 254.3877 L126.5562 254.1528 l126.1758 253.769 125.1792 254.1475 124.7993 254.5313 C119.0933 260.2964 L118.416 260.981 L112 267.4648 L105.6113 261.0088 L104.832 260.2222 L99.2012 254.5313 l98.8203 254.1475 97.8242 253.769 97.4443 254.1528 C97.2129 254.3877 L97.0371 254.5938 l96.7871 254.9766 97.126 255.8003 97.4585 256.1367 C104.2354 262.9844 L111.3096 270.1333 Lf0 0 0 0.374783 k111.3179 270.126 m111.5044 270.3154 111.9199 270.2412 112.167 270.2412 c112.3838 270.2412 112.6528 270.1152 112.9185 269.8809 C113.0107 269.7939 l113.4517 269.3481 119.7559 262.9775 Y126.5234 256.1396 l126.8525 255.8076 127.2002 254.98 126.9531 254.6021 C126.7769 254.396 L126.5459 254.1616 l126.1704 253.7822 125.1689 254.1729 124.7939 254.5522 C119.0903 260.3145 L118.4136 260.999 L112 267.48 L105.6143 261.0273 L104.8359 260.2412 L99.2061 254.5522 l98.8311 254.1729 97.8296 253.7822 97.4541 254.1616 C97.2227 254.396 L97.0479 254.6021 l96.8008 254.98 97.1484 255.8076 97.4766 256.1396 C104.2441 262.9775 L111.3179 270.126 Lf0 0 0 0.37087 k111.3262 270.1191 m111.5107 270.3057 111.9282 270.2256 112.1724 270.2256 c112.3862 270.2256 112.6543 270.0981 112.9209 269.8633 C113.0127 269.7764 l113.4678 269.3169 119.748 262.9707 Y126.5054 256.1426 l126.8301 255.8145 127.1865 254.9839 126.9424 254.6104 C126.7671 254.4043 L126.5361 254.1709 l126.165 253.7959 125.1592 254.1982 124.7881 254.5732 C119.0879 260.333 L118.4116 261.0166 L112 267.4956 L105.6172 261.0459 L104.8398 260.2603 L99.2119 254.5732 l98.8408 254.1982 97.835 253.7959 97.4639 254.1709 C97.2334 254.4043 L97.0576 254.6104 l96.8135 254.9839 97.1699 255.8145 97.4951 256.1426 C104.2529 262.9707 L111.3262 270.1191 Lf0 0 0 0.366957 k111.334 270.1113 m111.5166 270.2969 111.9365 270.2095 112.1777 270.2095 c112.3887 270.2095 112.6533 270.0786 112.9229 269.8447 C113.0146 269.7588 l113.4834 269.2852 119.7393 262.9639 Y126.4868 256.1455 l126.8076 255.8213 127.1738 254.9873 126.9326 254.6182 C126.7568 254.4131 L126.5264 254.1797 l126.1592 253.8096 125.1494 254.2241 124.7822 254.5942 C119.085 260.3511 L118.4092 261.0342 L112 267.5107 L105.6206 261.0645 L104.8438 260.2793 L99.2168 254.5942 l98.8506 254.2241 97.8403 253.8096 97.4736 254.1797 C97.2437 254.4131 L97.0674 254.6182 l96.8262 254.9873 97.1924 255.8213 97.5137 256.1455 C104.2607 262.9639 L111.334 270.1113 Lf0 0 0 0.363044 k111.3428 270.1045 m111.5225 270.2871 111.9443 270.1938 112.1831 270.1938 c112.3916 270.1938 112.6548 270.061 112.9248 269.8271 C113.0166 269.7412 l113.499 269.2539 119.7305 262.957 Y126.4688 256.1489 l126.7852 255.8286 127.1602 254.9907 126.9229 254.6265 C126.7461 254.4209 L126.5166 254.1875 l126.1543 253.8223 125.1392 254.25 124.7773 254.6152 C119.082 260.3691 L118.4072 261.0518 L112 267.5264 L105.624 261.083 L104.8467 260.2988 L99.2231 254.6152 l98.8608 254.25 97.8457 253.8223 97.4834 254.1875 C97.2539 254.4209 L97.0781 254.6265 l96.8398 254.9907 97.2148 255.8286 97.5317 256.1489 C104.2695 262.957 L111.3428 270.1045 Lf0 0 0 0.359131 k111.3506 270.0972 m111.5283 270.2778 111.9531 270.1777 112.1885 270.1777 c112.3945 270.1777 112.6582 270.0474 112.9277 269.8096 C113.019 269.7236 l113.5156 269.2222 119.7222 262.9502 Y126.4502 256.1519 l126.7632 255.8354 127.1475 254.9946 126.9121 254.6348 C126.7354 254.4287 L126.5063 254.1968 l126.1489 253.8359 125.1289 254.2754 124.7715 254.6357 C119.0796 260.3877 L118.4048 261.0693 L112 267.542 L105.6265 261.1016 L104.8506 260.3174 L99.2285 254.6357 l98.8711 254.2754 97.8506 253.8359 97.4932 254.1968 C97.2646 254.4287 L97.0879 254.6348 l96.8525 254.9946 97.2373 255.8354 97.5503 256.1519 C104.2778 262.9502 L111.3506 270.0972 Lf0 0 0 0.355218 k111.3589 270.0898 m111.5342 270.2676 111.9609 270.1621 112.1934 270.1621 c112.3965 270.1621 112.6597 270.0303 112.9297 269.792 C113.021 269.7061 l113.5313 269.1909 119.7139 262.9434 Y126.4316 256.1543 l126.7407 255.8428 127.1338 254.998 126.9023 254.6426 C126.7251 254.4375 L126.4966 254.2056 l126.1436 253.8491 125.1191 254.3008 124.7661 254.6572 C119.0767 260.4063 L118.4023 261.0879 L112 267.5576 L105.6299 261.1206 L104.854 260.3369 L99.2339 254.6572 l98.8809 254.3008 97.8564 253.8491 97.5034 254.2056 C97.2749 254.4375 L97.0986 254.6426 l96.8662 254.998 97.2598 255.8428 97.5684 256.1543 C104.2861 262.9434 L111.3589 270.0898 Lf0 0 0 0.351305 k111.3672 270.083 m111.5405 270.2588 111.9688 270.146 112.1982 270.146 c112.3989 270.146 112.6631 270.0146 112.9321 269.7744 C113.0234 269.6885 l113.5469 269.1592 119.7051 262.9365 Y126.4131 256.1582 l126.7188 255.8496 127.1211 255.0015 126.8916 254.6509 C126.7148 254.4453 L126.4863 254.2144 l126.1387 253.8628 125.1094 254.3267 124.7607 254.6782 C119.0742 260.4238 L118.4004 261.1055 L112 267.5728 L105.6328 261.1392 L104.8574 260.3555 L99.2393 254.6782 l98.8906 254.3267 97.8623 253.8628 97.5137 254.2144 C97.2852 254.4453 L97.1084 254.6509 l96.8794 255.0015 97.2813 255.8496 97.5869 256.1582 C104.2949 262.9365 L111.3672 270.083 Lf0 0 0 0.347392 k111.375 270.0762 m111.5459 270.249 111.9775 270.1304 112.2036 270.1304 c112.4014 270.1304 112.6655 269.9985 112.9346 269.7568 C113.0254 269.6709 l113.5625 269.1279 119.6968 262.9297 Y126.395 256.1611 l126.6963 255.8564 127.1074 255.0054 126.8818 254.6592 C126.7041 254.4541 L126.4766 254.2236 l126.1328 253.876 125.0991 254.3521 124.7549 254.6992 C119.0713 260.4424 L118.3979 261.123 L112 267.5889 L105.6357 261.1572 L104.8613 260.375 L99.2446 254.6992 l98.9009 254.3521 97.8672 253.876 97.5234 254.2236 C97.2954 254.4541 L97.1191 254.6592 l96.8926 255.0054 97.3042 255.8564 97.605 256.1611 C104.3037 262.9297 L111.375 270.0762 Lf0 0 0 0.343479 k111.3838 270.0684 m111.5527 270.2397 111.9854 270.1143 112.209 270.1143 c112.4043 270.1143 112.666 269.981 112.9365 269.7393 C113.0273 269.6533 l113.5781 269.0962 119.6885 262.9229 Y126.377 256.1636 l126.6738 255.8633 127.0947 255.0088 126.8711 254.667 C126.6943 254.4624 L126.4668 254.2324 l126.127 253.8896 125.0889 254.3774 124.75 254.7202 C119.0684 260.4609 L118.396 261.1406 L112 267.6035 L105.6392 261.1758 L104.8652 260.394 L99.2505 254.7202 l98.9106 254.3774 97.8726 253.8896 97.5332 254.2324 C97.3062 254.4624 L97.1289 254.667 l96.9058 255.0088 97.3262 255.8633 97.6235 256.1636 C104.3115 262.9229 L111.3838 270.0684 Lf0 0 0 0.339566 k111.3916 270.0615 m111.5581 270.2305 111.9937 270.0981 112.2144 270.0981 c112.4072 270.0981 112.665 269.9614 112.9385 269.7207 C113.0293 269.6357 l113.5947 269.0649 119.6797 262.9155 119.6797 262.916 C126.3584 256.167 l126.6514 255.8706 127.0811 255.0122 126.8613 254.6753 C126.6836 254.4707 L126.457 254.2412 l126.1221 253.9033 125.0791 254.4033 124.7441 254.7412 C119.0659 260.4785 L118.3936 261.1582 L112 267.6191 L105.6426 261.1943 L104.8687 260.4131 L99.2559 254.7412 l98.9209 254.4033 97.8779 253.9033 97.543 254.2412 C97.3164 254.4707 L97.1387 254.6753 l96.9189 255.0122 97.3486 255.8706 97.6416 256.167 C104.3203 262.916 L111.3916 270.0615 Lf0 0 0 0.335652 k111.3999 270.0542 m111.5645 270.2212 112.002 270.0825 112.2197 270.0825 c112.4097 270.0825 112.668 269.9458 112.9414 269.7031 C113.0313 269.6182 l113.6104 269.0332 119.6714 262.9087 119.6714 262.9092 C126.3403 256.1699 l126.6294 255.8779 127.0684 255.0161 126.8506 254.6836 C126.6733 254.479 L126.4473 254.25 l126.1167 253.9165 125.0693 254.4287 124.7383 254.7627 C119.063 260.4971 L118.3916 261.1763 L112 267.6348 L105.6455 261.2139 L104.8721 260.4326 L99.2617 254.7627 l98.9307 254.4287 97.8828 253.9165 97.5527 254.25 C97.3267 254.479 L97.1494 254.6836 l96.9326 255.0161 97.3711 255.8779 97.6602 256.1699 C104.3286 262.9092 L111.3999 270.0542 Lf0 0 0 0.331739 k111.4082 270.0469 m111.5703 270.2109 112.0103 270.0664 112.2246 270.0664 c112.4121 270.0664 112.6689 269.9292 112.9434 269.6855 C113.0332 269.6006 l113.626 269.002 119.6631 262.9019 Y126.3223 256.1729 l126.6074 255.8848 127.0547 255.0195 126.8408 254.6914 C126.6631 254.4873 L126.4375 254.2588 l126.1113 253.9297 125.0591 254.4541 124.7329 254.7832 C119.0601 260.5156 L118.3892 261.1938 L112 267.6504 L105.6484 261.2324 L104.876 260.4517 L99.2666 254.7832 l98.9414 254.4541 97.8887 253.9297 97.5625 254.2588 C97.3374 254.4873 L97.1597 254.6914 l96.9453 255.0195 97.3936 255.8848 97.6787 256.1729 C104.3369 262.9023 L111.4082 270.0469 Lf0 0 0 0.327826 k111.416 270.04 m111.5762 270.2021 112.0186 270.0508 112.2305 270.0508 c112.415 270.0508 112.6714 269.9136 112.9458 269.668 C113.0352 269.583 l113.6416 268.9707 119.6543 262.895 Y126.3037 256.1758 l126.585 255.8916 127.042 255.0229 126.8311 254.6997 C126.6523 254.4956 L126.4277 254.2676 l126.1064 253.9429 125.0488 254.4795 124.7275 254.8047 C119.0576 260.5342 L118.3872 261.2119 L112 267.666 L105.6514 261.2505 L104.8794 260.4707 L99.2725 254.8047 l98.9512 254.4795 97.8936 253.9429 97.5723 254.2676 C97.3477 254.4956 L97.1699 254.6997 l96.959 255.0229 97.4155 255.8916 97.6968 256.1758 C104.3457 262.895 L111.416 270.04 Lf0 0 0 0.323913 k111.4248 270.0322 m111.582 270.1924 112.0264 270.0347 112.2354 270.0347 c112.417 270.0347 112.6724 269.8955 112.9482 269.6504 C113.0371 269.5654 l113.6572 268.9385 119.646 262.8877 Y126.2852 256.1787 l126.5625 255.8984 127.0283 255.0269 126.8203 254.708 C126.6421 254.5039 L126.4175 254.2764 l126.1006 253.957 125.0391 254.5059 124.7222 254.8257 C119.0547 260.5518 L118.3848 261.2295 L112 267.6816 L105.6548 261.269 L104.8828 260.4902 L99.2783 254.8257 l98.9609 254.5059 97.8994 253.957 97.582 254.2764 C97.3579 254.5039 L97.1802 254.708 l96.9717 255.0269 97.4375 255.8984 97.7148 256.1787 C104.3545 262.8877 L111.4248 270.0322 Lf0 0 0 0.32 k111.4326 270.0254 m111.5879 270.1831 112.0352 270.019 112.2402 270.019 c112.4199 270.019 112.6753 269.8799 112.9502 269.6328 C113.0396 269.5479 l113.6738 268.9072 119.6377 262.8809 Y126.2666 256.1821 l126.54 255.9058 127.0151 255.0303 126.8101 254.7158 C126.6318 254.5122 L126.4077 254.2852 l126.0952 253.9697 125.0293 254.5313 124.7168 254.8467 C119.0522 260.5703 L118.3828 261.2471 L112 267.6973 L105.6572 261.2881 L104.8867 260.5093 L99.2832 254.8467 l98.9707 254.5313 97.9048 253.9697 97.5923 254.2852 C97.3687 254.5122 L97.1904 254.7158 l96.9854 255.0303 97.46 255.9058 97.7334 256.1821 C104.3628 262.8809 L111.4326 270.0254 Lf0 0 0 0.316087 k111.4409 270.0181 m111.5942 270.1738 112.043 270.0029 112.2456 270.0029 c112.4229 270.0029 112.6777 269.8643 112.9521 269.6152 C113.0415 269.5303 l113.6895 268.876 119.6289 262.874 Y126.249 256.1851 l126.5181 255.9131 127.002 255.0342 126.7998 254.7241 C126.6216 254.5205 L126.3975 254.2939 l126.0898 253.9834 125.019 254.5566 124.7109 254.8672 C119.0493 260.5889 L118.3804 261.2646 L112 267.7124 L105.6611 261.3066 L104.8906 260.5283 L99.2891 254.8672 l98.9814 254.5566 97.9102 253.9834 97.6025 254.2939 C97.3789 254.5205 L97.2002 254.7241 l96.998 255.0342 97.4824 255.9131 97.752 256.1851 C104.3711 262.874 L111.4409 270.0181 Lf0 0 0 0.312174 k111.4492 270.0107 m111.5996 270.1641 112.0508 269.9873 112.251 269.9873 c112.4253 269.9873 112.6792 269.8477 112.9546 269.5977 C113.0435 269.5127 l113.7051 268.8447 119.6201 262.8672 Y126.2305 256.1885 l126.4956 255.9199 126.9888 255.0376 126.7896 254.7324 C126.6113 254.5293 L126.3877 254.3027 l126.085 253.9971 125.0088 254.583 124.7061 254.8887 C119.0464 260.6064 L118.3779 261.2822 L112 267.728 L105.6641 261.3252 L104.894 260.5479 L99.2944 254.8887 l98.9912 254.583 97.915 253.9971 97.6123 254.3027 C97.3892 254.5293 L97.2109 254.7324 l97.0112 255.0376 97.5049 255.9199 97.77 256.1885 C104.3794 262.8672 L111.4492 270.0107 Lf0 0 0 0.308261 k111.458 270.0039 m111.6064 270.1543 112.0596 269.9712 112.2563 269.9712 c112.4277 269.9712 112.6792 269.8291 112.957 269.5791 C113.0459 269.4951 l113.7207 268.8125 119.6123 262.8604 Y126.2119 256.1914 l126.4736 255.9268 126.9756 255.041 126.7793 254.7402 C126.6006 254.5371 L126.3779 254.3115 l126.0791 254.0103 124.999 254.6084 124.7002 254.9092 C119.0439 260.625 L118.376 261.2998 L112 267.7432 L105.667 261.3438 L104.8975 260.5664 L99.2998 254.9092 l99.0015 254.6084 97.9209 254.0103 97.6221 254.3115 C97.3994 254.5371 L97.2207 254.7402 l97.0244 255.041 97.5269 255.9268 97.7881 256.1914 C104.3877 262.8604 L111.458 270.0039 Lf0 0 0 0.304348 k111.4658 269.9971 m111.6118 270.1455 112.0674 269.9556 112.2617 269.9556 c112.4307 269.9556 112.6821 269.8135 112.9595 269.5615 C113.0479 269.4775 l113.7368 268.7813 119.6035 262.853 Y126.1938 256.1943 l126.4512 255.9336 126.9624 255.0449 126.769 254.7485 C126.5903 254.5459 L126.3682 254.3203 l126.0737 254.0234 124.9893 254.6338 124.6943 254.9307 C119.041 260.6436 L118.3735 261.3174 L112 267.7588 L105.6699 261.3623 L104.9014 260.5859 L99.3057 254.9307 l99.0112 254.6338 97.9258 254.0234 97.6318 254.3203 C97.4102 254.5459 L97.231 254.7485 l97.0376 255.0449 97.5488 255.9336 97.8066 256.1943 C104.3965 262.8535 L111.4658 269.9971 Lf0 0 0 0.300435 k111.4741 269.9893 m111.6182 270.1357 112.0757 269.9395 112.2666 269.9395 c112.4336 269.9395 112.6836 269.7969 112.9619 269.5439 C113.0498 269.46 l113.7524 268.75 119.5947 262.8462 Y126.1753 256.1973 l126.4287 255.9409 126.9492 255.0483 126.7588 254.7568 C126.5801 254.5537 L126.3579 254.3291 l126.0684 254.0371 124.979 254.6592 124.689 254.9517 C119.0381 260.6621 L118.3716 261.3359 L112 267.7744 L105.6733 261.3809 L104.9048 260.6045 L99.311 254.9517 l99.021 254.6592 97.9316 254.0371 97.6421 254.3291 C97.4199 254.5537 L97.2412 254.7568 l97.0508 255.0483 97.5713 255.9409 97.8252 256.1973 C104.4053 262.8467 L111.4741 269.9893 Lf0 0 0 0.296522 k111.4824 269.9824 m111.624 270.1265 112.084 269.9238 112.2715 269.9238 c112.436 269.9238 112.6851 269.7798 112.9639 269.5264 C113.0518 269.4429 l113.7686 268.7188 119.5869 262.8394 119.5869 262.8398 C126.1572 256.2002 l126.4063 255.9478 126.936 255.0518 126.7485 254.7646 C126.5693 254.5625 L126.3486 254.3379 l126.0635 254.0508 124.9688 254.6851 124.6836 254.9727 C119.0356 260.6797 L118.3691 261.3535 L112 267.79 L105.6768 261.3994 L104.9082 260.624 L99.3164 254.9727 l99.0313 254.6851 97.937 254.0508 97.6519 254.3379 C97.4307 254.5625 L97.2515 254.7646 l97.064 255.0518 97.5938 255.9478 97.8433 256.2002 C104.4136 262.8398 L111.4824 269.9824 Lf0 0 0 0.292609 k111.4902 269.9746 m111.6299 270.1162 112.0923 269.9077 112.2769 269.9077 c112.4385 269.9077 112.686 269.7617 112.9658 269.5088 C113.0537 269.4248 l113.7842 268.6865 119.5781 262.8325 119.5781 262.833 C126.1387 256.2031 l126.3843 255.9551 126.9229 255.0557 126.7388 254.7729 C126.5591 254.5703 L126.3389 254.3467 l126.0576 254.0635 124.959 254.7104 124.6782 254.9937 C119.0327 260.6982 L118.3672 261.3711 L112 267.8052 L105.6792 261.418 L104.9121 260.6431 L99.3218 254.9937 l99.041 254.7104 97.9424 254.0635 97.6611 254.3467 C97.4414 254.5703 L97.2617 254.7729 l97.0776 255.0557 97.6162 255.9551 97.8618 256.2031 C104.4219 262.833 L111.4902 269.9746 Lf0 0 0 0.288696 k111.499 269.9678 m111.6357 270.1074 112.1006 269.8921 112.2822 269.8921 c112.4409 269.8921 112.687 269.7451 112.9683 269.4912 C113.0557 269.4077 l113.8003 268.6553 119.5693 262.8252 Y126.1211 256.2061 l126.3623 255.9619 126.9097 255.0591 126.7285 254.7813 C126.5488 254.5791 L126.3286 254.356 l126.0527 254.0771 124.9492 254.7363 124.6729 255.0146 C119.0303 260.7168 L118.3647 261.3887 L112 267.8208 L105.6826 261.4365 L104.916 260.6621 L99.3271 255.0146 l99.0518 254.7363 97.9478 254.0771 97.6714 254.356 C97.4512 254.5791 L97.2725 254.7813 l97.0908 255.0591 97.6387 255.9619 97.8799 256.2061 C104.4307 262.8257 L111.499 269.9678 Lf0 0 0 0.284783 k111.5068 269.9609 m111.6416 270.0977 112.1089 269.876 112.2876 269.876 c112.4434 269.876 112.6914 269.7314 112.9707 269.4736 C113.0576 269.3896 l113.8159 268.624 119.561 262.8184 119.561 262.8188 C126.1025 256.209 l126.3398 255.9688 126.8965 255.0625 126.7183 254.7891 C126.5386 254.5869 L126.3188 254.3647 l126.0469 254.0903 124.939 254.7617 124.667 255.0361 C119.0273 260.7344 L118.3623 261.4067 L112 267.8359 L105.6855 261.4556 L104.9194 260.6812 L99.333 255.0361 l99.0615 254.7617 97.9526 254.0903 97.6812 254.3647 C97.4619 254.5869 L97.2822 254.7891 l97.1035 255.0625 97.6602 255.9688 97.8984 256.209 C104.4395 262.8188 L111.5068 269.9609 Lf0 0 0 0.28087 k111.5151 269.9536 m111.6479 270.0884 112.1172 269.8599 112.293 269.8599 c112.4463 269.8599 112.6895 269.7114 112.9731 269.4551 C113.0596 269.3726 l113.8315 268.5928 119.5527 262.8115 119.5527 262.812 C126.084 256.2124 l126.3174 255.9761 126.8833 255.0664 126.708 254.7974 C126.5283 254.5952 L126.3086 254.3735 l126.0415 254.104 124.9287 254.7871 124.6621 255.0566 C119.0244 260.7529 L118.3604 261.4243 L112 267.8516 L105.6885 261.4741 L104.9229 260.7007 L99.3389 255.0566 l99.0713 254.7871 97.958 254.104 97.6914 254.3735 C97.4727 254.5952 L97.292 254.7974 l97.1172 255.0664 97.6826 255.9761 97.917 256.2124 C104.4478 262.812 L111.5151 269.9536 Lf0 0 0 0.276957 k111.5234 269.9463 m111.6533 270.0791 112.125 269.8442 112.2979 269.8442 c112.4492 269.8442 112.6938 269.6968 112.9756 269.4375 C113.062 269.355 l113.8477 268.5615 119.5444 262.8047 Y126.0654 256.2153 l126.2949 255.9834 126.8701 255.0698 126.6978 254.8057 C126.5176 254.6035 L126.2988 254.3823 l126.0361 254.1172 124.9185 254.813 124.6563 255.0781 C119.022 260.7715 L118.3584 261.4424 L112 267.8672 L105.6914 261.4927 L104.9268 260.7197 L99.3438 255.0781 l99.0811 254.813 97.9639 254.1172 97.7012 254.3823 C97.4824 254.6035 L97.3027 254.8057 l97.1299 255.0698 97.7051 255.9834 97.9351 256.2153 C104.4561 262.8047 L111.5234 269.9463 Lf0 0 0 0.273044 k111.5313 269.9395 m111.6592 270.0693 112.1328 269.8281 112.3027 269.8281 c112.4517 269.8281 112.6953 269.6802 112.9775 269.4199 C113.064 269.3374 l113.8633 268.5298 119.5356 262.7979 Y126.0474 256.2188 l126.2734 255.9902 126.8574 255.0732 126.6875 254.8135 C126.5073 254.6123 L126.2891 254.3911 l126.0313 254.1309 124.9082 254.8389 124.6504 255.0986 C119.019 260.7891 L118.3564 261.46 L112 267.8828 L105.6948 261.5117 L104.9307 260.7388 L99.3496 255.0986 l99.0918 254.8389 97.9688 254.1309 97.7109 254.3911 C97.4932 254.6123 L97.313 254.8135 l97.1436 255.0732 97.7275 255.9902 97.9531 256.2188 C104.4644 262.7979 L111.5313 269.9395 Lf0 0 0 0.269131 k111.5396 269.9326 m111.6655 270.0605 112.1416 269.8125 112.3086 269.8125 c112.4541 269.8125 112.6963 269.6616 112.9795 269.4023 C113.0664 269.3203 l113.8789 268.498 119.5273 262.791 Y126.0288 256.2217 l126.251 255.9971 126.8438 255.0771 126.6772 254.8218 C126.4966 254.6206 L126.2793 254.4004 l126.0254 254.1445 124.8984 254.8643 124.6455 255.1201 C119.0166 260.8076 L118.354 261.4775 L112 267.8984 L105.6982 261.5303 L104.9336 260.7578 L99.355 255.1201 l99.1016 254.8643 97.9746 254.1445 97.7212 254.4004 C97.5039 254.6206 L97.3232 254.8218 l97.1563 255.0771 97.7495 255.9971 97.9717 256.2217 C104.4727 262.791 L111.5396 269.9326 Lf0 0 0 0.265218 k111.5479 269.9248 m111.6719 270.0503 112.1494 269.7969 112.3135 269.7969 c112.457 269.7969 112.7002 269.6479 112.9824 269.3848 C113.0684 269.3022 l113.895 268.4668 119.5186 262.7842 Y126.0107 256.2241 l126.2285 256.0039 126.8311 255.0806 126.667 254.8301 C126.4863 254.6289 L126.2695 254.4092 l126.0205 254.1577 124.8887 254.8896 124.6396 255.1406 C119.0137 260.8262 L118.3516 261.4951 L112 267.9136 L105.7012 261.5488 L104.9375 260.7773 L99.3604 255.1406 l99.1113 254.8896 97.9795 254.1577 97.7305 254.4092 C97.5137 254.6289 L97.3335 254.8301 l97.1699 255.0806 97.7725 256.0039 97.9902 256.2241 C104.4814 262.7842 L111.5479 269.9248 Lf0 0 0 0.261305 k111.5562 269.918 m111.6777 270.041 112.1582 269.7808 112.3188 269.7808 c112.459 269.7808 112.7017 269.6309 112.9844 269.3672 C113.0703 269.2852 l113.9111 268.4355 119.5103 262.7773 Y125.9922 256.2275 l126.2061 256.0107 126.8174 255.084 126.6572 254.8379 C126.4766 254.6367 L126.2593 254.418 l126.0146 254.1709 124.8789 254.915 124.6343 255.1621 C119.0107 260.8438 L118.3496 261.5132 L112 267.9297 L105.7041 261.5669 L104.9414 260.7959 L99.3662 255.1621 l99.1216 254.915 97.9849 254.1709 97.7402 254.418 C97.5239 254.6367 L97.3438 254.8379 l97.1831 255.084 97.7944 256.0107 98.0083 256.2275 C104.4902 262.7773 L111.5562 269.918 Lf0 0 0 0.257392 k111.5645 269.9106 m111.6836 270.0317 112.166 269.7646 112.3242 269.7646 c112.4619 269.7646 112.7017 269.6128 112.9863 269.3496 C113.0723 269.2671 l113.9268 268.4038 119.502 262.7705 Y125.9736 256.2305 l126.1836 256.0186 126.8047 255.0879 126.6465 254.8462 C126.4658 254.645 L126.249 254.4268 l126.0093 254.1846 124.8682 254.9414 124.6284 255.1836 C119.0078 260.8623 L118.3477 261.5308 L112 267.9448 L105.707 261.5854 L104.9448 260.8154 L99.3716 255.1836 l99.1318 254.9414 97.9907 254.1846 97.751 254.4268 C97.5342 254.645 L97.3535 254.8462 l97.1963 255.0879 97.8164 256.0186 98.0264 256.2305 C104.498 262.7705 L111.5645 269.9106 Lf0 0 0 0.253479 k111.5723 269.9033 m111.6895 270.0225 112.1743 269.749 112.3291 269.749 c112.4648 269.749 112.7031 269.5962 112.9888 269.332 C113.0742 269.25 l113.9424 268.3721 119.4932 262.7637 Y125.9556 256.2334 l126.1611 256.0254 126.791 255.0913 126.6367 254.8545 C126.4556 254.6533 L126.2397 254.4351 l126.0044 254.1973 124.8584 254.9668 124.623 255.2041 C119.0054 260.8809 L118.3447 261.5488 L112 267.96 L105.7109 261.6045 L104.9482 260.835 L99.377 255.2041 l99.1416 254.9668 97.9961 254.1973 97.7607 254.4351 C97.5449 254.6533 L97.3643 254.8545 l97.2095 255.0913 97.8389 256.0254 98.0449 256.2334 C104.5068 262.7637 L111.5723 269.9033 Lf0 0 0 0.249565 k111.5811 269.8965 m111.6953 270.0127 112.1826 269.7329 112.3345 269.7329 c112.4673 269.7329 112.7046 269.5791 112.9912 269.314 C113.0762 269.2319 l113.958 268.3408 119.4854 262.7563 Y125.9375 256.2363 l126.1396 256.0322 126.7783 255.0947 126.626 254.8623 C126.4448 254.6621 L126.2295 254.4438 l125.999 254.2109 124.8486 254.9922 124.6172 255.2251 C119.0029 260.8989 L118.3428 261.5664 L112 267.9756 L105.7134 261.623 L104.9521 260.8535 L99.3823 255.2251 l99.1514 254.9922 98.001 254.2109 97.7705 254.4438 C97.5552 254.6621 L97.374 254.8623 l97.2222 255.0947 97.8613 256.0322 98.0635 256.2363 C104.5151 262.7563 L111.5811 269.8965 Lf0 0 0 0.245652 k111.5889 269.8887 m111.7017 270.0029 112.1909 269.7168 112.3398 269.7168 c112.4697 269.7168 112.7051 269.5605 112.9932 269.2959 C113.0786 269.2148 l113.9741 268.3096 119.4766 262.7495 Y125.9189 256.2393 l126.1172 256.0391 126.7646 255.0986 126.6162 254.8706 C126.4346 254.6699 L126.2197 254.4531 l125.9932 254.2246 124.8389 255.0176 124.6123 255.2461 C119 260.917 L118.3408 261.584 L112 267.9912 L105.7168 261.6416 L104.9561 260.873 L99.3877 255.2461 l99.1616 255.0176 98.0068 254.2246 97.7803 254.4531 C97.5654 254.6699 L97.3848 254.8706 l97.2354 255.0986 97.8838 256.0391 98.0815 256.2393 C104.5234 262.7495 L111.5889 269.8887 Lf0 0 0 0.241739 k111.5977 269.8818 m111.7075 269.9937 112.1987 269.7012 112.3447 269.7012 c112.4727 269.7012 112.709 269.5469 112.9961 269.2783 C113.0801 269.1973 l113.9897 268.2778 119.4678 262.7422 Y125.9009 256.2422 l126.0947 256.0459 126.752 255.1021 126.606 254.8789 C126.4243 254.6787 L126.21 254.4619 l125.9883 254.2383 124.8281 255.043 124.6064 255.2671 C118.9971 260.9355 L118.3384 261.6016 L112 268.0063 L105.7197 261.6602 L104.959 260.8921 L99.3936 255.2671 l99.1719 255.043 98.0117 254.2383 97.79 254.4619 C97.5762 254.6787 L97.395 254.8789 l97.249 255.1021 97.9058 256.0459 98.0996 256.2422 C104.5322 262.7427 L111.5977 269.8818 Lf0 0 0 0.237826 k111.6055 269.875 m111.7129 269.9844 112.207 269.6855 112.3506 269.6855 c112.4751 269.6855 112.708 269.5273 112.998 269.2607 C113.082 269.1797 l114.0059 268.2461 119.46 262.7354 119.46 262.7358 C125.8828 256.2456 l126.0723 256.0532 126.7383 255.1055 126.5957 254.8867 C126.4141 254.6865 L126.2002 254.4707 l125.9829 254.2515 124.8184 255.0688 124.6016 255.2881 C118.9941 260.9536 L118.3359 261.6191 L112 268.0225 L105.7227 261.6787 L104.9629 260.9111 L99.3989 255.2881 l99.1816 255.0688 98.0171 254.2515 97.7998 254.4707 C97.5864 254.6865 L97.4048 254.8867 l97.2617 255.1055 97.9277 256.0532 98.1182 256.2456 C104.541 262.7358 L111.6055 269.875 Lf0 0 0 0.233913 k111.6133 269.8677 m111.7192 269.9746 112.2153 269.6694 112.3555 269.6694 c112.4775 269.6694 112.7109 269.5117 113 269.2432 C113.0845 269.1621 l114.0215 268.2148 119.4512 262.7285 119.4512 262.729 C125.8643 256.2485 l126.0503 256.0605 126.7256 255.1094 126.5854 254.895 C126.4033 254.6953 L126.1904 254.4795 l125.9775 254.2646 124.8081 255.0947 124.5957 255.3096 C118.9917 260.9717 L118.334 261.6367 L112 268.0376 L105.7261 261.6973 L104.9663 260.9302 L99.4043 255.3096 l99.1914 255.0947 98.0225 254.2646 97.8101 254.4795 C97.5967 254.6953 L97.415 254.895 l97.2754 255.1094 97.9502 256.0605 98.1362 256.2485 C104.5493 262.729 L111.6133 269.8677 Lf0 0 0 0.23 k111.6221 269.8604 m111.7256 269.9658 112.2236 269.6533 112.3608 269.6533 c112.4805 269.6533 112.7139 269.4966 113.0024 269.2256 C113.0869 269.1445 l114.0371 268.1836 119.4424 262.7217 119.4424 262.7222 C125.8457 256.252 l126.0283 256.0674 126.7119 255.1128 126.5752 254.9033 C126.3926 254.7031 L126.1802 254.4883 l125.9722 254.2783 124.7983 255.1201 124.5903 255.3301 C118.9893 260.9902 L118.332 261.6543 L112 268.0527 L105.7285 261.7158 L104.9702 260.9492 L99.4097 255.3301 l99.2017 255.1201 98.0278 254.2783 97.8198 254.4883 C97.6074 254.7031 L97.4253 254.9033 l97.2881 255.1128 97.9727 256.0674 98.1553 256.252 C104.5576 262.7222 L111.6221 269.8604 Lf0 0 0 0.226087 k111.6299 269.853 m111.7314 269.9561 112.2314 269.6377 112.3657 269.6377 c112.4834 269.6377 112.7158 269.4795 113.0049 269.208 C113.0889 269.127 l114.0532 268.1519 119.4341 262.7148 Y125.8271 256.2544 l126.0059 256.0742 126.6992 255.1162 126.5654 254.9111 C126.3828 254.7119 L126.1699 254.4971 l125.9668 254.291 124.7881 255.1455 124.5845 255.3516 C118.9863 261.0083 L118.3296 261.6724 L112 268.0684 L105.7324 261.7349 L104.9741 260.9683 L99.416 255.3516 l99.2119 255.1455 98.0332 254.291 97.8291 254.4971 C97.6172 254.7119 L97.4355 254.9111 l97.3018 255.1162 97.9951 256.0742 98.1729 256.2544 C104.5659 262.7153 L111.6299 269.853 Lf0 0 0 0.222174 k111.6387 269.8457 m111.7373 269.9463 112.2402 269.6221 112.3711 269.6221 c112.4854 269.6221 112.7163 269.4624 113.0068 269.1899 C113.0903 269.1094 l114.0688 268.1201 119.4258 262.708 Y125.8091 256.2578 l125.9834 256.0811 126.6855 255.1201 126.5547 254.9199 C126.3726 254.7202 L126.1602 254.5059 l125.9609 254.3052 124.7783 255.1714 124.5791 255.3721 C118.9834 261.0264 L118.3271 261.6899 L112 268.084 L105.7354 261.7529 L104.9775 260.9878 L99.4209 255.3721 l99.2217 255.1714 98.0391 254.3052 97.8398 254.5059 C97.6279 254.7202 L97.4463 254.9199 l97.3149 255.1201 98.0171 256.0811 98.1914 256.2578 C104.5752 262.708 L111.6387 269.8457 Lf0 0 0 0.218261 k111.6465 269.8389 m111.7432 269.937 112.248 269.606 112.376 269.606 c112.4878 269.606 112.7168 269.4443 113.0093 269.1719 C113.0928 269.0918 l114.085 268.0889 119.4175 262.7012 Y125.791 256.2607 l125.9614 256.0884 126.6729 255.1235 126.5449 254.9277 C126.3618 254.7285 L126.1509 254.5146 l125.9561 254.3184 124.7681 255.1968 124.5732 255.3936 C118.9805 261.0449 L118.3252 261.708 L112 268.0996 L105.7383 261.7715 L104.9814 261.0068 L99.4268 255.3936 l99.2319 255.1968 98.0439 254.3184 97.8496 254.5146 C97.6387 254.7285 L97.4561 254.9277 l97.3281 255.1235 98.0391 256.0884 98.21 256.2607 C104.583 262.7012 L111.6465 269.8389 Lf0 0 0 0.214348 k111.6548 269.832 m111.749 269.9277 112.2568 269.5898 112.3818 269.5898 c112.4907 269.5898 112.7197 269.4287 113.0117 269.1543 C113.0947 269.0742 l114.1011 268.0576 119.4087 262.6943 Y125.7725 256.2637 l125.939 256.0957 126.6592 255.127 126.5342 254.9355 C126.3516 254.7368 L126.1406 254.5234 l125.9507 254.332 124.7583 255.2227 124.5684 255.4141 C118.978 261.063 L118.3232 261.7256 L112 268.1152 L105.7412 261.79 L104.9844 261.0259 L99.4321 255.4141 l99.2422 255.2227 98.0488 254.332 97.8594 254.5234 C97.6484 254.7368 L97.4663 254.9355 l97.3413 255.127 98.062 256.0957 98.2285 256.2637 C104.5918 262.6943 L111.6548 269.832 Lf0 0 0 0.210435 k111.6631 269.8247 m111.7554 269.918 112.2646 269.5742 112.3867 269.5742 c112.4932 269.5742 112.7212 269.4121 113.0137 269.1367 C113.0967 269.0566 l114.1172 268.0259 119.4004 262.6875 Y125.7539 256.2666 l125.9165 256.1025 126.6465 255.1309 126.5244 254.9443 C126.3408 254.7451 L126.1309 254.5322 l125.9453 254.3447 124.748 255.248 124.5625 255.4355 C118.9756 261.0815 L118.3203 261.7437 L112 268.1309 L105.7446 261.8091 L104.9883 261.0449 L99.4375 255.4355 l99.252 255.248 98.0547 254.3447 97.8691 254.5322 C97.6592 254.7451 L97.4766 254.9443 l97.3545 255.1309 98.084 256.1025 98.2466 256.2666 C104.6001 262.6875 L111.6631 269.8247 Lf0 0 0 0.206522 k111.6714 269.8174 m111.7612 269.9092 112.2729 269.5586 112.3926 269.5586 c112.4961 269.5586 112.7212 269.394 113.0156 269.1191 C113.0986 269.0391 l114.1328 267.9951 119.3916 262.6797 119.3916 262.6807 C125.7363 256.27 l125.8945 256.1099 126.6328 255.1343 126.5142 254.9521 C126.3311 254.7534 L126.1211 254.541 l125.9395 254.3584 124.7383 255.2739 124.5576 255.4565 C118.9727 261.0996 L118.3184 261.7612 L112 268.146 L105.7476 261.8276 L104.9917 261.0645 L99.4434 255.4565 l99.2617 255.2739 98.0601 254.3584 97.8789 254.541 C97.6694 254.7534 L97.4868 254.9521 l97.3677 255.1343 98.1064 256.1099 98.2646 256.27 C104.6084 262.6807 L111.6714 269.8174 Lf0 0 0 0.202609 k111.6792 269.8101 m111.7666 269.8989 112.2813 269.5425 112.3975 269.5425 c112.498 269.5425 112.7246 269.3789 113.0186 269.1016 C113.1006 269.0215 l114.1484 267.9634 119.3833 262.6729 119.3833 262.6738 C125.7178 256.2725 l125.8721 256.1162 126.6201 255.1377 126.5039 254.96 C126.3203 254.7617 L126.1113 254.5498 l125.9346 254.3716 124.728 255.2993 124.5518 255.4775 C118.9697 261.1182 L118.3164 261.7793 L112 268.1611 L105.751 261.8467 L104.9956 261.083 L99.4482 255.4775 l99.272 255.2993 98.0654 254.3716 97.8887 254.5498 C97.6797 254.7617 L97.4971 254.96 l97.3809 255.1377 98.1284 256.1162 98.2832 256.2725 C104.6172 262.6738 L111.6792 269.8101 Lf0 0 0 0.198696 k111.6875 269.8027 m111.7729 269.8896 112.2896 269.5264 112.4023 269.5264 c112.501 269.5264 112.7275 269.3628 113.0205 269.084 C113.1025 269.0039 l114.1641 267.9316 119.3745 262.666 119.3745 262.667 C125.6992 256.2754 l125.8496 256.1235 126.6064 255.1416 126.4937 254.9688 C126.3096 254.77 L126.1016 254.5591 l125.9297 254.3857 124.7183 255.3252 124.5459 255.4985 C118.9668 261.1362 L118.314 261.7969 L112 268.1772 L105.7539 261.8652 L104.9995 261.1025 L99.4541 255.4985 l99.2822 255.3252 98.0708 254.3857 97.8989 254.5591 C97.6904 254.77 L97.5068 254.9688 l97.394 255.1416 98.1504 256.1235 98.3008 256.2754 C104.626 262.667 L111.6875 269.8027 Lf0 0 0 0.194783 k111.6958 269.7959 m111.7793 269.8804 112.2974 269.5107 112.4077 269.5107 c112.5039 269.5107 112.73 269.3477 113.0229 269.0659 C113.105 268.9863 l114.1802 267.9004 119.3662 262.6592 119.3662 262.6602 C125.6812 256.2788 l125.8276 256.1309 126.5938 255.145 126.4834 254.9766 C126.2998 254.7783 L126.0913 254.5679 l125.9238 254.3989 124.708 255.3506 124.5405 255.5195 C118.9644 261.1543 L118.3115 261.8145 L112 268.1924 L105.7568 261.8838 L105.0029 261.1221 L99.4595 255.5195 l99.292 255.3506 98.0762 254.3989 97.9087 254.5679 C97.7007 254.7783 L97.5176 254.9766 l97.4072 255.145 98.1733 256.1309 98.3198 256.2788 C104.6338 262.6602 L111.6958 269.7959 Lf0 0 0 0.19087 k111.7041 269.7891 m111.7852 269.8711 112.3057 269.4946 112.4126 269.4946 c112.5068 269.4946 112.729 269.3276 113.0254 269.0483 C113.1069 268.9688 l114.1958 267.8691 119.3574 262.6523 119.3574 262.6533 C125.6626 256.2822 l125.8052 256.1377 126.5801 255.1484 126.4731 254.9844 C126.2891 254.7866 L126.0811 254.5767 l125.9185 254.4121 124.6978 255.376 124.5347 255.5405 C118.9614 261.1729 L118.3096 261.832 L112 268.208 L105.7598 261.9023 L105.0068 261.1406 L99.4648 255.5405 l99.3018 255.376 98.082 254.4121 97.9189 254.5767 C97.7109 254.7866 L97.5273 254.9844 l97.4199 255.1484 98.1953 256.1377 98.3379 256.2822 C104.6426 262.6533 L111.7041 269.7891 Lf0 0 0 0.186957 k111.7124 269.7813 m111.791 269.8613 112.3135 269.4785 112.418 269.4785 c112.5088 269.4785 112.7305 269.311 113.0273 269.0303 C113.1094 268.9512 l114.2119 267.8369 119.3496 262.6455 119.3496 262.646 C125.6445 256.2852 l125.7832 256.1445 126.5674 255.1523 126.4629 254.9932 C126.2788 254.7949 L126.0713 254.5854 l125.9131 254.4258 124.688 255.4014 124.5293 255.5615 C118.959 261.1909 L118.3076 261.8496 L112 268.2236 L105.7637 261.9209 L105.0098 261.1602 L99.4707 255.5615 l99.312 255.4014 98.0869 254.4258 97.9287 254.5854 C97.7217 254.7949 L97.5381 254.9932 l97.4336 255.1523 98.2178 256.1445 98.3564 256.2852 C104.6509 262.646 L111.7124 269.7813 Lf0 0 0 0.183044 k111.7202 269.7739 m111.7969 269.8516 112.3218 269.4624 112.4229 269.4624 c112.5117 269.4624 112.7319 269.2939 113.0293 269.0127 C113.1113 268.9336 l114.2275 267.8057 119.3408 262.6387 Y125.626 256.2876 l125.7607 256.1514 126.5537 255.1563 126.4531 255.001 C126.2686 254.8027 L126.0615 254.5938 l125.9082 254.4385 124.6777 255.4277 124.5234 255.583 C118.9561 261.2095 L118.3047 261.8672 L112 268.2388 L105.7661 261.9395 L105.0137 261.1792 L99.4756 255.583 l99.3223 255.4277 98.0918 254.4385 97.9385 254.5938 C97.7319 254.8027 L97.5479 255.001 l97.4473 255.1563 98.2397 256.1514 98.3745 256.2876 C104.6597 262.6387 L111.7202 269.7739 Lf0 0 0 0.179131 k111.7285 269.7666 m111.8027 269.8423 112.3301 269.4463 112.4287 269.4463 c112.5142 269.4463 112.7349 269.2788 113.0322 268.9951 C113.1133 268.916 l114.2432 267.7744 119.332 262.6318 Y125.6074 256.291 l125.7383 256.1587 126.541 255.1592 126.4424 255.0088 C126.2578 254.8115 L126.0518 254.6025 l125.9023 254.4521 124.668 255.4531 124.5186 255.6035 C118.9531 261.2275 L118.3027 261.8848 L112 268.2549 L105.7695 261.958 L105.0176 261.1982 L99.4814 255.6035 l99.332 255.4531 98.0977 254.4521 97.9482 254.6025 C97.7422 254.8115 L97.5581 255.0088 l97.46 255.1592 98.2627 256.1587 98.3931 256.291 C104.668 262.6318 L111.7285 269.7666 Lf0 0 0 0.175218 k111.7373 269.7598 m111.8091 269.833 112.3379 269.4307 112.4336 269.4307 c112.5171 269.4307 112.7354 269.2607 113.0342 268.9775 C113.1152 268.8984 l114.2588 267.7427 119.3242 262.625 Y125.5898 256.2939 l125.7163 256.166 126.5273 255.1626 126.4326 255.0166 C126.248 254.8203 L126.042 254.6123 l125.897 254.4658 124.6577 255.4785 124.5127 255.625 C118.9502 261.2461 L118.3008 261.9028 L112 268.27 L105.7725 261.9766 L105.021 261.2173 L99.4873 255.625 l99.3423 255.4785 98.103 254.4658 97.958 254.6123 C97.7529 254.8203 L97.5684 255.0166 l97.4736 255.1626 98.2847 256.166 98.4111 256.2939 C104.6768 262.625 L111.7373 269.7598 Lf0 0 0 0.171304 k111.7451 269.7529 m111.8149 269.8232 112.3467 269.415 112.439 269.415 c112.5195 269.415 112.7402 269.2471 113.0366 268.96 C113.1172 268.8809 l114.2749 267.7109 119.3154 262.6177 119.3154 262.6182 C125.5713 256.2969 l125.6938 256.1729 126.5146 255.166 126.4224 255.0249 C126.2373 254.8281 L126.0322 254.6211 l125.8916 254.4795 124.6479 255.5039 124.5078 255.6455 C118.9478 261.2642 L118.2988 261.9204 L112 268.2852 L105.7754 261.9951 L105.0244 261.2363 L99.4927 255.6455 l99.3525 255.5039 98.1084 254.4795 97.9678 254.6211 C97.7632 254.8281 L97.5781 255.0249 l97.4863 255.166 98.3066 256.1729 98.4297 256.2969 C104.6846 262.6182 L111.7451 269.7529 Lf0 0 0 0.167391 k111.7539 269.7456 m112.4443 269.3989 l112.5225 269.3989 112.7417 269.2305 113.0391 268.9424 C113.1191 268.8633 l114.291 267.6797 119.3071 262.6108 Y125.5527 256.2998 l125.6714 256.1797 126.501 255.1699 126.4121 255.0332 C126.2271 254.8369 L126.022 254.6299 l125.8857 254.4922 124.6377 255.5293 124.502 255.667 C118.9453 261.2822 L118.2959 261.9385 L112 268.3008 L105.7788 262.0137 L105.0283 261.2559 L99.498 255.667 l99.3623 255.5293 98.1138 254.4922 97.978 254.6299 C97.7734 254.8369 L97.5889 255.0332 l97.4995 255.1699 98.3291 256.1797 98.4478 256.2998 C104.6934 262.6113 L111.7539 269.7456 Lf0 0 0 0.163478 k111.7617 269.7383 m112.4492 269.3828 l112.5244 269.3828 112.7412 269.2119 113.041 268.9243 C113.1216 268.8462 l114.3066 267.6484 119.2988 262.604 Y125.5347 256.3027 l125.6494 256.1865 126.4883 255.1733 126.4019 255.041 C126.2168 254.8447 L126.0127 254.6382 l125.8809 254.5059 124.6279 255.5552 124.4966 255.6875 C118.9424 261.3008 L118.2939 261.9561 L112 268.3164 L105.7813 262.0322 L105.0322 261.2749 L99.5039 255.6875 l99.3721 255.5552 98.1191 254.5059 97.9878 254.6382 C97.7842 254.8447 L97.5996 255.041 l97.5127 255.1733 98.3511 256.1865 98.4658 256.3027 C104.7017 262.6045 L111.7617 269.7383 Lf0 0 0 0.159565 k111.7695 269.731 m112.4546 269.3672 l112.5273 269.3672 112.7412 269.1934 113.043 268.9067 C113.123 268.8281 l114.3223 267.6167 119.29 262.5972 Y125.5161 256.3057 l125.627 256.1938 126.4746 255.1768 126.3911 255.0493 C126.2061 254.8535 L126.0024 254.647 l125.8755 254.519 124.6177 255.5811 124.4907 255.709 C118.9395 261.3188 L118.292 261.9741 L112 268.332 L105.7847 262.0513 L105.0356 261.2939 L99.5088 255.709 l99.3823 255.5811 98.124 254.519 97.9976 254.647 C97.7944 254.8535 L97.6094 255.0493 l97.5259 255.1768 98.374 256.1938 98.4849 256.3057 C104.7104 262.5977 L111.7695 269.731 Lf0 0 0 0.155652 k111.7783 269.7241 m112.46 269.3516 l112.5298 269.3516 112.7451 269.1792 113.0459 268.8887 C113.1255 268.811 l114.3384 267.5854 119.2817 262.5903 119.2817 262.5908 C125.4976 256.3091 l125.6045 256.2007 126.4614 255.1807 126.3809 255.0576 C126.1958 254.8613 L125.9922 254.6558 l125.8701 254.5322 124.6079 255.6064 124.4854 255.73 C118.937 261.3374 L118.2896 261.9917 L112 268.3477 L105.7881 262.0698 L105.0391 261.3135 L99.5146 255.73 l99.3926 255.6064 98.1299 254.5322 98.0078 254.6558 C97.8047 254.8613 L97.6196 255.0576 l97.5391 255.1807 98.396 256.2007 98.5029 256.3091 C104.7188 262.5908 L111.7783 269.7241 Lf0 0 0 0.151739 k111.7866 269.7168 m112.4648 269.3354 l112.5327 269.3354 112.7471 269.1626 113.0479 268.8711 C113.1274 268.793 l114.354 267.5537 119.2729 262.5835 119.2729 262.584 C125.4795 256.312 l125.5825 256.208 126.4482 255.1841 126.3706 255.0654 C126.1855 254.8696 L125.9824 254.665 l125.8647 254.5464 124.5977 255.6323 124.48 255.751 C118.9341 261.3555 L118.2871 262.0093 L112 268.3628 L105.791 262.0884 L105.0425 261.332 L99.52 255.751 l99.4023 255.6323 98.1353 254.5464 98.0176 254.665 C97.8149 254.8696 L97.6299 255.0654 l97.5522 255.1841 98.418 256.208 98.521 256.312 C104.7275 262.584 L111.7866 269.7168 Lf0 0 0 0.147826 k111.7944 269.71 m112.4707 269.3193 l112.5352 269.3193 112.749 269.1455 113.0503 268.8535 C113.1299 268.7759 l114.3701 267.5225 119.2646 262.5762 119.2646 262.5771 C125.4609 256.3154 l125.5601 256.2148 126.4351 255.1875 126.3604 255.0737 C126.1748 254.8784 L125.9727 254.6738 l125.8599 254.5596 124.5879 255.6577 124.4746 255.772 C118.9316 261.3735 L118.2852 262.0273 L112 268.3784 L105.7939 262.1074 L105.0464 261.3516 L99.5254 255.772 l99.4121 255.6577 98.1401 254.5596 98.0273 254.6738 C97.8252 254.8784 L97.6401 255.0737 l97.5654 255.1875 98.4404 256.2148 98.5391 256.3154 C104.7358 262.5771 L111.7944 269.71 Lf0 0 0 0.143913 k111.8027 269.7026 m112.4756 269.3037 l112.5381 269.3037 112.7505 269.1289 113.0522 268.8359 C113.1318 268.7583 l114.3857 267.4907 119.2563 262.5693 Y125.4429 256.3184 l125.5376 256.2222 126.4219 255.1914 126.3506 255.082 C126.165 254.8862 L125.9629 254.6826 l125.8545 254.5732 124.5771 255.6836 124.4688 255.793 C118.9287 261.3921 L118.2832 262.0449 L112 268.3936 L105.7974 262.1255 L105.0498 261.3706 L99.5313 255.793 l99.4224 255.6836 98.146 254.5732 98.0371 254.6826 C97.8359 254.8862 L97.6504 255.082 l97.5791 255.1914 98.4629 256.2222 98.5581 256.3184 C104.7441 262.5693 L111.8027 269.7026 Lf0 0 0 0.14 k111.811 269.6953 m112.481 269.2876 l112.5405 269.2876 112.749 269.1089 113.0547 268.8179 C113.1333 268.7407 l114.4014 267.4595 119.2476 262.5625 Y125.4248 256.3208 l125.5156 256.229 126.4087 255.1948 126.3398 255.0898 C126.1543 254.895 L125.9531 254.6914 l125.8486 254.5864 124.5674 255.709 124.4639 255.814 C118.9258 261.4102 L118.2803 262.0625 L112 268.4097 L105.8003 262.144 L105.0537 261.3896 L99.5361 255.814 l99.4326 255.709 98.1514 254.5864 98.0469 254.6914 C97.8462 254.895 L97.6602 255.0898 l97.5918 255.1948 98.4854 256.229 98.5762 256.3208 C104.7529 262.5625 L111.811 269.6953 Lf0 0 0 0.136087 k111.8193 269.688 m112.4858 269.272 l112.543 269.272 112.752 269.0938 113.0566 268.8003 C113.1357 268.7231 l114.417 267.4277 119.2393 262.5557 Y125.4063 256.3242 l125.4932 256.2358 126.3955 255.1982 126.3301 255.0981 C126.144 254.9028 L125.9429 254.7002 l125.8433 254.5996 124.5576 255.7349 124.458 255.8354 C118.9229 261.4282 L118.2783 262.0801 L112 268.4248 L105.8037 262.1626 L105.0576 261.4092 L99.542 255.8354 l99.4424 255.7349 98.1563 254.5996 98.0566 254.7002 C97.8564 254.9028 L97.6709 255.0981 l97.6055 255.1982 98.5073 256.2358 98.5947 256.3242 C104.7612 262.5557 L111.8193 269.688 Lf0 0 0 0.132174 k111.8276 269.6812 m112.4912 269.2559 l112.5459 269.2559 112.7568 269.0801 113.0596 268.7827 C113.1377 268.7056 l114.4331 267.3965 119.2305 262.5483 119.2305 262.5488 C125.3882 256.3271 l125.4717 256.2432 126.3823 255.2021 126.3198 255.1064 C126.1333 254.9111 L125.9331 254.709 l125.8379 254.6128 124.5479 255.7603 124.4526 255.8564 C118.9204 261.4468 L118.2764 262.0977 L112 268.4404 L105.8066 262.1812 L105.061 261.4282 L99.5474 255.8564 l99.4521 255.7603 98.1621 254.6128 98.0669 254.709 C97.8672 254.9111 L97.6807 255.1064 l97.6182 255.2021 98.5293 256.2432 98.6128 256.3271 C104.7695 262.5488 L111.8276 269.6812 Lf0 0 0 0.128261 k111.8354 269.6738 m112.4966 269.2402 l112.5479 269.2402 112.7563 269.062 113.0615 268.7651 C113.1396 268.688 l114.4487 267.3647 119.2222 262.5415 119.2222 262.542 C125.3696 256.3301 l125.4492 256.25 126.3691 255.2056 126.3096 255.1143 C126.123 254.9194 L125.9233 254.7178 l125.833 254.627 124.5371 255.7861 124.4468 255.877 C118.9175 261.4648 L118.2744 262.1152 L112 268.4561 L105.8096 262.2002 L105.0645 261.4473 L99.5527 255.877 l99.4624 255.7861 98.167 254.627 98.0767 254.7178 C97.8774 254.9194 L97.6914 255.1143 l97.6318 255.2056 98.5518 256.25 98.6309 256.3301 C104.7783 262.542 L111.8354 269.6738 Lf0 0 0 0.124348 k111.8438 269.667 m112.502 269.2241 l112.5508 269.2241 112.7598 269.0469 113.064 268.7471 C113.1421 268.6704 l114.4648 267.3335 119.2139 262.5347 119.2139 262.5352 C125.3511 256.3335 L126.2993 255.1226 L126.1128 254.9277 L125.9136 254.7266 L124.4414 255.8984 L118.915 261.4834 L118.2715 262.1333 L112 268.4712 L105.8125 262.2188 L105.0684 261.4663 L99.5586 255.8984 L98.0864 254.7266 L97.8877 254.9277 L97.7017 255.1226 L98.6494 256.3335 L104.7866 262.5352 L111.8438 269.667 Lf0 0 0 0.120435 k111.8521 269.6592 m112.5068 269.208 l112.5532 269.208 112.7593 269.0278 113.0659 268.7295 C113.1436 268.6528 l114.4805 267.3018 119.2051 262.5278 Y125.333 256.3359 L126.2891 255.1309 L126.1025 254.9365 L125.9033 254.7354 L124.4355 255.9189 L118.9121 261.5015 L118.2695 262.1514 L112 268.4873 L105.8154 262.2373 L105.0718 261.4854 L99.5645 255.9189 L98.0967 254.7354 L97.8979 254.9365 L97.7114 255.1309 L98.668 256.3359 L104.7954 262.5283 L111.8521 269.6592 Lf0 0 0 0.116522 k111.8604 269.6523 m112.5122 269.1924 l112.5562 269.1924 112.7627 269.0132 113.0684 268.7119 C113.1455 268.6348 l114.4961 267.2705 119.1973 262.521 Y125.3149 256.3389 L126.2788 255.1387 L126.0923 254.9443 L125.8936 254.7441 L124.4307 255.9399 L118.9092 261.5195 L118.2676 262.1689 L112 268.5024 L105.8188 262.2559 L105.0752 261.5044 L99.5698 255.9399 L98.1064 254.7441 L97.9082 254.9443 L97.7217 255.1387 L98.686 256.3389 L104.8037 262.5215 L111.8604 269.6523 Lf0 0 0 0.112609 k111.8682 269.645 m112.5176 269.1768 l112.5586 269.1768 112.7622 268.9941 113.0703 268.6938 C113.1479 268.6177 l114.5122 267.2388 119.1885 262.5142 Y125.2964 256.3423 L126.2686 255.147 L126.0815 254.9531 L125.8838 254.7529 L124.4248 255.9609 L118.9067 261.5381 L118.2646 262.1865 L112 268.5176 L105.8223 262.2744 L105.0791 261.5234 L99.5752 255.9609 L98.1162 254.7529 L97.9185 254.9531 L97.7319 255.147 L98.7041 256.3423 L104.812 262.5146 L111.8682 269.645 Lf0 0 0 0.108696 k111.8765 269.6377 m112.5229 269.1606 l112.5615 269.1606 112.7671 268.981 113.0732 268.6763 C113.1499 268.6006 l114.5278 267.207 119.1797 262.5073 119.1797 262.5078 C125.2783 256.3452 L126.2588 255.1553 L126.0713 254.9609 L125.874 254.7617 L124.4194 255.9824 L118.9038 261.5562 L118.2627 262.2046 L112 268.5332 L105.8252 262.2935 L105.083 261.543 L99.5806 255.9824 L98.126 254.7617 L97.9287 254.9609 L97.7422 255.1553 L98.7227 256.3452 L104.8203 262.5078 L111.8765 269.6377 Lf0 0 0 0.104783 k111.8848 269.6309 m112.5278 269.1445 l112.564 269.1445 112.7676 268.9619 113.0752 268.6587 C113.1523 268.5825 l114.5444 267.1758 119.1714 262.5005 Y125.2598 256.3486 L126.248 255.1631 L126.061 254.9697 L125.8643 254.771 L124.4141 256.0034 L118.9014 261.5742 L118.2607 262.2222 L112 268.5488 L105.8281 262.3115 L105.0864 261.562 L99.5859 256.0034 L98.1357 254.771 L97.9395 254.9697 L97.7524 255.1631 L98.7412 256.3486 L104.8291 262.5005 L111.8848 269.6309 Lf0 0 0 0.10087 k111.8931 269.6235 m112.5332 269.1289 l112.5669 269.1289 112.77 268.9468 113.0776 268.6411 C113.1538 268.5654 l114.5601 267.145 119.1631 262.4932 Y125.2412 256.3511 L126.2383 255.1714 L126.0503 254.978 L125.854 254.7798 L124.4087 256.0244 L118.8984 261.5928 L118.2588 262.2397 L112 268.564 L105.8315 262.3301 L105.0903 261.5811 L99.5918 256.0244 L98.1455 254.7798 L97.9497 254.978 L97.7627 255.1714 L98.7593 256.3511 L104.8379 262.4937 L111.8931 269.6235 Lf0 0 0 0.096957 k111.9014 269.6162 m112.5381 269.1128 l112.5693 269.1128 112.7705 268.9287 113.0796 268.6235 C113.1558 268.5474 l114.5757 267.1133 119.1543 262.4863 119.1543 262.4868 C125.2231 256.3545 L126.228 255.1797 L126.04 254.9863 L125.8438 254.7886 L124.4028 256.0454 L118.8955 261.6113 L118.2559 262.2573 L112 268.5801 L105.834 262.3486 L105.0938 261.6006 L99.5972 256.0454 L98.1558 254.7886 L97.96 254.9863 L97.7729 255.1797 L98.7773 256.3545 L104.8462 262.4868 L111.9014 269.6162 Lf0 0 0 0.093044 k111.9092 269.6094 m112.5439 269.0972 l112.5718 269.0972 112.772 268.9121 113.082 268.6055 C113.1582 268.5303 l114.5918 267.082 119.146 262.4795 119.146 262.48 C125.2051 256.3574 L126.2178 255.188 L126.0293 254.9946 L125.8345 254.7974 L124.3975 256.0664 L118.8931 261.6294 L118.2539 262.2754 L112 268.5952 L105.8374 262.3672 L105.0972 261.6196 L99.6025 256.0664 L98.1655 254.7974 L97.9707 254.9946 L97.7827 255.188 L98.7964 256.3574 L104.8545 262.48 L111.9092 269.6094 Lf0 0 0 0.089131 k111.918 269.6021 m112.5488 269.0811 l112.5742 269.0811 112.7705 268.8916 113.084 268.5874 C113.1602 268.5122 l114.6074 267.0503 119.1372 262.4727 119.1372 262.4731 C125.1865 256.3604 L126.2075 255.1958 L126.0195 255.0029 L125.8247 254.8062 L124.3921 256.0874 L118.8901 261.6475 L118.252 262.293 L112 268.6108 L105.8408 262.3862 L105.1006 261.6387 L99.6079 256.0874 L98.1758 254.8062 L97.981 255.0029 L97.7935 255.1958 L98.8145 256.3604 L104.8628 262.4731 L111.918 269.6021 Lf0 0 0 0.085217 k111.9258 269.5952 m112.5542 269.0654 l112.5771 269.0654 112.7749 268.8784 113.0869 268.5698 C113.1621 268.4951 l114.623 267.019 119.1294 262.4658 Y125.1685 256.3638 L126.1973 255.2041 L126.0093 255.0112 L125.8145 254.8149 L124.3867 256.1089 L118.8877 261.666 L118.2495 262.3105 L112 268.626 L105.8438 262.4048 L105.1045 261.6577 L99.6133 256.1089 L98.1855 254.8149 L97.9912 255.0112 L97.8037 255.2041 L98.8325 256.3638 L104.8711 262.4663 L111.9258 269.5952 Lf0 0 0 0.081304 k111.9346 269.5879 m112.5591 269.0493 l112.5796 269.0493 112.7769 268.8618 113.0889 268.5522 C113.1646 268.4775 l114.6392 266.9873 119.1206 262.459 Y125.1499 256.3667 L126.187 255.2124 L125.9985 255.019 L125.8047 254.8242 L124.3809 256.1299 L118.8848 261.6841 L118.2471 262.3281 L112 268.6416 L105.8467 262.4233 L105.1079 261.6772 L99.6191 256.1299 L98.1953 254.8242 L98.002 255.019 L97.8135 255.2124 L98.8511 256.3667 L104.8799 262.459 L111.9346 269.5879 Lf0 0 0 0.077391 k111.9429 269.5806 m112.5645 269.0337 l112.5825 269.0337 112.7798 268.8462 113.0913 268.5347 C113.166 268.46 l114.6548 266.9561 119.1118 262.4517 119.1118 262.4521 C125.1318 256.3691 L126.1768 255.2202 L125.9883 255.0278 L125.7944 254.833 L124.3755 256.1509 L118.8818 261.7021 L118.2451 262.3457 L112 268.6572 L105.8501 262.4419 L105.1118 261.6958 L99.6245 256.1509 L98.2056 254.833 L98.0122 255.0278 L97.8242 255.2202 L98.8691 256.3691 L104.8887 262.4521 L111.9429 269.5806 Lf0 0 0 0.073478 k111.9507 269.5732 m112.5698 269.0176 l112.585 269.0176 112.7817 268.8296 113.0933 268.5171 C113.1685 268.4424 l114.6709 266.9243 119.1035 262.4448 Y125.1133 256.3726 L126.1665 255.2285 L125.9775 255.0361 L125.7852 254.8418 L124.3701 256.1719 L118.8794 261.7207 L118.2432 262.3643 L112 268.6729 L105.853 262.4609 L105.1157 261.7153 L99.6304 256.1719 L98.2153 254.8418 L98.0225 255.0361 L97.834 255.2285 L98.8877 256.3726 L104.897 262.4453 L111.9507 269.5732 Lf0 0 0 0.069565 k111.959 269.5664 m112.5752 269.002 l112.5879 269.002 112.7847 268.8145 113.0957 268.4995 C113.1704 268.4248 l114.6865 266.8931 119.0952 262.438 Y125.0947 256.3755 L126.1563 255.2368 L125.9673 255.0444 L125.7749 254.8501 L124.3647 256.1924 L118.8765 261.7388 L118.2402 262.3818 L112 268.688 L105.8564 262.4795 L105.1191 261.7344 L99.6357 256.1924 L98.2246 254.8501 L98.0332 255.0444 L97.8442 255.2368 L98.9063 256.3755 L104.9053 262.4385 L111.959 269.5664 Lf0 0 0 0.065652 k111.9673 269.5591 m112.5801 268.9858 l112.5898 268.9858 112.7847 268.7964 113.0977 268.4819 C113.1724 268.4072 l114.7021 266.8613 119.0864 262.4307 119.0864 262.4312 C125.0767 256.3789 L126.1465 255.2446 L125.957 255.0527 L125.7651 254.8589 L124.3589 256.2134 L118.8735 261.7568 L118.2383 262.3994 L112 268.7036 L105.8589 262.4976 L105.123 261.7534 L99.6411 256.2134 L98.2349 254.8589 L98.0435 255.0527 L97.855 255.2446 L98.9243 256.3789 L104.9136 262.4312 L111.9673 269.5591 Lf0 0 0 0.061739 k111.9756 269.5522 m112.5854 268.9702 l112.5928 268.9702 112.7861 268.7793 113.1006 268.4634 C113.1748 268.3896 l114.7183 266.8301 119.0781 262.4238 Y125.0586 256.3818 L126.1362 255.2529 L125.9468 255.061 L125.7549 254.8677 L124.3535 256.2349 L118.8711 261.7754 L118.2363 262.417 L112 268.7188 L105.8623 262.5161 L105.126 261.7725 L99.6465 256.2349 L98.2446 254.8677 L98.0537 255.061 L97.8647 255.2529 L98.9424 256.3818 L104.9219 262.4243 L111.9756 269.5522 Lf0 0 0 0.057826 k111.9834 269.5444 m112.5908 268.9541 l112.5952 268.9541 112.7881 268.7627 113.1025 268.4458 C113.1763 268.3721 l114.7339 266.7983 119.0693 262.417 Y125.04 256.3843 L126.126 255.2612 L125.9365 255.0693 L125.7456 254.877 L124.3477 256.2559 L118.8682 261.7939 L118.2344 262.4351 L112 268.7349 L105.8657 262.5352 L105.1299 261.792 L99.6523 256.2559 L98.2544 254.877 L98.064 255.0693 L97.875 255.2612 L98.9609 256.3843 L104.9312 262.4175 L111.9834 269.5444 Lf0 0 0 0.053913 k111.9917 269.5371 m112.5962 268.9385 l112.5981 268.9385 112.7896 268.7461 113.105 268.4282 C113.1787 268.3545 l114.75 266.7666 119.0615 262.4102 Y125.022 256.3877 L126.1157 255.269 L125.9258 255.0776 L125.7354 254.8857 L124.3428 256.2769 L118.8657 261.8115 L118.2314 262.4526 L112 268.75 L105.8682 262.5537 L105.1333 261.8105 L99.6577 256.2769 L98.2646 254.8857 L98.0747 255.0776 L97.8853 255.269 L98.9795 256.3877 L104.9395 262.4106 L111.9917 269.5371 Lf0 0 0 0.05 k112 268.7656 m105.1372 261.8301 L98.2744 254.8945 L97.8955 255.2773 L104.9478 262.4038 L112 269.5303 L119.0527 262.4038 L126.1055 255.2773 L125.7256 254.8945 L118.8628 261.8301 L112 268.7656 LfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF