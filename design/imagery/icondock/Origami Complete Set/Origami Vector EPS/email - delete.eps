%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 14.0.0%%For: (Nick La) ()%%Title: (6-28.eps)%%CreationDate: 1/7/10 10:11 AM%%Canvassize: 16383%%BoundingBox: 144 48 176 80%%HiResBoundingBox: 144 48 176 80%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_Cropmarks: 144 48 176 80%AI3_TemplateBox: 160.5 63.5 160.5 63.5%AI3_TileBox: -146 -332 466 460%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 32 32%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 1%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: 122 85 24.71 1893 1050 26 0 0 18 96 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 4 4 4 4 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 128 8%%BeginData: 27574 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDD2FFA8A8A8FD15FFA8FD65FFA8527D537D527EA8FD0FFFA87D52%7D537D7DFD60FFA87D527D527D527D527DA8FD0DFF597D527D527D527D59%FD5EFFA87D597D527D597D527D597DA8FD0BFF7D7D597D527D597D527D7D%FD5CFFA87D527D527D527D527D527D527DA8FD09FF7D7D527D527D527D52%7D527D7DFD5AFFA87D537D527D7DA8FFFF7D7D527D537DA8FD07FF7D7D53%7D527D7DA87D7D537D527D7DFD58FFA87D527D527D52FD05FF527D527D52%7DA8FD05FF7D7D527D527D7DFFA8FFA87D527D527D7DFD56FFA87D527D59%7D59FD07FF597D597D527DA8FFFFFF7D7D527D597DA8FD05FFA87D527D59%7D7DFD54FFA87D527D527D52FD08FFA8527D527D527D7D7D527D527D527D%A8FFA8FFFFFFA8FFA87D527D527D7DFD52FFA87D527D537D53FD0BFF537D%537D527D537D527D537DA8FD09FFA87D527D537D7DFD50FFA87D527D527D%52AFFD04FFA8FFFFFFA8FFFFA8527D527D527D527D527D84FFA8FFA8FFA8%FFA8FFA8FFA87D527D527D59FD4EFFA87D597D527D7DFD06FFCA9AFD07FF%7D7D527D597D527DA8FD06FFCAA8FD05FFA87D597D527D7DFD4CFFA87D52%7D527D52FD06FFA0446F4BCFFD04FFA9FF7E7D527D5984A8FFFFFFA8FFFF%75446FA1FFA8FFA8FFA87D527D527D7DFD4AFFA87D537D527D7DFD06FFA1%4A6F4A6F6FFD12FF764A6F4A6FA7FFA9FFFFFFA87D537D527D7DFD48FFA8%7D527D527D52FD06FFA0446F4A75446F4BCFA8FFFFFFA8FFA8FFA8FFA8FF%A8FFA875446F6E6F446FA1FFA8FFA8FFA87D527D527D7DFD47FF7D527D59%7D59FD06FFA14A6F4ABBBB994A6F6FFD0EFF764A6F6FC1996F4A6FA1FD05%FFA87D527D597D7DFD44FFA87D527D527D52FD06FFA14A4B44BBBBC19999%4A4B4AFFFFFFA8FFFFFFA8FFFFFFA8764A4B6EBBBBBB926F4A6FA1FFA8FF%A8FFA87D527D527D7DFD43FFA8527D537D53FD06FFA14A6F4ABBBBC2BBC2%BB994A6F6FFD0AFF764A6F6FFD05BB996F4A6FA1FFFFFFA8FFA87D527D53%7D7DFD42FF527D527D52AFFD04FFA8A1444B449999BB99C199BB9999444B%4ACFA8FFA8FFA8FFA876444B6EBB99BB98BB99BB926F446FA1FFA8FFA8FF%A87D527D527DA8FD40FFA87D527D59A8FD05FFCA4A6F4AC2BBC2BBC2BBC2%BBC2BB994A6F6FFD06FF9A4A6F6EC1BBBBBBC1FD04BB996F4A6FA8FD05FF%A87D597D52A8FD41FF527D527D7DFD05FFA16F4A6F99C1BBBB99C1BBBB99%C1BB99446F4BCFA8FFFF75446F6EBB98BBBBBB98BBBBBB98BB6E4B44A1A8%FFA8FFA8A8527D527D7DFD40FFA87D537D52A8FD06FF756F4A75BBC2BBC1%BBC2BBC1BBC1BB994A6F6FFFFF764A6F6EFD0BBB6E6F4A75A8FFFFFFA8FF%A87D527D53A8FD41FF527D527D52FFFFFFA8FFFFFF6F6F446F99BB99BB99%BB99BB99BB9999446F4B75446F6EBB98BB98BB98BB98BB92BB6E4B446FA8%FFA8FFA8FFA87D527D527DA8FD41FFA8597D527D7DFD07FF756F4A99BBC1%BBC2BBC1BBC1BBC1BB994A6F4A6F6FBBBBC1FD08BB936F4A75A8FFA8FFFF%FFA87D597D527D7DFD42FFA87D527D527D52A8FD06FF754B446FBBBB99BB%BBBB99BBBBBB99994A4B6EBBBBBB98BBBBBB98BB98BB6E6F4A6FA8FFA8FF%A8FFA87D527D527D52FD45FF7D537D527D7DFD07FF756F4A99BBC1BBC1BB%BBBBC1FD04BB99FD0BBB936F4A75A8FFA8FFFFFFA87D537D527D7DFD46FF%A87D527D527D52A8A8FFFFFFA8FF6F4B446F99BB98BB99BB98BB99BB98BB%98BB98BB98BB92BB98BB6E6F446FA8FFA8FFA8FFA87D527D527D52FD49FF%7D527D597D59FD07FF756F4A75BBC1BBBBBBC1FD0EBB926F4A75A8FFFFFF%A8FFA87D527D597D59FD4BFF7D527D527D52FFFFFFA8FFFFFF6F6F4A6F99%BBBBBB98BBBBBB98BB99BB98BB98BB92BB6E4B446FA8FFA8FFA8FFA87D52%7D527D52FD4DFF7D527D537D7DFD07FF756F4A6FFD0CBBBABBBBBB6E6F4A%75A8FFFFFFA8FFFFA8527D537D53FD4EFFA87D527D527DA8FFA8FFA8FFA8%FF6F6F446F98BB98BB92BB98BB92BB98BB92BB6E4B446FA8FFA8FFA8FFA8%FF7D7D527D52AFFD0BFF7D7D597D527D597D527D597D527D597D527D597D%527D597D527D597D527D597D527D597D527D597D527D597D527D597D527D%597D527D597D527D597D527D597D527D597D527D597D52FD09FF756F4A99%FD0DBB6F4A75A8FFA8FFFFFFA8FFFF7D527D597D527D597D527DA8FFFFFF%A8527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D527DA8FFFFFFA8FFFFFFA8764A4B6EBB99%BB92BB98BB92BB98BB92BB4A4B4ACFA8FFA8FFA8FFA8FF7D7D527D527D52%7D527D527DA8FFFF527D537D527D537D527D537D527D537D527D537D527D%537D527D537D527D537D527D537D527D537D527D537D527D537D527D537D%527D537D527D537D527D537D527D537D527D537D527D53FD08FF764A6F6F%FD05BBBABBBBBB98BBBBBB98994A6F4BFFFFFFA8FFFFFFA884537D527D53%7D527D537D527DA8597D527D527D527D527D527D527D527D527D527D527D%527D527D527D527D527D527D527D527D527D527D527D527D527D527D527D%527D527D527D527D527D527D527D527D527D527D527D527EA8FFA8FFA8FF%A876444B6EBB98BB92BB98BB92BB92BB92BB92BB9293444B4ACAA8FFA8FF%A8FF7D7D527D527D527D527D527D527D7D527D597DA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFA8FFA8AFA8FFA8A87D7D597D52%7DA8FD06FF9A4A6F6EFD0BBB99BBBBBB99BBBB994A6F6FCFA8FFFFFFA8FF%7D7D527D597DA8A87D7D527D59527D527DA8FD19FFA9FFFFFFA9FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFAFFFA8FF7D%7D527D527D7EFFFFFFA8FFFF75446F6EBB92BB98BB92BB98BB92BB98BB92%BB92BB92BB9293446F4BA8A8FFA8FFA8A9527D527D527DA8A8527D527D7D%537D52FD3FFF7D7D537D527DA8FD06FF764A6F6EBBBBBBBABBBBBB98BBBB%BB98BBBBBB98BB99BB98BB99994A6F6FCAA8FFAFFFA8FF7D7D527D537DA8%7D537D52527D527DFD04FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FF7D7D527D527D7DFFA8FFA8FFA875446F6EBB92BB92%BB92BB92BB92BB929392BB92BB92BB92BB92BB9293446F4AA8A8FFA8FFA8%A8527D527D527D527D527D7D597D52FD3DFF7D7D527D597DA8FD06FF764A%6F6FFD09BB99BB936F4A99BBBB99BB99BB99BB99BB99994A6F6FFFFFFFA8%FFA9A8597D597D527D597D52527D527DFD14FFA9FFFFFFA9FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFAFFFA8FFAFFF7D%7D527D527DA8FFA8FFFFFFA8764A4B6EBB98BB92BB98BB92BB98BB6E6F4A%4B446F92BB92BB92BB92BB929992994A4B4ACAA8FFA8FFA8A8527D527D52%7D527D7D527D53FD3CFF7D527D537DA8FD06FF764A6F6FBBBABBBBBB98BB%BBBB98BB6F6F4A75756F4A6F99BB93BB99BB93BB99BB93994A6F4BCFA8FF%A8FFA8A8527D537D527D53527D527DFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8527D527D7DFFA8FFA8FFA876444B6E%BB92BB92BB92BB92BB92BB6E6F446FA8FF6F4B446F929992BB9299929992%999293444B4AA8A8FFA8FFA8A8527D527D527D7D527D59FD09FFA17C757C%757C757C757C757C757C757C757C757C757C757C757C757C757C757C757C%757C757C757C757C757C757C757C757C767D527D59A8FD05FFA74A6F6EFD%07BB99BBBBBB6E6F4A75A8FFFFFF756F4A6F99BB99BB99BB99BB93BB9993%4A6FA1FFA8FFA8FFA87D597D527D59527D527DA8FD08FF754A7550754A75%50754A7550754A7550754A7550754A7550754A7550754A7550754A755075%4A7550754A7550754A7550754A75527D527D7DFFA8FFFFFFA16F4A6F92BB%98BB92BB98BB92BB6E4B446FA8FFA8FFA8FF6F6F4A6F92BB929992BB9299%92994A4B44A7A8FFA8FFA8A8527D527D527D7D537D52A8FD08FF517575A0%7BA07BA07BA07BA07BA07BA07BA07BA07B9F7BA07B9F7BA07B9F759F7B9F%759F7B9F759F7B9F759F7B9F759F7B9F757D537D527DA8FD05FF7C6F4A6F%92BBBBBB98BB99BB6E6F4A75A8FFFFFFA8FFFFFF756F4A6F93BB99BB93BB%99994A6F4AA1A8FFA8FFA8A87D7D527D537D52527D527D52FFFFFFA8FFFF%FFA8754A757BCEC8C9A6C9C8C9A6C9FD0AC8C7C8C8C8C7C8C7C8C7C8C7C8%C1C8C7C7C1C7C7C7C1C7C7C7C1C7C1C77C7D527D527DA8FFA8FFA8FF766F%446F92BB92BB92BB6E4B446FA8FFA8FFA8FFA8FFA8FF6F6F446F92999299%9299444B44A0A8FFA8FFA8A8527D527D527D527D7D597D527DA8FD07FFA7%75517575C9C8CEC8CEC8CEC8CEC8CEC8CDC8CEC8C8C8CDC8C8C8CDC8C8C7%C8C7C8C7C8C7C8C7C8C7C8C7C8FD08C77D7D527D597DA8FD05FFA06F4A6F%99BB99BB6F6F4A75A8FFA8FFFFFFA8FFFFFFA8FF756F4A7599BB93994A6F%4AA1A8FFA8FFA8A8597D597D527D597D52527D527D527DA8FD05FFA9FFA8%754A7551A0C8CEC8C8C8C9FD0AC8C7C8C7C8C7C8C7C8C7C8C7C7C7C8C7C7%C1C7C7C7C1C7C7C7C1C7C7C7C0C8527D527D527DA8FFA8FFA8FF764B446F%92BB6E6F4A6FA8FFA8FFA8FFA8FFA8FFA8FFA8FF754B446F9293446F4AA0%A8FFA8FFA8A8527D527D527D527D527D7D527D537D527D7DFD08FFA15175%519FC8CEC8CEC8CEC8C8C8CDFD06C8C7C8C8C8C7C8C7C8C7C8C7C8C7C8FD%0EC7C1C87D7D527D537DA8FFFFFFA9FFA06F4A6F6F6F4A75A8FFA8FFFFFF%A8FFFFFFA8FFAFFFA8FF756F4A6F4A6F4AA1A8FFA8FFA8A8527D537D527D%537D527D53527D527D527D527D7DFFA8FFFFFFA8FFFFA851754A759FFD07%C8C7C8C7C8C7C8C7C8C7C8C7C8C1C8C7C7C1C7C7C7C1C7C1C7C1C7C1C7C0%C7C0C7C0C7C0C7C0C7527D527D527DA8FFA8FFA8FF764B446F446FA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF6F4B446F44A0A8FFA8FFA8A8527D52%7D527D527D527D527D7D527D597D527D597D7DFD09FF7C7551757BCDC8CD%C8C8C8CDC8C8C8CDC8C8C7C8C7C8C7C8C7C8C7C8C7C7C7C8FD11C7C87C7D%597D527DA8FD05FF7C6F4A75A8FFFFFFA8FFFFA87D7D597D7DFFFFFFA8FF%A9FF756F4AA1A8FFA8FFA8FF7D7D527D597D527D597D527D59527D527D7D%7D527D527D52A8FFFFA8FFFFFFA8FFA1754A7575FD05C8C7C8C7C8C7C8C7%C8C7C8FD06C7C1C7C7C7C1C7C7C7C0C7C1C7C0C7C0C7C0C7C0C7C0C7C0C7%527D527D527DA8FFA8FFA8FFA19AA8FFA8FFA8FFA87D527D527D527D52A8%A8FFA8FFA8FF76A7A8FFA8FFA8A8527D527D527D527D5284527D527D7D53%7D52FFA87D527D537D52A8FD08FFCF7C5075759FFD04C8C7C8C8C8C7C8C7%C8C7C8C7C8C7C8FD0EC7C1C7C7C7C1C7C7C7C1C7C7C8527D537D527DA8FF%A8FFFFFFA8FFFFFFA8FFA87D527D537D527D537D52FFA8FFA8FFA8FFA8FF%A8FFA8A87D7D527D537D527D53A8A87D537D52527D527DA8FFA87D527D52%7D527DA8FFA8FFA8FFA8FFA8A14A754A759FC8C7C8C7C8C7C7C1C8C7C7C1%C7C7C7C1C7C1C7C1C7C1C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0%9F527D527D527DA8FFA8FFA8FFA8FFA8FFA87D527D527D527D527D527D52%A8A8FFA8FFA8FFA8FFA8A8527D527D527D527D52A8A8FF527D527D7D597D%52FFFFFFA87D597D527D597DA8FD08FFCF757551759FC8C7C8C7C8C7C8C7%C8C7C8FD16C7C1C7C7C7C1C7C1C7C1C87D7D527D597DA8FFFFFFA8FFFFFF%A87D597D527D7D7D7C7D597D527D7DA8A8FFA8FFA8FFA8A8597D597D527D%597D7DFD04FF7D597D52527D527DFD04FFA8A8527D527D527DA8FFFFFFA8%FFFFFFA8FF7C754A7575C7C7C8FD06C7C1C7C7C7C1C7C7C7C0C7C1C7C0C7%C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C8527D527D527DA8FFA8FF%A8FFA87D527D527D52C1C1C19F7D527D527D52A8A8FFA8FFA8A8527D527D%527D527D7DFFA8FFA8FF527D527D7D527D53FD06FFA8537D527D537D7EFD%09FFA875507575C7C7C8FD12C7C1C7C7C7C1C7C7C7C1C7C1C7C1C7C1C7C1%C7C1C7C1C87D7D527D537DA8FFFFFFA87D537D527D7CC2C1C79F75517D53%7D527D7DA8A8FFA8A8527D537D527D537D7DFFFFFFA8FFFF7D527D53527D%527DFFFFA8FFFFFFA8A8527D527D527D7DFFA8FFA8FFA8FFA8FFA87C4A75%4A9FC1C7C7C7C1C7C1C7C0C7C1C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7%C0C7C0C7C0C7C0C7C0C7C0C19EC1527D527D527D7DA8A87D527D527D52C1%C0C174754A75757D527D527D527E7DA8527D527D527D527DA8FFA8FFA8FF%A8FF527D527D7D527D59FD09FF527D597D527D7DFD0AFFA77575517BC1FD%15C7C1C7C7C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C8767D597D527D597D%527D597D76C8C1C175755175A1FFA87D527D597D527D597D527D597D527D%A8FD08FF7D527D59527D527DFD06FFA9FFFF75527D527D527D52A8A8FFAF%FFA8FFA8FFA8FF75754A759FC7C1C7C7C7C0C7C0C7C0C7C0C7C0C7C0C7C0%C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C1C0C7C0C1527D527D527D52%7D527D529FC09F50754A7BA8FFA8FFA87D527D527D527D527D527D52764A%FFA8FFA8FFA8FFA8FF527D527D7D537D52FD09FF51757C7D537D527D53A8%FD0AFF7C75507575FD05C7C1C7C7C7C1C7C7C7C1C7C7C7C1C7C1C7C1C7C1%C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C2527D537D527D537D52C8C19F50%7575A1A8FFA8FFA8FFA87D527D537D527D537D52A65175A8FFFFFFA8FFFF%FFA87D537D52527D527DA8FFFFFFA8FFFFFFA8754AC8A07D527D527D527D%A8FFA8FFA8FFA8FFA8FFA7754A75509FC0C7C0C7C0C7C0C7C0C7C0C7C0C7%C0C7C0C7C0C7C0C7C0C79EC7C0C19EC7C0C19EC1C0C19EC1C0C1767D527D%527D769F98754A7551A8A8FFA8FFA8FFA8FFA87D527D527D527D52A0C075%4AFFA8FFA8FFA8FFA8FF527D527D7D597D52FD09FF5175C8CEA67D527D59%7D527DFD0BFFA05175519FFD06C7C1C7C7C7C1C7C7C7C1C7C1C7C1C7C1C7%C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C79FA07CA09FC7757551757CFF%A9FFA8FFA8FFA8FFA8FF7D7D597D527D7CC8C1C75175FD08FFA87D597D52%527D527DA9FFFFFFA9FFFFFFA87550FD04C87D527D527D527DA8FFA8FFA8%FFA8FFA8FFA8A751754A759FC7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0%C7C0C7C0C7C0C1C0C7C0C1C0C7C0C1C0C1C0C1C0C1C1C1C0C174754A75A1%FFA8FFA8FFA8FFA8FFA8A8527D527D527D76C7C0C7C07550FFA8FFA8FFA8%FFA8FF527D527D7D527D53FD09FF5075C8C8C8CEC8A7527D537D527DA8FF%A9FFFFFFA8FFFFFFA8FF757550759FC7C1C7C7C7C1C7C1C7C1C7C1C7C1C7%C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C1C1C7C19F5075517C%A8FFA8FFA8FFA8FFA8FFA8A8527D537D527D7CC7C1C7C7C75075FFFFA8FF%FFFFA8FFFF7D527D53527D527DFFFFA8FFFFFFA8FFFF754AFD06C8A7527D%527D527D7DFFA8FFA8FFA8FFA8FFA8FF7C754A7574C7C0C7C0C7C0C7C0C7%C0C7C0C19EC7C0C19EC7C0C19EC1C0C19EC1C0C19EC1C0C19EC1C0C19E75%4A754AA1A8FFA8FFA8FFA8FFA8FFA87E527D527D527D9FC7C0C7C0C7C075%4AFFA8FFA8FFA8FFA8FF527D527D7D527D59FD09FF5175C8CDC8CEC8CDC8%C97D7D527D597D7DFD0BFFA87C517551C1C7C7C1C7C1C7C1C7C1C7C1C7C1%C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C79F75517575CFA9FFA8%FFA8FFA8FFA8FFA87E597D527D597D9FC7C7C7C1C7C7C75175FFFFA8FFFF%FFA8FFFF7D527D59527D527DFFFFA8FFFFFFA8FFFF754AFD09C87C7D527D%527D52A8A8FFA8FFA8FFA8FFA8FFA8A050754A9FC1C7C0C7C0C7C0C7C0C1%C0C7C0C1C0C7C0C1C0C7C0C1C0C1C0C1C0C1C1C1C0C174754A757CFFA8FF%A8FFA8FFA8FFA8FFA87D527D527D527DC1C7C0C7C0C7C0C7C0754AFFA8FF%A8FFA8FFA8FF527D527D7D537D52FD09FF5175C8CDC8C8C8CDFD04C87C7D%527D537D53A8FFFFA8FFFFFFA8FFFFFFA8CA757550759FC7C1C7C1C7C1C7%C1C7C1C7C1C7C1C7C1C7C1C7C1C1C1C7C1C1C1C7C1C175755175A7FFA8FF%A8FFA8FFA8FFA8FFA87D537D527D53A0C1C7C7C7C1C7C1C7C1C75175A8FF%FFFFA8FFFFFFA87D537D52527D527DA8FFFFFFA8FFFFFFA8754AC8C7C8C8%C8C7C8C7C8C7C8A07D527D527D52A8A8FFA8FFA8FFA8FFA8FFA8CF76754A%7574C19EC7C0C19EC7C0C19EC1C0C19EC1C0C19EC1C0C19EC1C0C19E9F4A%754A7CA8FFA8FFA8FFA8FFA8FFA8FF7D7D527D527D52A0C0C7C0C7C0C7C0%C7C0C7C0754AFFA8FFA8FFA8FFA8FF527D527D7D597D52FD09FF5175C8CD%C8C8C8CDC8C8C8CDC8C8A67D597D527D597EA8FD07FFA8FFFFFFA1755175%75C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C19F7B517551A7%A9FFA8FFA8FFA8FFA8FFA8FF7D7D527D597D7CC8C7C7C1C7C7C7C1C7C7C7%C1C75175A8FFFFFFA8FFFFFFA87D597D52527D527DA8FFFFFFA8FFFFFFA8%7550FD05C8C7C8C7C8C7C8C7C8A07D527D527D527DA8FFA8FFA8FFA8FFA8%FFA8FFA87C50754A9FC0C1C0C7C0C1C0C7C0C1C0C1C1C1C0C1C1C1C0C198%754A7575A8A8FFA8FFA8FFA8FFA8FFA8A8537D527D527D7CC7C0C7C0C7C0%C7C0C7C0C7C0C7C07550FFA8FFA8FFA8FFA8FF527D527D7D527D53FD09FF%5075FD0AC8C7C8C8C8C7A7537D527D537DA8FFFFFFA8FFFFFFA8FFFFFFA8%A17575509FC1C7C1C7C1C7C1C7C1C1C1C7C1C1C1C7C1C1757551757CFFA8%FFA8FFA8FFA8FFA8FFA8A87D7D527D537D7CC7C7C7C1C7C1C7C1C7C1C7C1%C7C1C75075FFFFA8FFFFFFA8FFFF7D527D53527D527DFFFFA8FFA8FFA8FF%A8754AC8C7C8C7C8C7C8C7C8C7C8C7C8C7C8C7A6527D527D527D7DFFA8FF%A8FFA8FFA8FFA8FFA8A851754A7598C19EC1C0C19EC1C0C19EC1C0C19E9F%50754A75A1FFA8FFA8FFA8FFA8FFA8FFA8A8527D527D527D7CC7C0C7C0C7%C0C7C0C7C0C7C0C7C0C7C0754AFFA8FFA8FFA8FFA8FF527D527D7D527D59%FD09FF5175C8C8C8CDC8C8C8CDC8C8C7C8C8C8C7C8C7C87C7D597D527D7D%FFA8FFFFFFA8FFFFFFA8FFFFFF7C75517575C7C1C7C1C7C1C7C1C7C1C1C1%9F517551A1A8FFA8FFA8FFA8FFA8FFA8FFA8A8527D597D527DA0C7C1C7C7%C7C1C7C1C7C1C7C1C7C1C7C1C75175FFFFA8FFFFFFA8FFFF7D527D59527D%527DFFFFA8FFFFFFA8FFFF754AC8C7C8C7C8C7C8C7C8C7C8C7C8C7C8C7C8%C7C8767D527D527D7DA8A8FFA8FFA8FFA8FFA8FFA8FFA175507550C1C1C1%C0C1C1C1C0C19F754A7551A7A8FFA8FFA8FFA8FFA8FFA8FFA87D527D527D%527D9FC7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0754AFFA8FFA8FFA8FF%A8FF527D527D7D537D52FD09FF5175C7C8C8C8C7C8C8C8C7C8C7C8C7C8C7%C8C7C8C7C87C7D537D527D7DA8A8FFFFFFA8FFFFFFA8FFAFFFA87C517550%9FC1C1C1C7C1C17575517575FFA8FFA8FFA8FFA8FFA8FFA8FFA87D527D53%7D52A1C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C75175A8FFFFFFA8%FFFFFFA87D537D52527D527DA8FFA8FFA8FFA8FFA8754AC8C7C8C7C8C7C8%C7C8C7C8C7C7C1C8C7C7C1C7C7C77C7D527D527D52A8A8FFA8FFA8FFA8FF%A8FFA8FFA8A750754A759EC19EC174754A757CFFA8FFA8FFA8FFA8FFA8FF%A8AF7D7D527D527D52A0C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C1%9E754AFFA8FFA8FFA8FFA8FF527D527D7D597D52FD09FF5175C7CDC8C8C7%C8C7C8C7C8C7C8C7C8C7C8C7C8C7C8C7C8A07D527D597D52A8FFFFA8FFFF%FFA8FFFFFFA8FFFFCA75755175757B7575517CA8FFA8FFA8FFA8FFA8FFA8%FFA8FF7D7D597D527D7DA6C1C7C7C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1%C7C1C75175A8FFFFFFA8FFFFFFA87D597D52527D527DA8FFFFFFA8FFFFFF%A87550C8C7C8C7C8C7C8C7C8C7C8C7C7C7C8FD08C79F7D527D527D527DA8%FFA8FFA8FFA8FFA8FFA8FFA8FF767550754A75507CA8FFA8FFA8FFA8FFA8%FFA8FFA8FF7D7D527D527D52C8C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0%C7C0C7C0C7C07550FFA8FFA8FFA8FFA8FF527D527D7D527D53FD09FF5075%C8C8C7C8C7C8C7C8C7C8C7C8C7C8C7C8C7C8C7C8C7C7C7C87C7D527D537D%527DA8FFA8FFAFFFA8FFA8FFA8FFA8FFA8A07CA07CCAA8FFA8FFA8FFA8FF%A8FFA8FFA8A8527D537D527D53A1C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7%C1C7C1C7C1C7C1C75075FFFFA8FFFFFFA8FFFF7D527D53527D527DA8FFA8%FFA8FFA8FFA8754AC8C7C8C7C8C7C7C1C8C7C7C1C7C7C7C1C7C7C7C1C7C7%C77C7D527D527D527D527D7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8AFA8A8527D527D527D527D527CC0C7C0C7C0C7C0%C7C0C7C0C7C0C7C0C19EC7C0C19EC7C0754AFFA8FFA8FFA8FFA8FF527D52%7D7D527D59FD09FF5175C7C8C7C8C7C8C7C8C7C8C7C8C7C8C7C8C7C8C7C8%C7C77C7D597D527D597D527D597D7DFFFFFFA8FFA9FFA8FFA9FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8A8597D527D597D527D597D52A7C1C7C1C7%C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C75175FFFFA8FFFFFFA8FFFF7D%527D59527D527DFFFFA8FFFFFFA8FFFF754AC8C7C8C7C8C7C7C7C8FD06C7%C1C7C7C7C1C7A07D527D527D7DFF527D527D527D7DFFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87D527D527D527DA8A8527D527D%52A0C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C1C0C7C0754AFFA8FFA8FF%A8FFA8FF527D527D7D537D52FD09FF5175C7C8C7C8C7C8C7C8C7C8C7C8C7%C8FD06C7A07D537D527D7DFFFFFF7D7D527D537D7DAFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA87D537D527D537DA8FFFFA8527D537D%52A6C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C75175A8FFAFFFA8FF%AFFFA87D537D52527D527DA8FFA8FFA8FFA8FFA8754AC7C1C8C7C7C1C7C7%C7C1C7C7C7C1C7C7C7C1C7A07D527D527D7DFFFFFFA8FF7D7D527D527D52%A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFA8FF7D7D527D527D527EA8%FFA8FFA87D527D527D52A0C0C7C0C7C0C19EC7C0C19EC7C0C19EC7C0C19E%754AFFA8FFA8FFA8FFA8FF527D527D7D597D52FD09FF5175C7C8C7C8C7C8%C7C8C7C8C7C8C7C8C7C7C7C8A57D527D597D7DFD07FFA87D597D527D59A8%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7D527D597D52A8FD07FFA8%597D527D7DC8C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C75175A8FFFFFF%A8FFFFFFA87D597D52527D527DA8FFFFFFA8FFFFFFA87550C7C7C8FD06C7%C1C7C7C7C1C7C7C79F7D527D527D7DFD09FFA87D527D527D527DA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8A87D7D527D527D52A8A8FFAFFFA8FFA8FFA87D%527D527D52C1C0C7C0C7C0C7C0C1C0C7C0C1C0C7C0C1C07550FFA8FFA8FF%A8FFA8FF527D527D7D527D53FD09FF5075C7C8C7C8C7C7C7C8FD08C7A57D%527D537D7DFD0BFFA77D537D527D537DA8FFA8FFA8FFA8FFA8FFA8FFA8A8%7D7D527D537D52A8FD0AFFA87D537D527D7DC8C1C7C1C7C1C7C1C7C1C7C1%C7C1C7C1C75075AFFFA8FFAFFFA8FFA87D527D53527D527DA8FFA8FFA8FF%A8FFA8754AC7C7C7C1C7C7C7C1C7C7C7C1C7C1C79F7D527D527D7DFFA8FF%FFFFA8FFFFFFA8FFA7754A7C527D527D527D7DFFA8FFA8FFA8AFA8FFA8A8%527D527D527D52754AA8A8FFA8FFA8FFA8FFA8FFA87D527D527D52C19EC7%C0C19EC7C0C19EC7C0C19EC1C0754AFFA8FFA8FFA8FFA8FF527D527D7D52%7D59FD09FF5175C7C8C7C8C7C7C7C8C7C7C7C8C7C7C77D597D527D7DFD0B%FFA7755175A6A7527D597D527D7DA8A8FFA8FFA8A87D7D527D597D527DA0%C8517575A7FD0AFFA87D527D597D7CC7C1C7C1C7C1C7C1C7C1C7C1C7C1C7%5175FFFFA8FFFFFFA8FFFF7D527D59527D527DFFFFA8FFAFFFA8FFAF754A%C7C7C7C1C7C7C7C1C7C7C7C1C7C17D527D527D52FD07FFA9FFFFFF7C7550%75A0CEC8A7527D527D527D527D527D527D527D527D527D527DA0C8C7C14A%7550A1A8FFA8FFA8FFA8FFA8FFA87D527D527D76C7C0C1C0C7C0C1C0C7C0%C1C0C7C0754AFFA8FFA8FFA8FFA8FF527D527D7D537D52FD09FF5175C7C8%FD0BC77D537D527D7DFD0BFFA1755075A6CEC8CEC8C97C7D537D527D537D%527D537D527D537D527DA6C8C7C8C7C7517551A7FD04FFA9FFFFFFA8FFA8%7D527D537D7CC7C1C7C1C7C1C7C1C7C1C7C1C75175A8FFA8FFA8FFA8FFA8%7D537D52527D527DA8FFA8FFA8FFA8FFA8754AC7C1C7C7C7C1C7C1C7C1C7%C17C527D527D52FFFFFFA8FFFFFFA8FFFFFF7C754A759FC9FD06C8A07D52%7D527D527D527D527D527D52A0C1C7C7C7C1C7C19F50754AA1A8FFA8FFA8%FFA8FFA8FFA87D527D527D76C7C0C19EC1C0C19EC1C0C19E754AFFA8FFA8%FFA8FFA8FF527D527D7D597D52FD09FF5175C7C8FD09C7A1527D597D52A8%FD0AFFA1755175C8CEC8CEC8CEC8CDC8CDC8C97C7D597D527D597D7CA7A0%C8C7C8C7C7C7C8FD04C7757551A7FD0AFFA87D597D527D7CC7C1C7C1C7C1%C7C1C7C1C75175A8FFFFFFA8FFFFFFA87D597D52527D527DA8FFAFFFA8FF%AFFFA87550C7C1C7C7C7C1C7C7C7C1A1527D527D52A8A9FFFFFFA9FFFFFF%A8FF75754A75FD0AC8C7C8C8C8C7C8A0A6A0C8A5C7C7C8C7C7C1C7C7C7C1%C7C7C7C0C774754A7CA8FFA8FFA8FFA8FFA8FF7D7D527D527D7CC1C0C7C0%C1C0C7C0C1C07550FFA8FFA8FFA8FFA8FF527D527D7D527D53FD09FF5075%FD09C7A6527D537D52A8FD0AFF75755175C8CEC8C8C8CDC8C8C8CDFD06C8%C7C8C7C8C7C8C7C8C7C8FD0CC7757550A0FFFFA8FFFFFFA8FFFFFFA87D53%7D527DA0C7C1C7C1C7C1C7C1C75075A8FFA8FFA8FFA8FFA87D527D53527D%527DA8FFA8FFA8FFA8FFA8754AC7C1C7C1C7C1C7C0A6527D527D5284A8FF%FFFFA8FFFFFFA8FF75754A75A6FD09C8C7C8C7C8C7C8C7C8C1C8C7C7C1C7%C7C7C1C7C1C7C0C7C1C7C0C7C0C7C0C774754A7CA8FFA8FFA8FFA8FFA8FF%7D7D527D527D9FC19EC1C0C19EC1C0754AFFA8FFA8FFA8FFA8FF527D527D%7D527D59FD09FF5175FD07C7A6597D527D59A8FD0AFF7C7551A0C8CEC8CE%C8CDC8CDC8C8C8CDC8C8C7C8C7C8C7C8C7C8C7C8FD12C77575517CFD0AFF%7D7D527D597DA0C7C1C7C1C7C1C75175A9FFA8FFA9FFA8FFA97D527D5952%7D527DA8FFA8FFA8FFA8FFA8754AC7C7C7C1C7C7A6527D527D52A8FFFFA9%FFFFFFA8FFFFFF7575507BFD08C8C7C8C7C8C7C8C7C8C7C8FD06C7C1C7C7%C7C1C7C7C7C0C7C0C7C0C7C0C7C0C7C0C77475507CA8FFA8FFA8FFA8FFA8%FF7D7D527D527D9FC1C0C1C0C1C0754AFFA8FFA8FFA8FFA8FF527D527D7D%537D52FD09FF5175FD05C7C87D7D527D537DFD0AFF7575509FC8C8C8CDC8%C8C8CDC8C8C7C8C8C8C7C8C7C8C7C8C7C7C7C8FD0AC7C1C7C7C7C1C7C7C7%C1C7C7C775755175A8FFFFFFA8FFFFFFA8FF7D7D527D537D9FC7C1C1C1C7%5175A8FFA8FFA8FFA8FFA87D537D52527D527DA8FFA8FFA8FFA8FFA8754A%C7C0C7C1C7527D527D527DA8FFA8FFFFFFA8FFFFCF51754A7BFD04C8C7C8%C8C8C7C8C7C8C7C8C7C7C1C8C7C7C1C7C7C7C1C7C1C7C0C7C0C7C0C7C0C7%C0C7C0C7C0C7C0C7C0C7C0C774754A75A8FFA8FFA8FFA8FFA8FF7D7D527D%527D9FC1C0C19E754AFFA8FFA8FFA8FFA8FF527D527D7D597D52FD09FF51%75C7C7C7C87C7D597D527DFD0AFF757551A0C8CEC8C8C8CDC8C8C8CDC8C8%C7C8C7C8C7C8C7C8C7C8FD12C7C1C7C7C7C1C7C1C7C1C77575517CA8FFA8%FFFFFFA8FFFFFF7D7D597D527D9FC7C1C75175A8FFA9FFA8FFA8FFA87D59%7D52527D527DA8FFA8FFA8FFA8FFA87550C7C0C77C7D527D527DA8FFFFFF%A8FFFFFFA8FF75754AA0FD06C8C7C8C7C8C7C8C7C8C7C8FD06C7C1C7C7C7%C1C7C7C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C799754A75%A8FFA8FFA8FFA8FFA8FF597D527D527D9FC1C07550FFA8FFA8FFA8FFA8FF%527D527D7D527D53FD05FFA9FFFFFF5075C7C77C7D537D527DA8FD08FFCA%517551A0C8CDFD06C8C7C8C8C8C7C8C7C8C7C8FD0EC7C1C7C7C7C1C7C7C7%C1C7C1C7C1C7C1C7C1C7C1C7C1C79F755075A7FFA8FFFFFFA8FFFFA8527D%537D527DC1C15075A8FFA8FFA8FFA8FFA87D527D53527D527DA8FFA8FFA8%FFA8FFA8754AC7767D527D527DA8FFFFFFA8FFA8FFA8A850754AA0C8C8C7%C8C7C8C7C8C7C8C7C8C7C7C1C7C7C7C1C7C7C7C1C7C1C7C0C7C0C7C0C7C0%C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C79EC7C0C19EC774754A75A7FFA8%FFA8FFA8FFA8A8527D527D527D9F754AFFA8FFA8FFA8FFA8FF527D527D7D%527D59FD09FF51757C7D527D597DA8FD08FFCF757551A0C8C8C8CDC8C8C8%CDC8C8C7C8C7C8C7C8C7C8C7C8FD12C7C1C7C7C7C1C7C1C7C1C7C1C7C1C7%C1C7C1C7C1C799755175A7FFFFFFA8FFFFFFA8FF7D7D527D597D5175A8FF%A8FFA8FFA8FFA87D527D59527D527DA8FFA8FFA8FFA8FFA875517D527D52%7DA8FFA8FFFFFFA8FFFFA8507550A6FD04C8C7C8C7C8C7C8C7C8C7C8FD06%C7C1C7C7C7C1C7C1C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0%C7C0C7C0C7C0C1C0C7C0C19E755075A1FFA8FFA8FFA8FFA8A8527D527D52%764AFFA8FFA8FFA8FFA8FF527D527D7D537D52FFFFFFA9FFFFFFA8FF527D%527D537DA8FD08FFA7757551FD07C8C7C8C7C8C7C8C7C8C7C8FD0EC7C1C7%C7C7C1C7C7C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7%9F755175A1FFFFFFA8FFAFFFA8A8537D527D537CA8FFA8FFA8FFA8FFA87D%537D52527D527DA8FFA8FFA8FFA8FF7D7D527D527DA8FFA8FFA8FFA8FFA8%A14A7550A6C7C8C7C8C7C8C7C8C7C8C7C7C1C7C7C7C1C7C7C7C1C7C1C7C0%C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C19EC7C0C19EC7C0%C19EC1C0C19EC1C0C198754A757CFFA8FFA8FFA8FFA8A8527D527D527DA8%FFA8FFA8FFA8FF527D527D7D597D52FD07FFA87D597D527DA8FD08FFA751%7575C8C8CDC8C8C7C8C8C8C7C8C7C8C7C8C7C7C7C8FD12C7C1C7C7C7C1C7%C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C7C1C79F755175A1FF%A8FFFFFFA8FFFFA8527D597D52A8A8FFA8FFA8FFA87D597D52527D527DA8%FFA8FFA8FFA87D527D527D7DFFFFFFA8FFFFFFA8A750754A7B759F759F75%9F759F759F759F759F759F759F749F759F749F759F749F759F749F759F74%9F749F749F749F749F749F749F749F749F749F749F749F749F749F749F74%99749F74754A757CFFA8FFA8FFA8FFA87D527D527D52A8A8FFA8FFA8FF52%7D527D7D527D53FFA8FFFFFFA87D537D527D7DFD09FF5175517550755175%507551755075517550755175507551755075517550755175507551755075%517550755175507551755075517550755175507551755075517550755175%50755175507551755075AFFFA8FFA8FFA8FFA884527D537D52A8A8FFA8FF%A87D527D53527D527DA8FFA8FFA87D527D527D7DFFA8FFA8FFA8FFA8FFA8%7C5175757551757575517575755175757551757575517575755175757551%757575517575755175757551757575517575755175757551757575517575%7551757575517575755175757551FD0475FFA8FFA8FFA8FFA8FFA87D527D%527D52A8A8AFA8FF527D527D7D527D59FFFFFFA87D527D597D7DFD3BFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFA9FFA8FFA9FFA87D597D527D7DA8A8FFA87D527D59527D527DA8FF%A87D527D527D7DFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFAFFFA8FF%AFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87D527D527D52A8A8FF527D%527D7D537D52FFA87D527D537D7DFD1FFFA9FFFFFFA9FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFAFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%7D537D527D7DA8A87D537D52527D527DA87D527D527D52FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA87D527D527D59A8527D527D7D597D527D597D527D7D%FD39FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFA9FFA8FFA9FFA8FFA8FFA8FFA8FFA8FFA87D527D597D7D%7D597D52527D527D527D527D52FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%AFFFA8FFAFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA87D527D527D527D527D7D527D537D527D7DFD1DFFA9FFFFFFA9FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFAFFFA8FFAFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87D527D537D527D53527D527D527D%52A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFA8FF7D7D527D527D%527DA8527D597D527D597D527D597D527D597D527D597D527D597D527D59%7D527D597D527D597D527D597D527D597D527D597D527D597D527D597D52%7D597D527D597D527D597D527D597D527D597D527D597D527D597D527D59%7D527D597D527D597D527D597D527D597D527D597D527D597D527D597D52%7D597D527D597D527D7DA87D527D527D527D527D527D527D527D527D527D%527D527D527D527D527D527D527D527D527D527D527D527D527D527D527D%527D527D527D527D527D527D527D527D527D527D527D527D527D527D527D%527D527D527D527D527D527D527D527D527D527D527D527D527D527D527D%527D527D527D527D527D527D527D527D52FFFFA87D527D537D527D537D52%7D537D527D537D527D537D527D537D527D537D527D537D527D537D527D53%7D527D537D527D537D527D537D527D537D527D537D527D537D527D537D52%7D537D527D537D527D537D527D537D527D537D527D537D527D537D527D53%7D527D537D527D537D527D537D527D537D527D537D527D59FD04FFA87D52%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%FFFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
userdict /lv1Fix true putuserdict /_contoneDevice true put%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI5_End_NonPrinting--10 Bn%AI5_BeginGradient: (Unnamed gradient 10)(Unnamed gradient 10) 0 3 Bd[0.007813<131314141515161617181819191A1A1B1B1C1C1D1D1E1E1F1F20202121222223232424252526262727282829292A2A2B2B2C2C2D2D2E2E2F2F303031313232333334343535363737383839393A3A3B3B3C3C3D3D3E3E3F3F40404141424243434444454546464747484849494A4A4B4B4C4C4D4D4E4E4F4F505051515252535354555556565757585859595A5A5B5B5C5C5D><6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFD>01 %_Br<0000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101020202020202020202020202020202020202020202020202020202020202020202020202><333332323232313131313130303030302F2F2F2F2E2E2E2E2E2D2D2D2D2C2C2C2C2C2B2B2B2B2A2A2A2A2A2929292928282828282727272726262626262525252525242424242323232323222222222121212121202020201F1F1F1F1F1E1E1E1E1D1D1D1D1D1C1C1C1C1B1B1B1B1B1A1A1A1A1A191919191818181818171717171616161616151515151414141414131313><FDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C>01 %_Br[0.007813 0.363281 0.992188 0 1 50 74.5455 %_BS%_0.007813 0.363281 0.992188 0 1 50 74.5455 Bs0.007813 0.074219 0.421875 0 1 50 42.4242 %_BS%_0.007813 0.074219 0.421875 0 1 50 42.4242 Bs0 0.199219 0.992188 0 1 50 23.0303 %_BS%_0 0.199219 0.992188 0 1 50 23.0303 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 12)(Unnamed gradient 12) 0 3 Bd[<000102030405060708090A0B0C0D0E0F1011131415161718191A1B1C1D1E1F><AAABABACADADAEAEAFAFB0B1B1B2B2B3B3B4B4B5B6B6B7B7B8B8B9BABABBBB><FCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9><00000000010101010101010102020202020202030303030303030304040404>1 %_Br0<8080818282838484858686878888898A8A8B8C8C8D8E8E8F9090919293939495959697979899999A9B9B9C9D9D9E9F9FA0A1A1A2A3A4A4A5A6A6A7A8A8A9AAAA><BCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC>01 %_Br[0.121094 0.734375 0.976563 0.015625 1 50 100 %_BS%_0.121094 0.734375 0.976563 0.015625 1 50 100 Bs0 0.667969 0.988281 0 1 50 50 %_BS%_0 0.667969 0.988281 0 1 50 50 Bs0 0.5 0.738281 0 1 50 0 %_BS%_0 0.5 0.738281 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 16)(Unnamed gradient 16) 0 3 Bd[<000000000000000000000001010101010101010101010101010101010101010202020202020202020202><333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051525354555758595A5B5C5D>0.99218801 %_Br<0202020202020202020202020202020202020202020202020202020202020202020202020101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000><1313131414141414151515151616161616171717171818181818191919191A1A1A1A1A1B1B1B1B1B1C1C1C1C1D1D1D1D1D1E1E1E1E1F1F1F1F1F2020202021212121212222222223232323232424242425252525252626262626272727272828282828292929292A2A2A2A2A2B2B2B2B2C2C2C2C2C2D2D2D2D2E2E2E2E2E2F2F2F2F30303030303131313131323232323333><6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFD>01 %_Br[0.007813 0.363281 0.992188 0 1 50 100 %_BS%_0.007813 0.363281 0.992188 0 1 50 100 Bs0 0.199219 0.992188 0 1 50 50 %_BS%_0 0.199219 0.992188 0 1 50 50 Bs0.007813 0.074219 0.421875 0 1 50 0 %_BS%_0.007813 0.074219 0.421875 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 17)(Unnamed gradient 17) 0 3 Bd[<5B5B5C5D5E5E5F606161626364646566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F808081828383848586878788898A8A8B8C8D8D8E8F90909192939394959696><0000000001010101010101020202020202020203030303030303040404040404040505050505050506060606060606070707070707070708080808080808090909090909090A0A0A0A0A0A0A0B0B0B0B><AFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>01 %_Br<313132333434353636373838393A3A3B3C3C3D3E3E3F4040414242434444454646474848494A4A4B4C4C4D4E4E4F5051515253535455555657575859595A5B>0<7172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF>01 %_Br[0.589844 0.042969 1 0 1 50 100 %_BS%_0.589844 0.042969 1 0 1 50 100 Bs0.355469 0 0.6875 0 1 50 50 %_BS%_0.355469 0 0.6875 0 1 50 50 Bs0.191406 0 0.441406 0 1 50 0 %_BS%_0.191406 0 0.441406 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 19)(Unnamed gradient 19) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6>0 %_Br[0.9 0 50 100 %_BS%_0.9 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 20)(Unnamed gradient 20) 0 3 Bd[<C6C7C7C8C8C8C9C9CACACACBCBCCCCCDCDCDCECECFCFD0D0D0D1D1D2D2D3D3D3D4D4D5D5><48494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364656667696A6B6C>001 %_Br<8F90909091919192929393949495969697979899999A9B9B9C9D9D9E9FA0A0A1A2A3A4A4A5A6A7A8A8A9AAABACADAEAEAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C1C2C3C4C5C6><2F2F2F2F2F303030303031313131323232323333333434343535353636363737373838383939393A3A3B3B3B3C3C3C3D3D3E3E3F3F3F40404141414242434344444545454646474748>001 %_Br[0.835938 0.421875 0 0 1 50 100 %_BS%_0.835938 0.421875 0 0 1 50 100 Bs0.777344 0.28125 0 0 1 50 58.427 %_BS%_0.777344 0.28125 0 0 1 50 58.427 Bs0.5625 0.183594 0 0 1 59.5506 0 %_BS%_0.5625 0.183594 0 0 1 59.5506 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 5)(Unnamed gradient 5) 1 3 Bd[<0B0B0B0C0C0C0C0D0D0D0D0D0E0E0E0E0F0F0F0F10101010101111111112121212121313131313141414141515151515161616><18181919191A1A1B1B1B1C1C1C1D1D1E1E1E1F1F1F202020212122222223232324242425252526262727272828282929292A2A><3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263646565666768696A6B6C6D>01 %_Br<16161617171717181818191919191A1A1A1A1B1B1B1B1B1C1C1C1C1D1D1D1D1E1E1E1E1E1F1F1F><2A2A2B2B2B2C2C2D2D2D2E2E2F2F2F303031313132323333333434343535353636363737373838><6D6E6F707172737475767778797A7B7C7D7E7E7F80818283848586878889898A8B8C8D8D8E8F8F>01 %_Br[0.042969 0.09375 0.234375 0 1 48.3146 0 %_BS%_0.042969 0.09375 0.234375 0 1 48.3146 0 Bs0.085938 0.164063 0.425781 0 1 46.0674 50 %_BS%_0.085938 0.164063 0.425781 0 1 46.0674 50 Bs0.121094 0.21875 0.5625 0 1 50 100 %_BS%_0.121094 0.21875 0.5625 0 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 6)(Unnamed gradient 6) 0 2 Bd[<999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A>0 %_Br[0.1 0 50 75 %_BS%_0.1 0 50 75 Bs0.6 0 50 25 %_BS%_0.6 0 50 25 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 7)(Unnamed gradient 7) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BF>0 %_Br[0.75 0 50 100 %_BS%_0.75 0 50 100 Bs1 0 50 53.8462 %_BS%_1 0 50 53.8462 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 9)(Unnamed gradient 9) 0 2 Bd[<666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A>0 %_Br[0.1 0 50 100 %_BS%_0.1 0 50 100 Bs0.4 0 50 0 %_BS%_0.4 0 50 0 BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 5 pt. ) -(Flat/ Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Callig) -(raphic Brush Tool/ 7 pt. Round/ Adobe Calligraphic Brush Tool/) -( 15 pt. Round/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(15 pt. Round)(1 15 15 100 100 15 15 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(2 pt. Oval)(1 2 2 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Oval)(1 5 5 10 90 -65 35 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(7 pt. Round)(1 7 7 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Auuu1 Ap0 O0 J 0 j 1 w 4 M []0 d0 XR175.5 49.5 m175.5 48.9502 175.0498 48.5 174.5 48.5 c145.5 48.5 l144.9502 48.5 144.5 48.9502 144.5 49.5 c144.5 70.5 l144.5 71.0498 144.9502 71.5 145.5 71.5 c174.5 71.5 l175.0498 71.5 175.5 71.0498 175.5 70.5 c175.5 49.5 lBb1 (Unnamed gradient 19) 151.3281 75.0186 -60 34.6846 1 0 0 1 0 0 Bg17.3423 -30.0377 -36.2834 -20.9482 169.4707 85.4932 Xm4104.7344 -7109.6094 -36.2834 -20.9482 -3935.2637 7195.1025 Bc17.3423 -30.0377 -36.2834 -20.9482 169.4707 85.4932 Bm4104.7344 -7109.6094 -36.2834 -20.9482 186.8125 55.4551 Bcf0 BBu*u0 Ap0.5 g174.5 48 m145.5 48 L144.6729 48 144 48.6729 144 49.5 C144 70.5 L144 71.3271 144.6729 72 145.5 72 C174.5 72 L175.3271 72 176 71.3271 176 70.5 C176 49.5 L176 48.6729 175.3271 48 174.5 48 C174.5 48 Lf1 D145.5 71 m145.2246 71 145 70.7754 145 70.5 C145 49.5 L145 49.2246 145.2246 49 145.5 49 C174.5 49 L174.7754 49 175 49.2246 175 49.5 C175 70.5 L175 70.7754 174.7754 71 174.5 71 C145.5 71 L145.5 71 Lf*UUUu0 D147.5 51 m147.5 69 L172.5 69 L172.5 51 L147.5 51 LBb1 (Unnamed gradient 16) 152.9775 72.1641 -60 28.0889 1 0 0 1 0 0 Bg14.0444 -24.3257 -30.0085 -17.3254 167.9814 80.8262 Xm4105.4878 -7110.9141 -30.0085 -17.3254 -3937.5063 7191.7402 Bc7.02222 -12.1628 -30.0085 -17.3254 167.9814 80.8262 Bm7.02222 -12.1628 -30.0085 -17.3254 175.0039 68.6631 Bm4105.4878 -7110.9141 -30.0085 -17.3254 182.0254 56.501 Bcf0 BB*u0.367188 0.507813 1 0.183594 k172.5 50.75 m147.5 50.75 L147.3623 50.75 147.25 50.8623 147.25 51 C147.25 69 L147.25 69.1377 147.3623 69.25 147.5 69.25 C172.5 69.25 L172.6377 69.25 172.75 69.1377 172.75 69 C172.75 51 L172.75 50.8623 172.6377 50.75 172.5 50.75 C172.5 50.75 Lf1 D147.75 51.25 m172.25 51.25 L172.25 68.75 L147.75 68.75 L147.75 51.25 L147.75 51.25 Lf*UUu0 D145.1797 49.2334 m144.8057 48.8301 144.9502 48.5 145.5 48.5 c174.5 48.5 l175.0498 48.5 175.1943 48.8301 174.8203 49.2334 c160.6797 64.4941 l160.3057 64.8975 159.6943 64.8975 159.3203 64.4941 c145.1797 49.2334 lBb1 (Unnamed gradient 19) 153.0293 60.9141 -60 21.6055 1 0 0 1 0 0 Bg10.8027 -18.7109 -26.2899 -15.1785 166.1523 68.4902 Xm4105.5728 -7111.061 -26.2899 -15.1785 -3939.4204 7179.5513 Bc10.8027 -18.7109 -26.2899 -15.1785 166.1523 68.4902 Bm4105.5728 -7111.061 -26.2899 -15.1785 176.9551 49.7793 Bcf0 BBu*u0.5 g174.5 48 m145.5 48 L144.832 48 144.6025 48.3604 144.5352 48.5156 c144.4678 48.6709 144.3594 49.084 144.8135 49.5732 C158.9531 64.834 L159.5078 65.4316 160.4932 65.4316 161.0459 64.834 C175.1875 49.5732 L175.6406 49.084 175.5322 48.6709 175.4648 48.5156 c175.3975 48.3604 175.168 48 174.5 48 C174.5 48 Lf1 D145.6455 49 m174.3545 49 L160.3125 64.1543 L160.1426 64.3379 159.8584 64.3379 159.6865 64.1543 C145.6455 49 L145.6455 49 Lf*UUUu0 D150.5 51.3184 m160 60.3184 L169.5 51.3184 L150.5 51.3184 LBb1 (Unnamed gradient 16) 156.1025 58.0693 -60 12.543 1 0 0 1 0 0 Bg6.27148 -10.8625 -17.7142 -10.2273 164.959 63.1826 Xm4107.0498 -7113.6196 -17.7142 -10.2273 -3942.0908 7176.8022 Bc3.13574 -5.43126 -17.7142 -10.2273 164.959 63.1826 Bm3.13574 -5.43126 -17.7142 -10.2273 168.0947 57.751 Bm4107.0498 -7113.6196 -17.7142 -10.2273 171.2305 52.3203 Bcf0 BB*u0.367188 0.507813 1 0.183594 k169.5 51.0684 m150.5 51.0684 L150.3975 51.0684 150.3057 51.1309 150.2676 51.2256 c150.2295 51.3213 150.2539 51.4297 150.3281 51.5 C159.8281 60.5 L159.9238 60.5918 160.0762 60.5918 160.1719 60.5 C169.6719 51.5 L169.7461 51.4297 169.7705 51.3213 169.7324 51.2256 c169.6943 51.1309 169.6025 51.0684 169.5 51.0684 C169.5 51.0684 Lf1 D151.127 51.5684 m168.873 51.5684 L160 59.9736 L151.127 51.5684 L151.127 51.5684 Lf*UUu0 D144.5 70.5 m144.5 71.0498 144.9502 71.5 145.5 71.5 c174.5 71.5 l175.0498 71.5 175.5 71.0498 175.5 70.5 c175.5 68.8008 l175.5 68.251 175.1504 67.5176 174.7227 67.1719 c161.9697 56.8496 l161.542 56.5039 160.7422 56.2207 160.1924 56.2207 c159.8076 56.2207 l159.2578 56.2207 158.458 56.5039 158.0303 56.8496 c145.2773 67.1719 l144.8496 67.5176 144.5 68.251 144.5 68.8008 c144.5 70.5 lBb1 (Unnamed gradient 19) 155.4541 77.4004 -60 21.0781 1 0 0 1 0 0 Bg10.5391 -18.2542 -27.9813 -16.155 169.4707 85.4922 Xm4106.7979 -7113.1831 -27.9813 -16.155 -3937.3271 7198.6753 Bc10.5391 -18.2542 -27.9813 -16.155 169.4707 85.4922 Bm4106.7979 -7113.1831 -27.9813 -16.155 180.0098 67.2383 Bcf0 BBu*u0.5 g160.1924 55.7207 m159.8076 55.7207 L159.1484 55.7207 158.2295 56.0459 157.7158 56.4609 C144.9629 66.7832 L144.4141 67.2266 144 68.0938 144 68.8008 C144 70.5 L144 71.3271 144.6729 72 145.5 72 C174.5 72 L175.3271 72 176 71.3271 176 70.5 C176 68.8008 L176 68.0938 175.5859 67.2266 175.0371 66.7832 C162.2842 56.4609 L161.7705 56.0459 160.8516 55.7207 160.1924 55.7207 C160.1924 55.7207 Lf1 D145.5 71 m145.2246 71 145 70.7754 145 70.5 C145 68.8008 L145 68.4023 145.2822 67.8105 145.5918 67.5605 C158.3447 57.2383 L158.6855 56.9629 159.3691 56.7207 159.8076 56.7207 C160.1924 56.7207 L160.6309 56.7207 161.3145 56.9629 161.6553 57.2383 C174.4082 67.5605 L174.7178 67.8105 175 68.4023 175 68.8008 C175 70.5 L175 70.7754 174.7754 71 174.5 71 C145.5 71 L145.5 71 Lf*UUUu0 D159.5654 59.6816 m147.5 68.1924 L147.5 68.6816 L172.5 68.6816 L172.5 68.1924 L160.4346 59.6816 L159.5654 59.6816 LBb1 (Unnamed gradient 16) 156.7686 74.0332 -60 14.2607 1 0 0 1 0 0 Bg7.13037 -12.3502 -22.4262 -12.9478 167.9824 80.5068 Xm4107.3833 -7114.1968 -22.4262 -12.9478 -3939.4009 7194.7036 Bc3.56519 -6.17508 -22.4262 -12.9478 167.9824 80.5068 Bm3.56519 -6.17508 -22.4262 -12.9478 171.5479 74.332 Bm4107.3833 -7114.1968 -22.4262 -12.9478 175.1123 68.1563 Bcf0 BB*u0.367188 0.507813 1 0.183594 k160.4346 59.4316 m159.5654 59.4316 L159.5137 59.4316 159.4639 59.4473 159.4209 59.4775 C147.3555 67.9883 L147.2891 68.0352 147.25 68.1113 147.25 68.1924 C147.25 68.6816 L147.25 68.8193 147.3623 68.9316 147.5 68.9316 C172.5 68.9316 L172.6377 68.9316 172.75 68.8193 172.75 68.6816 C172.75 68.1924 L172.75 68.1113 172.7109 68.0352 172.6445 67.9883 C160.5791 59.4775 L160.5361 59.4473 160.4863 59.4316 160.4346 59.4316 C160.4346 59.4316 Lf1 D159.6445 59.9316 m160.3555 59.9316 L172.25 68.3223 L172.25 68.4316 L147.75 68.4316 L147.75 68.3223 L159.6445 59.9316 L159.6445 59.9316 Lf*UUUuu1 Ap0 D169.9277 78.749 m170.3164 79.1377 170.9531 79.1377 171.3418 78.749 c174.793 75.2988 l175.1816 74.9102 175.1816 74.2734 174.793 73.8848 c173.3574 72.4492 l172.9688 72.0605 172.9688 71.4238 173.3574 71.0352 c174.793 69.5996 l175.1816 69.2109 175.1816 68.5742 174.793 68.1855 c171.3418 64.7354 l170.9531 64.3467 170.3164 64.3467 169.9277 64.7354 c168.4932 66.1699 l168.1045 66.5586 167.4678 66.5586 167.0791 66.1699 c165.6006 64.6914 l165.2119 64.3027 164.5752 64.3027 164.1865 64.6914 c160.7363 68.1426 l160.3477 68.5313 160.3477 69.168 160.7363 69.5566 c162.2148 71.0352 l162.6035 71.4238 162.6035 72.0605 162.2148 72.4492 c160.7363 73.9277 l160.3477 74.3164 160.3477 74.9531 160.7363 75.3418 c164.1865 78.793 l164.5752 79.1816 165.2119 79.1816 165.6006 78.793 c167.0791 77.3145 l167.4678 76.9258 168.1045 76.9258 168.4932 77.3145 c169.9277 78.749 lBb1 (Unnamed gradient 19) 162.5908 76.8936 -45 14.8704 1 0 0 1 0 0 Bg10.5149 -10.5149 -13.4357 -13.4357 169.3086 83.6113 Xm5812.9873 -5812.9873 -13.4357 -13.4357 -5643.6787 5896.5986 Bc10.5149 -10.5149 -13.4357 -13.4357 169.3086 83.6113 Bm5812.9873 -5812.9873 -13.4357 -13.4357 179.8232 73.0967 Bcf0 BBu*u0 Ap0.5 g164.8936 63.9004 m164.4922 63.9004 164.1152 64.0557 163.833 64.3379 C160.3828 67.7891 L159.7979 68.374 159.7979 69.3252 160.3828 69.9102 C161.8613 71.3887 L162.0566 71.584 162.0566 71.9004 161.8613 72.0957 C160.3828 73.5742 L159.7979 74.1592 159.7979 75.1104 160.3828 75.6953 C163.833 79.1465 L164.3975 79.7109 165.3896 79.7109 165.9541 79.1465 C167.4326 77.668 L167.6201 77.4805 167.9521 77.4805 168.1396 77.668 C169.5742 79.1025 L170.1387 79.667 171.1309 79.667 171.6953 79.1025 C175.1465 75.6523 L175.4287 75.3701 175.584 74.9932 175.584 74.5918 c175.584 74.1904 175.4287 73.8135 175.1465 73.5313 C173.7109 72.0957 L173.5156 71.9004 173.5156 71.584 173.7109 71.3887 C175.1465 69.9531 L175.4287 69.6709 175.584 69.2939 175.584 68.8926 c175.584 68.4912 175.4287 68.1143 175.1465 67.832 C171.6953 64.3818 L171.1309 63.8174 170.1387 63.8174 169.5742 64.3818 C168.1396 65.8164 L167.9521 66.0039 167.6201 66.0039 167.4326 65.8164 C165.9541 64.3379 L165.6719 64.0557 165.2949 63.9004 164.8936 63.9004 C164.8936 63.9004 Lf1 D164.8936 78.584 m164.7588 78.584 164.6338 78.5332 164.54 78.4395 C161.0898 74.9883 L160.8945 74.793 160.8945 74.4766 161.0898 74.2813 C162.5684 72.8027 L163.1533 72.2178 163.1533 71.2666 162.5684 70.6816 C161.0898 69.2031 L160.8945 69.0078 160.8945 68.6914 161.0898 68.4961 C164.54 65.0449 L164.7275 64.8574 165.0596 64.8574 165.2471 65.0449 C166.7256 66.5234 L167.29 67.0879 168.2822 67.0879 168.8467 66.5234 C170.2813 65.0889 L170.4688 64.9014 170.8008 64.9014 170.9883 65.0889 C174.4395 68.5391 L174.6348 68.7344 174.6348 69.0508 174.4395 69.2461 C173.0039 70.6816 L172.4189 71.2666 172.4189 72.2178 173.0039 72.8027 C174.4395 74.2383 L174.6348 74.4336 174.6348 74.75 174.4395 74.9453 C170.9883 78.3955 L170.8008 78.583 170.4688 78.583 170.2813 78.3955 C168.8467 76.9609 L168.2822 76.3965 167.29 76.3965 166.7256 76.9609 C165.2471 78.4395 L165.1533 78.5332 165.0283 78.584 164.8936 78.584 C164.8936 78.584 Lf*UUU/BBAccumRotation (0.785398) XTu0 D169.6875 71.7422 m172.6035 68.8252 L170.7031 66.9248 L167.7871 69.8418 L164.8262 66.8809 L162.9258 68.7813 L165.8867 71.7422 L162.9258 74.7031 L164.8262 76.6035 L167.7871 73.6416 L170.7051 76.5586 L172.6035 74.6592 L169.6875 71.7422 LBb1 (Unnamed gradient 12) 102.5625 68.54 -105 11.3213 0.7071 -0.7071 0.7071 0.7071 -3343.9709 8140.9404 Bg5.66059 -9.80443 -13.2677 -7.66008 171.5488 80.4854 Xm4080.241 -7067.187 -13.2677 -7.66008 -3908.6924 7147.6724 Bc2.83029 -4.90222 -13.2677 -7.66008 171.5488 80.4854 Bm2.83029 -4.90222 -13.2677 -7.66008 174.3789 75.583 Bm4080.241 -7067.187 -13.2677 -7.66008 177.209 70.6807 Bcf0 BB/BBAccumRotation (0.785398) XT*u0.289063 0.851563 1 0.292969 k164.8262 66.6309 m164.7617 66.6309 164.6982 66.6553 164.6494 66.7041 C162.749 68.6045 L162.6514 68.7021 162.6514 68.8604 162.749 68.958 C165.5332 71.7422 L162.749 74.5264 L162.6514 74.624 162.6514 74.7822 162.749 74.8799 C164.6494 76.7803 L164.6963 76.8271 164.7598 76.8535 164.8262 76.8535 C164.8262 76.8535 L164.8926 76.8535 164.9561 76.8271 165.0029 76.7803 C167.7871 73.9951 L170.5283 76.7354 L170.5752 76.7822 170.6387 76.8086 170.7051 76.8086 C170.7051 76.8086 L170.7715 76.8086 170.835 76.7822 170.8818 76.7354 C172.7803 74.8359 L172.8779 74.7383 172.8779 74.5801 172.7803 74.4824 C170.041 71.7422 L172.7803 69.002 L172.8779 68.9043 172.8779 68.7461 172.7803 68.6484 C170.8799 66.748 L170.833 66.7012 170.7695 66.6748 170.7031 66.6748 C170.7031 66.6748 L170.6367 66.6748 170.5732 66.7012 170.5264 66.748 C167.7871 69.4883 L165.0029 66.7041 L164.9541 66.6553 164.8906 66.6309 164.8262 66.6309 C164.8262 66.6309 Lf1 D163.2793 68.7813 m164.8262 67.2344 L167.6104 70.0186 L167.6572 70.0654 167.7207 70.0918 167.7871 70.0918 C167.7871 70.0918 L167.8535 70.0918 167.917 70.0654 167.9639 70.0186 C170.7031 67.2783 L172.25 68.8252 L169.5107 71.5654 L169.4131 71.6631 169.4131 71.8213 169.5107 71.9189 C172.25 74.6592 L170.7051 76.2051 L167.9639 73.4648 L167.8662 73.3672 167.708 73.3672 167.6104 73.4648 C164.8262 76.25 L163.2793 74.7031 L166.0635 71.9189 L166.1611 71.8213 166.1611 71.6631 166.0635 71.5654 C163.2793 68.7813 L163.2793 68.7813 Lf*UUUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF