%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 14.0.0%%For: (Nick La) ()%%Title: (2-01.eps)%%CreationDate: 1/6/10 3:42 PM%%Canvassize: 16383%%BoundingBox: 0 240 32 272%%HiResBoundingBox: 0 240 32 272%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_Cropmarks: 0 240 32 272%AI3_TemplateBox: 16.5 255.5 16.5 255.5%AI3_TileBox: -290 -140 322 652%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 32 32%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 1%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -22 277 24.71 1893 1050 18 0 0 18 96 0 0%AI5_OpenViewLayers: 77%%PageOrigin:0 0%AI7_GridSettings: 4 4 4 4 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 128 8%%BeginData: 26130 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD35FFA8A8FD047D527D597D527D597D52FD047DA87DA8A8FD66FF%7D7D527D527D527D527D527D527D527D527D527D527D527D527D527EFD63%FF7D7D537D527D537D527D537D527D537D527D537D527D537D527D537D52%7DFD5BFF7D7D527D59A87D7D527D527D527D527D527D527D527D527D527D%527D527D527D527D527D527DA87D597D7DA8A8FD50FFA87D527D597D527D%597D527D597D52847DA87EA8A8FFA8FFA8FFA8FFA8FF7EA8FD047D597D52%7D597D527D597D527D7DA8FD4CFFA8527D527D527D527D527D527D527D7D%FD15FFA8A8527D527D527D527D527D527D527D7DFD48FFA87D537D527D53%7D527D537D527D537D7DFD18FFA8537D527D537D527D537D527D537D52A8%FD44FFA8527D527D527D527D527D7D7D527D527D52A8FD04FFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA87D527D527D537D7D7D527D527D52%7D527D7DFD40FFA87D597D527D597D527D7DFD04FFA97D7D7DFD1CFFA852%7D7DFD04FFA8597D597D527D597D7DFD3EFF7D7D527D527D527D52A8A8FD%27FFA9FFFFFFA9FFFFFF7D7D527D527D527D527DFD3AFFA8527D537D527D%537D7DFD33FFA8A87D7D527D537D527DA8FD36FFA87D527D527D527D5284%A8FD0DFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF7D7D527D527D527D7DFD34FFA87D%597D527D597D7DFD3BFFA8A8597D527D597D53FD32FF7D7D527D527D527D%A8FD18FF84282E0628052E0628052E062E53FFFFFFA9FFFFFFA9FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8A8527D527D527D527DFD2FFF537D537D527D%53A8FD1AFF282E062E062E062E062E062E062EA8FD19FF7D7D527D537D52%7DA8FD2CFF527D527D527D52A8FD0AFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA828062F2F362F352F362F352F28067DA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFA8FFA8FFA8FFA8FFA87D527D527D527DA8FD2AFF7D7D527D%597D7DFD1CFF7E282E36615A5B365B365B365B2E2E52FD1BFFA8A8597D52%7D597DFD29FFA87D527D527DA8FD0FFF532E067EFD0AFF2E2E285A365A36%5A365A365A362F062EA9FFFFFFA8FFFFFFA8FF7E2E287DA8FFA8FFFFFFA8%FFFFFFA8FFFFFFA8A8527D527D52A8FD28FF84527D537DA8FD0DFFA97D28%2E062E067EFD09FF2E062F365A365B365A365B365A2F2E06A9FD08FF842E%062E062E53FD0FFF537D527D7DFD28FF537D527D53FD09FFA8FFFFFF592E%0628052F0628057DFFFFA8FFFFFFA8A806282F5A365A365A365A365A365A%052859FFA8FFFFFFA8FFA82E052806280528287DA8FFA8FFA8FFA8FFA8FF%A8FFA87D527D527DFD25FFFD047D527D59A8FD0BFFA82E2E282E2E5A5A5A%282E287EFD06FF7D2E065B365B365B365A365B365A362F2853FD06FFA953%062E2F5A362F282E0653A8FD0BFFA87D527D597D7DFD22FF527D527D527D%527D7DFD0AFF7D0628052F2F5A365A3636062E06A8FD05FF53062E365A36%5A365A365A365A365A2E2E28FFA8FFFFFFA82E06282F5AFD04360628052E%53FFA8FFFFFFA8FFFFFFA8A8527D527D527D527DA8FD1EFF527D537D527D%537D52AFFD08FFA82E062E2835365B5A5A365B5A5A062E28A8FD04FF282E%2F5A365B365A365B365A365B365A062EA8FFFFFFA92E062E2F5A365A365A%365A2F2E062E2EA8FD08FFA87D537D527D537D527DA8FD1CFF527D527D52%7D527D527DFD04FFA8FFFFFFA8530628065A365A365A365A365A36360528%06A8A8FFA8280536365A365A365A365A3636365A3628057DA8FFA82E0628%2F3636363036363630362F2E052828FFA8FFA8FFA8FFA8FF7D7D527D527D%527D527DA8FD1AFF7D7D527D597D7DA8A8FD0BFF522E28615A5B36615A5B%36615A5B365A282E28A8FF7D062E365A365B365A365B365A365B365A282E%53FFA853282E2F5B365A365B365A365B365A362F282EFD0AFFA8847D7D59%7D527D597DFD19FFA87D527D527DA8FD0EFF7D0628365A365A365A365A36%5A365A365A062806A82E28065A365A365A365A365A3636365A362F052EA8%2E052E2FFD05363036363630363636062E2EFFA8FFFFFFA8FFAFFFA8FFAF%FFA8A8527D527D52A8FD18FF7D527D537DA8FD0FFF842E065A365B5A5A36%5B365A365B365A365A282E282E062F365B365A365B365A365B365A365A2F%2E0653062E2F5A365A365A3636365AFD05362E067EFD0FFFA8537D527D53%FD17FF7D527D527D7DFD05FFA8FFFFFFA8FFFFFFA8FFFFFF28282E5A365A%365A365A365A365A365A3636062805282F36365A3636305A3636305A3636%3036062805282836303636363036363630363036302F062884FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA87E527D527D7DFD16FF597D527D7DFD12FF5928%2F36615A5B365B5A5B365B365A365B3635062E285A365B365A365B365A36%5B365A365B362F062E2E5A365B365A365B3636365B3636365B2F2E28FD12%FF7D527D597DA8FD14FF527D527D52A8FD12FF7D2E065A365A365A365A36%5A365A365A365A362F062F365A365A3636365A3636365A3636365A2F2806%363636303636363036363630363636302E0653A8FFAFFFA8FFAFFFA8FFA8%FFA8FFA8FFA8FFA87D527D527DA8FD12FF7D7D527D537EFD14FF062E2F5A%365B365A365B365A365B365A365B365A365B365A365B365A365A365A365A%365A365A365A365A3636365AFD0A36062E7EFD11FFA9FF7D7D527D537DFD%11FFA87D527D527DA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF2E%052F365A365A365A365A365A365A3636365A3636305A3636305A36363036%3636303636363036363630363036303630363036303630362F2805FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF527D527D52A8FD10FF7D597D%527DA8FD15FF592E285B365B365A365B365A365B365A365B365A365B365A%365B365A365B365A365B365A365B365A365B3636365B3636365BFD05362F%0653FD15FFA9527D597D7DFD0FFFA8527D527D7DFD09FF842E06537DA8FD%07FFA8052E2F5A365A365A365A365A365A365A365A3636365A3636365A36%36365A363630363636303636363036363630363636303636363036062859%FFAFFFA8FFA8FFA8A853532EA8A8FFA8FFA8FFA8FFA87D527D527DA8FD0E%FF7D7D527D7DFD0AFF53062E062E062E53A8FD05FF2E062F365A365B365A%365B365A365B365A365A365A365A365A365A365A365A3636365A3636365A%FD0E362F2E06A9FD04FFA884532E062E062E28FFFFFFA9FFFFFFA8FFA87D%527D537DFD0DFF7D7D527D52A8FFFFA8FFFFFFA8FFFF5905282E2E052806%28052E2E7DA8FF2E28065A365A365A3636365A3636305A36363036363630%3636363036363630363636303630363036303630363036303630360E3630%2F052EA8FF7D7D282805280628052E062852FFA8FFA8FFA8FFA8FF7D7D52%7D52A8FD0CFF7D597D527DFD09FFA8062E2E5B36612F2F282E282E062E2E%53062E365A365B365A365B365A365B365A365B365A365B365A365B365A36%5B365A365B3636365B3636365AFD0A36062E2E53282E282E062E282F2F36%362F062EA8FD09FF597D597D7DFD0BFFA8527D527D7DFD09FF2828065A36%5A365A365A2F2F2828052E0628052F365A365A3636365A3636365A363636%5A3636365A36363036363630363636303636363036363630363636303630%360E362F28052E0628052E062F0D360E360E360D280553A8FFA8FFA8FFA8%FFA8A8527D527DA8FD0AFF7D7D527D7DFD09FF7D2E0659365B365A365B36%5A365B36352E2E062E2F5B365A365B365A365A365A365A365A365A365A36%5A3636365A3636365AFD1436062E062F2F360E3636360E3636360E362F2E%067EFFFFA8FFFFFFA8FFA87D527D537DFD09FFA87D527D52A8FFFFA8FFFF%FFA8FFA82E052E365A365A365A365A365A365A365A36362F36365A363630%5A3636303636363036363630363636303636363036303630363036303630%36303630360E3630360E360E360D2F0D360D360E360D360E360D360E360D%36062828FFA8FFA8FFA8FFA8FF7D7D527D52A8FD08FF7D597D527DFD09FF%7D062E365B365B365B365B365A365B365A365B365A365B365A365B365A36%5B365A365B365A365B365A365B365A365B3636365BFD1E360E3636360E36%3636062E53FD09FF527D597D7DFD08FF527D527D7DFD09FF2828285A365A%365A365A365A365A365A365A365A3636365A3636365A3636365A3636365A%36363036363630363636303636363036363630363636303630360E363036%0E3630360E360E360E360E360E360E360E360E360E360E2F052EA8FFA8FF%A8FFA8FFA87D527D527DA8FD06FF847D527D53FD09FF532E065A365B365A%365B365A365B365A365B365A365B365A365A365A365A365A365A365A365A%3636365AFD163630363636303636360E3636360E3636360E3614360E3614%360E360D2E067DFFFFA8FFFFFFA8FFA87D527D53A8FD06FF7D527D527DFF%FFA8FFFFFFA8FFFF2E052F365A365A365A365A3636365A3636365A363630%5A3636305A36363036363630363636303636363036303630363036303630%36303630360E3630360E360E360D360E360D360E360D360E360D360E360D%360E360D360E360D36062828FFA8FFA8FFA8FFA8FF7D7D527D7DFD06FF7D%7D527D7DFD09FF2E2E2859365B365A365B365A365B365A365B365A365B36%5A365B365A365B365A365B365A365B365A365B36362F362F362FFD1B360E%3636360E3614360E3614360E360E2F062EFD09FFA8527D597DFD06FF7D52%7D527DA8FD08FFA8062E062F365A365A365A365A365A3636365A3636365A%3636365AFD06363036363630363636062E0628052E0628052E062F2F3630%360E3630360E3630360E360E360E360E360E360E360E360E360E360E360D%360E140D2E062853FFA8FFA8FFA8FFA8FF7D7D527D53FD06FF7D7D537D52%A8FD09FFA8282E062F365B365A365B365A365B365A365A365A365A365A36%5A365A365A3636365A36362F2E062E062E062E062E062E062E062E062F36%3630363636303636360E3636360E3636360E3614360E3614360E3614360E%360D2E062E7DFFA8FFFFFFA8FFFFFFA87D537D527DFD07FF527D527D52FF%FFFFA8FFFFFFA8FFFFFF2828062F365A3636305A3636305A363630363636%30363636303636363036303630350628052828537DA8A8FFA8FFA87E522E%0628052E0D360D360E360D360E360D360E360D360E360D360E360D360E14%0D360E140D28062853FFA8FFA8FFA8FFA8FFA87D527D527DA8FD06FF7D7D%597D527DFD0CFF2E2E0659365A365B365A365B365A365B365A365B365A36%5B365A365B3636362F282E06537EFD0CFFA82E2E282E2EFD073614363636%0E3636360E3614360E3614360E3614360D2E282E7DFD0BFF527D597D52A8%FD05FF527D527D527D7DFFFFFFA9FFFFFFA9FFFFFFA8FF2828052F363636%5A3636365A3636365A363630363636303636363036302E052E287EA8FFAF%FFA8FFAFFFA8FFAFFFA8FFA8FF7D2E062806360E360E360E360E360E360E%360E360E360E360D360E140D360D28052E7EFFA8FFA8FFA8FFA8FFA8FFA8%7D527D527D527DFFFFFF7D7D537D527D7DFD0FFF2E2E0635365A365A365A%365A365A365A3636365A3636365A3636302F062E52FD13FFA853062E0636%36360E3636360E3614360E3614360E3614360E360E360D2E062E7EFFFFFF%A8FFFFFFA8FFFFFFA8FFA87D527D537D52A8FFFF7D527D527D7DFFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FF2828052F36363036363630363636303636%36303630363036302E052853FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA87D062806360E360D360E360D360E360D360E140D360E140D360D%28052E7EFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87D527D527D52FFFF527D%597D7EFD13FF282E282F365B365A365B365A365B365A365B3636365B362F%062E59FD18FF7D062E2F360E3636360E3614360E3614360E3614360E360D%2E062EA8FD09FFA8FFFFFFA8FFFFFFA8A8597D527DA87D7D527D52FFA9FF%FFFFA9FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF282E062F365A363630363636%3036363630363636303606282EFFAFFFA8FFAFFFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA853052E0D360E360E360E360E360D360E140D360E14%0D2E06287DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87D527D52A8%A8537D527DFD11FFA97D59282E062E285A365A3636365A3636365AFD0636%062E28FD15FFA9FFFFFFA9FFA82E062E14360E3614360E3614360E360E36%0E360E2E062E285353A9FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF7D7D%53FD047D527D7DFFFFFFA8FFFFFFA8FFFFFFA8FFA87D2E2E062805280628%062F363630363636303630363036303630362F280584A8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D28052F0E140D360E14%0D360E140D140E140D14062805280628052E2E7D7EFFA8FFA8FFA8FFA8FF%A8FFA8FFA87D527D527D7D597D52A8FD09FFA97D59282E062E282E062F2F%36365B365A365B365A365B3636365BFD05362E0653FD1EFF2E2E28360E36%14360E3614360E360E360E360E360E360D2F062E282E062E28537DA9FFFF%A8FFFFFFA8FFFFFF7D7D597D7D527D527D7DFFFFFFA8FFFFFFA87D062805%2E0628062F2F36365A363630363636303636363036363630363636303606%287DFFAFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA87E052E0D140D360E140D360E140D360E140D360E140D360E140D2F06%28052E0628052E7DFFA8FFA8FFA8FFA8A8527D527D7D527D53A8FD08FF28%2E062F2F5A365A365A365A365A3636365AFD0E362E2E28FD0DFFA9FFFFFF%A9FFFFFFA9FFFFFFA8FFFFFFA8FFFF2E062F0E360E360E360E360E360E36%0E360E360E360E360E360E360E2F0C2F062E0653FFFFA8FFFFFFA8FF7D7D%527D7D527D527DA8FFA8FFFFFFA8FFA82805363636303636363036363630%3636363036303630363036303630363036302E0553A8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF522806360E140D%140E140D140D140D140D140D140D140D140D0E0D140D0E0D140C2805FFA8%FFA8FFA8FFA8A8527D527D7D527D59FD09FF062E2F5A365B365A365B365A%365B365A365B3636365BFD0A36062E7DFD20FF7E062E14360E360E360E36%0E360E360E360E360E360E360E360E360E360E360E2F062EFFFFA8FFFFFF%A8FFA87D527D59527D527DA8FFA8FFFFFFA8FFFF2805FD07363036363630%36363630363636303636363036363630362F2805A8A8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA82805360E140D%360E140D360E140D360E140D360E140D360E140D360D140D360D2805FFA8%FFA8FFA8FFA8A8527D527D7D537D52FD09FF062E2F5A365A365A3636365A%FD1436062EFD08FFA9FFFFFFA9FFFFFFA9FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FF062E0D360E360E360E360E360E360E360E360E360E360E360E36%0E360E360E30062EA8FFFFFFA8FFFFFFA87D537D52527D527DA8FFA8FFA8%FFA8FFA828062F3036363630363636303630363036303630363036303630%360E3630360D2806FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA828062F0D140D140D140D140D140D140D140D%0E0D360D0E0D140D0E0D140D0E0D2806FFA8FFA8FFA8FFA8FF527D527D7D%597D52FD09FF282E2F5B365A365B3636365B3636365BFD1036282EFD22FF%282E0D360E360E360E360E360E360E360E360E360E360E360E360E360E36%0E36282EA8FFFFFFA8FFFFFFA87D597D52527D527DA8FFFFFFA8FFFFFFA8%2E062F3036363630363636303636363036363630363636303630360E3630%360D2E06FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA82E062F0D360E140D360E140D360E140D360E140D360D%0E0D360D0E0D360D0E0D2E06FFA8FFA8FFA8FFA8FF527D527D7D527D53A8%FD08FF062E2F36365AFD163630363636062EA8FFA9FFFFFFA9FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFA8062E0D360E360E36%0E360E360E360E360E360E360E360E360D360E360D360E2F062EFFFFA8FF%AFFFA8FFA87D527D53527D527DA8FFA8FFA8FFA8FFA82805353036303630%3630363036303630360E3630360E3630360D360E360D360E28057EA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D%2805140D140D140D140D140D0E0D360D0E0D360D0E0D140D0E0D360D0E0D%360D2805FFA8FFA8FFA8FFA8A8527D527D7D527D59FD09FF062E2F36365B%3636365BFD1636062E53FD20FF59062F0E360E360E360E360E360E360E36%0E360E360E360E360E360E360E360E2F062EFFFFA8FFFFFFA8FFA87D527D%59527D527D7DFFA8FFFFFFA8FFFF2E052E062E0C36363630363636303636%36303630360E3630360E360E360E360E2F052EA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF282806360E140D360E%140D360E140D360D0E0D360D0E0D360D0E0D360D2F062E062828FFA8FFA8%FFA8FFA8A8527D527D7D537D52A8FD08FF7E2E062E062E062E282F2FFD0B%3630363636303636360E362F2E06A8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF7D2E06300E360E360E360E360E360E%360E360E360D360E360D360D2F062E062E062E067DA8FFAFFFA8FFA8FF7D%7D537D53527D527D7DFFA8FFA8FFA8FFA8FFA8A85353282805280628052F%0D2F0E3630360D360E360D360E360D360E360D36062828FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA82E052E0D140D14%0D0E0D360D0E0D360D0E0D360D0E0D2F062E052806280528285353A8A8FF%A8FFA8FFA8FFA87D527D527DA8597D5284FD0EFFA87E532E062E282E062E%2FFD0D361436362F062E7EFD1CFFA8062E0D360E360E360E360E360E360E%360E360E2F062E282E062E282E527EA8FFA8FFFFFFA8FFFFFFA8FFFFFF7D%7D59FD047D527D7DFFFFFFA8FFFFFFA8FFFFFFA8FFAFFFA8FFAFA8535328%28052E30360E360E360E360E360E360E360E360E28052EA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF282806360E140D360D%140D360D0E0D360D0E0D360628052E285353A8A8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA87D527D527EA8527D537DA8FD13FF7E2E062E2F3636360E36%36360E3636360E3614360E362F2E0653FFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFF522E062F0E360E360E360E360E360E360D36%0E360D2F062E28FFAFFFA8FFAFFFA8FFAFFFA8FFA8FFA8FFA8FFA8FF537D%527DA8A87D527D527DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7E2805%280D360D360E360D360E360D360E360D360E360D360628057DA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF5328052F0D0E0D140D0E0D%360D0E0D360D0E0D360D0E0D2F062828A9A8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FF7D7D527D52A8FF537D597D5284A8FD0FFFA82E062E2FFD0936%0E3636360E3614360E361436062E287DFD10FFA8FFFFFFA8FF592E062F0E%360E360E360E360E360E360E360E360E360E360E2F062E2EFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFA9FF7D7D597D527DFFFFA8527D527D527DA8FFA8FF%AFFFA8FFAFFFA8FFA8FF7E2E06280D360E360E360E360E360E360E360E36%0E360E360D360E36062E0653A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8A82E2E062E0D360D140D360D0E0D360D0E0D360D0E0D360D0E0D360D2F%052E28A8A8FFA8FFA8FFA8FFA8FFA8FFA8A9597D527D527D7DFFFFFF7D52%7D537D52A8FD0CFFA82E062E2F360E3636360E3636360E3614360E361436%0E3614360E360E36062E062E7DFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8A8%282E062F0E360E360E360E360E360D360E360D360E360D360E360D360E2F%062E2EAFA8FFA8FFA8FFA8FFA8FFA8FF7D7D537D527D7DFD05FF7D527D52%7D52FFA8FFA8FFA8FFA8FFA8FF532E06280D360E360D360E360D360E360D%360E360D360E140D360E140D360E1406280628287EA8FFA8FFA8FFA8FFA8%FFA8FF7D2E0528062F0D140D0E0D140D0E0D360D0E0D360D0E0D300D0E0D%300D0E0D300D2F052828A8A8FFA8FFA8FFA8FFA8FFA87D527D527D52FD06%FFA87D597D527DFD0AFF7D2E282E2FFD07360E3636360E3614360E361436%0E3614360E3614360E360D2E062E282E5384A8FFA8FFFFA87D59282E062E%28300E360E360E360E360E360E360E360E360E360E360E360E360E360E36%0D2F282E28FFFFFFA8FFA9FFA8FFA9FF527D597D52FD07FF7D527D527DA8%FFAFFFA8FFA8FFA8FF5928052E0D360E360E360E360E360E360E360E360E%360D360E140D360E140D360E140D360E2F062E0628052E0628052E062805%2E06280D360D0E0D360D0E0D360D0E0D360D0E0D360D0E0D360D0E0D360D%0E0D360D0E0D2F062806A8A8FFA8FFA8FFA8FFA87D527D527D7DFD06FF7D%7D527D7DFD09FF592E062E0D3636360E3636360E3614360E3614360E3614%360E360E360E360E360E360E360E360E360D2F062E062E062E062E062E06%360E360E360E360E360E360D360E360D360E360D360E360D360E360D360E%360D360E360D2F062E28A8A8FFA8FFA8FFA8FFA87D527D537DFD06FF7D52%7D52A8A8FFA8FFA8FFA8FFA82E052E0D360D360E360D360E360D360E360D%360E140D360E140D360E140D140E140D140D140D140D140D140D0D0D2F0D%2F0D360D0E0D360D0E0D140D0E0D360D0E0D360D0E0D300D0E0D300D0E0D%300D0E0D300D0E0D300D0E0D2F062828FFA8FFA8FFA8FFA8FF7D7D527D53%FD06FF7D7D527D7DFD09FF282E2E36143636360E3636360E3614360E3614%360E3614360E3614360E360E360E360E360E360E360E360E360E360E360E%360E360E360E360E360E360E360E360E360E360E360E360E360E360D360E%360D360E360D360E360D360E2F062FA9FFA8FFA8FFA8FFA87D527D597DFD%06FFA8527D527DA8FFA8FFA8FFA8FFA87D052E0D360E360E360E360E360E%360E360D360E140D360E140D360E140D360E140D360E140D360E140D360E%140D360E140D360D0E0D360D0E0D360D0E0D360D0E0D360D0E0D360D0E0D%360D0E0D300D0E0D300D0E0D300D0E0D30062853FFA8FFA8FFA8FFA8A852%7D527D7DFD06FFA87D537D52A8FD06FFA9FFA82E062F36360E3614360E36%14360E3614360E360E360E360E360E360E360E360E360E360E360E360E36%0E360E360E360E360E360E360D360E360D360E360D360E360D360E360D36%0E360D360E360D360E360D360E360D360E30062E28AFA8FFA8FFA8FFA8FF%7D7D537D52FD08FF527D527D52FFA8FFA8FFA8FFA8FF532805300E360D36%0E360D360E140D360E140D360E140D140E140D140D140D140D140D140D14%0D140D0E0D360D0E0D360D0E0D360D0E0D140D0E0D360D0E0D300D0E0D30%0D0E0D300D0E0D300D0E0D300D0E0D300D0E0D300D280559A8FFA8FFA8FF%A8FFA87D527D527DFD09FF597D527D7DFD09FF282E28360E3614360E3614%360E3614360E360D2F0E360E360E360E360E360E360E360E360E360E360E%360E360E360E360E360E360E360E360E360E360E360E360E360E360D360D%300D360E360D360E360D360E360D360E2F062FA8FFA8FFA8FFA8FFA8A852%7D597DA8FD09FF7D527D527DA8FFA8FFA8FFA8FFA87D052E0D360E360E36%0D360E140D360C2E052E062F0D360E140D360E140D360E140D360E140D36%0D140D360D0E0D360D0E0D360D0E0D360D0E0D360D0E0D360D0E0D360D0E%0D2E0628062F0D0E0D300D0E0D300D0E0D2F062853FFA8FFA8FFA8FFA8FF%527D527D52FD0AFFA87D537D52A8FFFFA9FFFFFFA8FFFF53062E0E360E36%0E360D2F0C2E062E062E062E0D360E360E360E360E360E360E360E360E36%0E360E360E360E360D360E360D360E360D360E360D360E360D360E360D36%0E2F062E062E062E062F0D360E300D360D30062E2EFFA8FFA8FFA8FFA8FF%7D7D537D52A8FD0BFF527D527D52FFA8FFA8FFA8FFA8FF7E28052F0E140D%2F06280528062828532E2806140D140D140D140D140D0E0D140D0E0D140D%0E0D360D0E0D360D0E0D360D0E0D300D0E0D300D0E0D300D0E0D300D0E0D%300D280552282805280628062F0D0E0D30062805A8A8FFA8FFA8FFA8FFA8%7D527D527DFD0DFF597D527D7DFD09FF532E282F062E282E062E2E7D7EFF%FF2F062F0E360E360E360E360E360E360E360E360E360E360E360E360E36%0E360E360E360E360E360E360E360E360D360E360D360E36062E53FFA87E%522E062E282E062F0C2E067DA8FFA8FFA8FFA8FFA8A8527D597D7DFD0DFF%7D527D527DA8FFA8FFA8FFA8FFA8FF282E0628052E2E7EA8FFA8FFA8A806%280D360E140D360E140D360E140D360D140D360D0E0D360D0E0D360D0E0D%360D0E0D360D0E0D360D0E0D360D0E0D300D0E0D300D2F052EA8FFA8FFA8%7E522E0628052E062EA8FFA8FFA8FFA8FFA8A8527D527D52FD0EFFA87D53%7D52A8FFFFA8FFFFFFA8FFFFA8525359A8A8FFFFFFA8FFFFFF592E06360E%360E360E360E360E360E360E360E360E360E360D360E360D360E360D360E%360D360E360D360E360D360E360D360E360D360D2E06A8A8FFA8FFA8FFA8%A87D5328537EFFA8FFA8FFA8FFA8FF7D7D537D52A8FD0FFF527D527D52A8%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA852052E0D140D140D0E%0D140D0E0D140D0E0D360D0E0D360D0E0D360D0E0D300D0E0D300D0E0D30%0D0E0D300D0E0D300D0E0D300D0E0D30062853FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FF7E7D527D527DFD11FF597D527D7DFD15FF282E0D%360E360E360E360E360E360E360E360E360E360E360E360E360E360E360E%360E360E360E360D360E360D360E360D360E360D360E2F0653A9FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87D527D597DA8FD11FF7D527D527D%7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D2805360E140D360E14%0D360D0E0D360D0E0D360D0E0D360D0E0D360D0E0D360D0E0D360D0E0D36%0D0E0D300D0E0D300D0E0D300D0E0D300D2805A9A8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA87D527D527D7DFD13FF7D537D527DA8FFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA859062E0E360E360E360E360E360E360E360E%36062E0D360D360E360D360E360D360E360D360E2F062F0E360D360E360D%360E300D360D300D36062E7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%A8527D537D52FD14FF7D7D527D527DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FF2828060E0D360D0E0D140D0E0D140D0E0D360628052E0D0E0D300D%0E0D300D0E0D300D0E0D300628052F0D0E0D300D0E0D300D0E0D300D0E0D%2E0653A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8527D527D52A8FD15FF%7D7D527D59A8FD0CFFA8FFFFFFA82E282F0E360E360E360E360E360E360E%360D2E062E28360E360E360E360E360D360E360D360D2E062E282F0D360E%360D360E360D360E360D360C2E28FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FF7D7D527D597DFD17FF527D527D52A8A8FFA8FFA8FFA8FFA8FFA8FFA8FF%A87D052E0E140D360D0E0D360D0E0D360D0E0C2E062E052E0D0E0D360D0E%0D360D0E0D360D0E0D2F0628062E060D0D300D0E0D300D0E0D300D0E0D2F%06287DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7D527D527DFD18FFA8537D%527D7DA8A8FFFFFFA8FFFFFFA8FFFFFFA8FF2E2E06360E360E360E360D36%0E360D360D2E0653A82E062F0E360D360E360D360E360D360E36062E2EA8%282E062F0D360D300D360D300D360D300D2E067DA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA87D527D537DA8FD19FF7D527D527D527D7D7DA8FFA8FFA8FFA8%FFA8FFA82E062F0D360D0E0D360D0E0D140D0E0628062EA8FF2E2806300D%0E0D300D0E0D300D0E0D300D28057DA8A80528060D0D300D0E0D0E0D0E0D%0E0D0E06282EFFA8FFA8FFA8FFA8FFA8A87DA8597D527D527D7DFD1BFF7D%527D597D527D597D7DFFFFFFA8FFFFFFA8FF2E2E062F0E360E360E360E36%0E360D2E282FA8FFFF7E062E0E360D360E360D360E360D360E2F062EA8FF%A8A8282E06300E360D360E360D360D30062E2853A8FFA8FFA8FFA8FFA87E%597D527D597D527D7DFD1CFFA87D527D527D527D527DA8FFA8FFA8FFA8FF%A8A82828052E0D0E0D360D0E0D360D28052EA8FFA8FFA828052F0D0E0D30%0D0E0D300D0E0D30062828FFA8FFA8A80628062F0D0E0D300D0E0D2F0628%052E84FFA8FFA8FFA8FFA8A8527D527D527D527D52FD1FFF7D527D537D52%7D53A8A8FFFFFFA8FFFFFFA8FF532E062E06300D360E360D2E062EA8FFAF%FFA8FF282E06360E360D360E360D360E300D2F0653A8FFA8FFA8A8062E06%300D300D360D2E062E0659A8FFA8FFA8FFA8FFA8FF7D7D527D537D527D7D%FD21FFA87D7D527D527D7DFFA8FFA8FFA8FFA8FFA8FF7D2E0528062E0D36%0D28052EA8FFA8FFA8FFA853062E0D300D0E0D300D0E0D300D0E052853FF%A8FFA8FFA87D0628060E0D0D0628062828A8A8FFA8FFA8AFA8FFA8AFA87D%527D527D527D7DFD25FF7D527D597DA8FFFFFFA8FFFFFFA8FFFFFFA87E28%2E062E2E2E062EA8FFA8FFFFFFA8FF7D2E06360E360D360E360D360E360D%2E28A8A8FFA8FFA8FFA87E062E282F062E282E59FFA8FFA8FFA8FFA8FFA8%FFA8FF7D7D527D7DFD28FF7D7D527D52A8A8FFA8FFA8FFA8FFA8FFA8FFA8%AF5328052E06287DFFA8FFA8FFA8FFA8A806280D300D0E0D300D0E0D300D%2F052EA8FFA8FFA8FFA8FFA87D052E06280659A8FFA8FFA8FFA8FFA8FFA8%FFA8FF7D7D527D527EFD28FFA8537D527D7DA8A8FFFFFFA8FFFFFFA8FFFF%FFA8FFA87D28537EFFA8FFAFFFA8FFA8FFA82E062F0D360E300D360E300D%36062E52FFA8FFA8FFA8FFA8FFA87D282E59A9A8FFA8FFA8FFA8FFA8FFA8%FFA8FFA87D527D537DA8FD29FF7D527D527D527DA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF2E28060E0D300D0E0D300D0E%0D28067DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFA8FFA8AFA8FF%A8A87D7D527D527D52FD2AFFA87D527D597D527DA8FFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA87E282E0D300D2F0D300D2F0D2F%282EA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8%7D7D597D527D59FD2CFFA87D527D527D527D7DFFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FF7E2E0628052E0628052E0628052E28FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8527D527D%527D52FD2FFF7D527D537D527D7DA8A8FFAFFFA8FFAFFFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FF5353062E062E062E062E062E28A8A8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87D527D537D527D7DFD31FFA8%527D527D527D527DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AF%A8FFA8AFA8FFA8A87D7D527D527D527D7EFD34FF7D7D527D597D527D7DFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA884527D597D%527D597DFD37FFA87D527D527D527D52A8A8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8A87D7D527D527D527D52A8FD3AFF7D527D537D527D53%7D7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87D7D527D537D527D7D%FD3DFFA8527D527D527D527D5284A8FFA8FF7D7D527DA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87D7D52A8A8AFA8A87D7D%527D527D527D527DA8FD40FFA87D527D597D527D597D7DA87D7D527D597D%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8597D527D%597D7DA8597D527D597D527D7DA8FD44FFA8527D527D527D527D527D527D%527D5284A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7D%527D527D527D527D527D527D527DA8FD48FF7D7D537D527D537D527D537D%527D53A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7D7D527D%537D527D537D527D537D59A8FD4CFFA8527D527D527D527D527D527D527D%527D7D847DA8A8A87EA8A8A87EA87E7EFD047D527D527D527D527D527D52%7D527DA8FD50FFA8A87D7D7DA8FF7D527D597D527D597D527D597D527D59%7D527D597D527D597D527D597D527D7DA8FD057DFD5BFF7D527D527D527D%527D527D527D527D527D527D527D527D527D527D527D7DFD63FF84527D53%7D527D537D527D537D527D537D527D537D527D537D527DA8FD66FFA8A87D%7D527D527D527D527D527D527D527D527D7D7E7DA8FD33FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
userdict /lv1Fix true putuserdict /_contoneDevice true put%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI5_End_NonPrinting--27 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[<666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A>0 %_Br[0.1 0 50 100 %_BS%_0.1 0 50 100 Bs0.4 0 50 0 %_BS%_0.4 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 10)(Unnamed gradient 10) 0 2 Bd[<E6E5E5E5E4E4E3E3E2E2E1E1E0E0DFDEDEDDDDDCDBDBDAD9D9D8D8D7D6D6D5D4D3D3D2D1D1D0CFCFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C0BFBFBEBDBCBBBBBAB9B8B7B6B6B5B4B3B2B2B1B0AFAEADACACABAAA9A8A7A6A6A5A4A3A2A1A09F9F9E9D9C9B9A99989796969594939291908F8E8D8C8C8B8A898887868584838281807F7E7D7C7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59>0 %_Br[0.35 0 50 100 %_BS%_0.35 0 50 100 Bs0.9 0 56.7568 59.3407 %_BS%_0.9 0 56.7568 59.3407 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 11)(Unnamed gradient 11) 0 2 Bd[<000000010101010202030303040405050506060707080809090A0A0B0C0C0D0D0E0E0F101011111213131414151616171818191A1A1B1C1C1D1E1F1F202121222324242526262728292A2A2B2C2D2D2E2F303031323334343536373839393A3B3C3D3E3E3F40414243434445464748494A4A4B4C4D4E4F50515252535455565758595A5B5C5D5E5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C><00000000000000010101010101010202020202020203030303030304040404040505050505060606060607070707070808080808090909090A0A0A0A0B0B0B0B0C0C0C0C0C0D0D0D0D0E0E0E0E0F0F0F101010101111111112121212131313141414141515151516161617171717181818191919191A1A1A1B1B1B1C1C1C1C1D1D1D1E1E1E1F1F1F202020202121212222222323232424242525252626262727272828282929>0<0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A09090909090909090909090909080808080808080808080808070707070707070707070707060606060606060606060606050505050505050505050504040404040404040404030303030303030303030302020202020202020202010101010101010101010000000000>1 %_Br[0.484375 0.160156 0 0 1 50 100 %_BS%_0.484375 0.160156 0 0 1 50 100 Bs0.95 0 59.5506 0 %_BS%_0.95 0 59.5506 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 12)(Unnamed gradient 12) 0 3 Bd[<C6C7C7C8C8C8C9C9CACACACBCBCCCCCDCDCDCECECFCFD0D0D0D1D1D2D2D3D3D3D4D4D5D5><48494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364656667696A6B6C>001 %_Br<292929292A2A2A2B2B2B2C2C2C2D2D2D2E2E2F2F30303131313232333334353536363737383839393A3B3B3C3C3D3D3E3F3F4041414242434444454646474848494A4A4B4C4C4D4E4E4F50515152535354555656575859595A5B5C5C5D5E5F5F6061626263646566666768696A6A6B6C6D6E6E6F7071727273747576777778797A7B7C7D7D7E7F80818283838485868788898A8B8B8C8D8E8F90919293949495969798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6><0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F101010101010111111111111121212121213131313131414141414151515151616161616171717171818181819191919191A1A1A1A1B1B1B1B1C1C1C1D1D1D1D1E1E1E1E1F1F1F1F202020212121212222222323232324242425252525262626272727272828282929292A2A2A2B2B2B2B2C2C2C2D2D2D2E2E2E2F2F2F303030313131313232323333333434343535353636363737373838383939393A3A3B3B3B3C3C3C3D3D3D3E3E3E3F3F3F4040404141424242434343444444454546464647474748>001 %_Br[0.835938 0.421875 0 0 1 50 100 %_BS%_0.835938 0.421875 0 0 1 50 100 Bs0.777344 0.28125 0 0 1 50 58.427 %_BS%_0.777344 0.28125 0 0 1 50 58.427 Bs0.160156 0.054688 0 0 1 59.5506 0 %_BS%_0.160156 0.054688 0 0 1 59.5506 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 13)(Unnamed gradient 13) 0 3 Bd[<5B5B5C5D5E5E5F606161626364646566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F808081828383848586878788898A8A8B8C8D8D8E8F90909192939394959696><0000000001010101010101020202020202020203030303030303040404040404040505050505050506060606060606070707070707070708080808080808090909090909090A0A0A0A0A0A0A0B0B0B0B><AFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>01 %_Br<313132333434353636373838393A3A3B3C3C3D3E3E3F4040414242434444454646474848494A4A4B4C4C4D4E4E4F5051515253535455555657575859595A5B>0<7172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF>01 %_Br[0.589844 0.042969 1 0 1 50 100 %_BS%_0.589844 0.042969 1 0 1 50 100 Bs0.355469 0 0.6875 0 1 50 50 %_BS%_0.355469 0 0.6875 0 1 50 50 Bs0.191406 0 0.441406 0 1 50 0 %_BS%_0.191406 0 0.441406 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 14)(Unnamed gradient 14) 1 3 Bd[<292929292A2A2A2B2B2B2C2C2C2D2D2D2E2E2F2F30303131313232333334353536363737383839393A3B3B3C3C3D3D3E3F3F4041414242434444454646474848494A4A4B4C4C4D4E4E4F50515152535354555656575859595A5B5C5C5D5E5F5F6061626263646566666768696A6A6B6C6D6E6E6F7071727273747576777778797A7B7C7D7D7E7F80818283838485868788898A8B8B8C8D8E8F90919293949495969798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6><0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F101010101010111111111111121212121213131313131414141414151515151616161616171717171818181819191919191A1A1A1A1B1B1B1B1C1C1C1D1D1D1D1E1E1E1E1F1F1F1F202020212121212222222323232324242425252525262626272727272828282929292A2A2A2B2B2B2B2C2C2C2D2D2D2E2E2E2F2F2F303030313131313232323333333434343535353636363737373838383939393A3A3B3B3B3C3C3C3D3D3D3E3E3E3F3F3F4040404141424242434343444444454546464647474748>001 %_Br<C6C7C7C8C8C8C9C9CACACACBCBCCCCCDCDCDCECECFCFD0D0D0D1D1D2D2D3D3D3D4D4D5D5><48494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364656667696A6B6C>001 %_Br[0.160156 0.054688 0 0 1 59.5506 0 %_BS%_0.160156 0.054688 0 0 1 59.5506 0 Bs0.777344 0.28125 0 0 1 50 58.427 %_BS%_0.777344 0.28125 0 0 1 50 58.427 Bs0.835938 0.421875 0 0 1 50 100 %_BS%_0.835938 0.421875 0 0 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 15)(Unnamed gradient 15) 0 3 Bd[<0102030405060708090A0B0C0D0E0F1011121415161718191A1B1C1D1E1F20><AAABABACACADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B7B7B8B8B9B9BABA><FBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9><00000000010101010101020202020202030303030303040404040404050505>1 %_Br<0000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101><8080818282838484858686878888898A8A8B8C8C8D8E8E8F9090919292939494959696979898999A9A9B9C9C9D9E9E9FA0A0A1A2A2A3A4A4A5A6A6A7A8A8A9AAAA><BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFB>01 %_Br[0.125 0.730469 0.976563 0.019531 1 50 100 %_BS%_0.125 0.730469 0.976563 0.019531 1 50 100 Bs0.003906 0.667969 0.984375 0 1 50 50 %_BS%_0.003906 0.667969 0.984375 0 1 50 50 Bs0 0.5 0.730469 0 1 50 0 %_BS%_0 0.5 0.730469 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 16)(Unnamed gradient 16) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6>0 %_Br[0.9 0 50 100 %_BS%_0.9 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 17)(Unnamed gradient 17) 0 3 Bd[<C6C7C7C8C8C8C9C9CACACACBCBCCCCCDCDCDCECECFCFD0D0D0D1D1D2D2D3D3D3D4D4D5D5><48494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364656667696A6B6C>001 %_Br<8F90909091919192929393949495969697979899999A9B9B9C9D9D9E9FA0A0A1A2A3A4A4A5A6A7A8A8A9AAABACADAEAEAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C1C2C3C4C5C6><2F2F2F2F2F303030303031313131323232323333333434343535353636363737373838383939393A3A3B3B3B3C3C3C3D3D3E3E3F3F3F40404141414242434344444545454646474748>001 %_Br[0.835938 0.421875 0 0 1 50 100 %_BS%_0.835938 0.421875 0 0 1 50 100 Bs0.777344 0.28125 0 0 1 50 58.427 %_BS%_0.777344 0.28125 0 0 1 50 58.427 Bs0.5625 0.183594 0 0 1 59.5506 0 %_BS%_0.5625 0.183594 0 0 1 59.5506 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 18)(Unnamed gradient 18) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6>0 %_Br[0 0 0 0.098039 1 50 100 %_BS%_0 0 0 0.098039 1 50 100 Bs0 0 0 0 1 48.3253 0 %_BS%_0 0 0 0 1 48.3253 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 19)(Unnamed gradient 19) 0 3 Bd[<C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECFCFCFD0D0D1D1D2D2D2D3D3D4D4D5D5><48494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C>001 %_Br<8F8F8F9090919191929293949495959696979898999A9A9B9C9D9D9E9F9FA0A1A2A3A3A4A5A6A7A7A8A9AAABACACADAEAFB0B1B2B3B4B5B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6><2F2F2F2F303030303031313131323232323333333434343435353536363637373838383939393A3A3A3B3B3C3C3C3D3D3E3E3E3F3F4040404141424243434344444545464647474848>001 %_Br[0.835294 0.423529 0 0 1 50 100 %_BS%_0.835294 0.423529 0 0 1 50 100 Bs0.776471 0.282353 0 0 1 51.2426 58.427 %_BS%_0.776471 0.282353 0 0 1 51.2426 58.427 Bs0.560784 0.184314 0 0 1 59.3303 0 %_BS%_0.560784 0.184314 0 0 1 59.3303 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 2)(Unnamed gradient 2) 0 3 Bd[<2F2F3030313131323233333434343535363636373738383839393A3A3A3B3B3C3C3C3D3D3D3E3E><171717181818181919191A1A1A1A1B1B1B1B1C1C1C1C1C1D1D1D1D1E1E1E1E1F1F1F1F1F202020><6465666768696A6B6C6D6E6F70717273747576767778797A7B7C7D7E7F80808182838484858686>01 %_Br<1A1A1B1B1C1C1D1D1D1E1E1F1F2020202121222223232324242525262626272728282829292A2A2B2B2B2C2C2D2D2D2E2E2E2F><0C0C0C0D0D0D0D0E0E0E0E0E0F0F0F0F1010101011111111111212121213131313131414141414151515151616161616171717><333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061626364>01 %_Br[0.242188 0.125 0.527344 0 1 50 100 %_BS%_0.242188 0.125 0.527344 0 1 50 100 Bs0.183594 0.089844 0.390625 0 1 46.0674 50 %_BS%_0.183594 0.089844 0.390625 0 1 46.0674 50 Bs0.101563 0.046875 0.199219 0 1 48.3146 0 %_BS%_0.101563 0.046875 0.199219 0 1 48.3146 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 25)(Unnamed gradient 25) 0 2 Bd[<CCCCCCCCCCCCCCCCCBCBCBCBCBCBCBCACACACACACAC9C9C9C9C8C8C8C8C8C7C7C7C7C6C6C6C5C5C5C5C4C4C4C3C3C3C2C2C2C1C1C1C0C0BFBFBFBEBEBEBDBDBCBCBCBBBBBABABAB9B9B8B8B7B7B7B6B6B5B5B4B4B3B3B2B2B1B1B0B0AFAFAEAEADADACACABABAAAAA9A9A8A8A7A6A6A5A5A4A4A3A2A2A1A1A0A09F9E9E9D9D9C9B9B9A999998989796969594949392929190908F8F8E8D8C8C8B8A8A89888887868685848383828181807F7E7E7D7C7B7B7A797878777675757473727271706F6F6E6D6C6B6B6A6968676766656463626261605F5E5E5D5C5B5A5958585756555453525251504F4E4D4C4B4B4A49484746454443434241403F3E3D3C3B3A39383737363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A1A>0 %_Br[0.1 0 50 85 %_BS%_0.1 0 50 85 Bs0.8 0 65 50 %_BS%_0.8 0 65 50 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 26)(Unnamed gradient 26) 0 5 Bd[<FFFEFDFCFBFAF9F8F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E8E7E6E5E4E3E2E1E0DFDEDDDCDCDBDAD9D8D7D6D6D5D4D3D2D1D1D0CFCECDCDCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBFBEBDBCBCBBBABAB9B9B8B7B7B6B5B5B4B4B3B2B2B1B1B0AFAFAEAEADADACABABAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A2A1A1A0A09F9F9E9E9E9D9D9C9C9C9B9B9A9A9A99999998989897979796969695959594949493939392929292919191909090908F8F8F8F8E8E8E8E8E8D8D8D8D8D8C8C8C8C8C8B8B8B8B8B8A8A8A8A8A8A89898989898989888888888888888887878787878787878787878686868686868686868686868686858585858585858585858585858585858585858585858585858585858585858585858585858585858585>0 %_Br<7978777675747371706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><5F5E5D5C5B5B5A595858575655545453525150504F4E4D4C4C4B4A494948474645454443424141403F3E3E3D3C3B3A3A3938373636353433323231302F2F2E2D2C2B2B2A292827272625242323222120201F1E1D1C1C1B1A191818171615151413121111100F0E0D0D0C0B0A09090807060605040302020100><5C5B5A595958575656555453525251504F4F4E4D4C4C4B4A494948474645454443424241403F3F3E3D3C3C3B3A393938373635353433323231302F2F2E2D2C2C2B2A292828272625252423222221201F1F1E1D1C1B1B1A191818171615151413121211100F0F0E0D0C0B0B0A09080807060505040302020100><05050505050505050505050504040404040404040404040404040404040404040404040403030303030303030303030303030303030303030303030302020202020202020202020202020202020202020202020201010101010101010101010101010101010101010101010100000000000000000000000000>1 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707173747576777879><000102020304050606070809090A0B0C0D0D0E0F101111121314151516171818191A1B1C1C1D1E1F202021222323242526272728292A2B2B2C2D2E2F2F3031323233343536363738393A3A3B3C3D3E3E3F404141424344454546474849494A4B4C4C4D4E4F505051525354545556575858595A5B5B5C5D5E5F><000102020304050506070808090A0B0B0C0D0E0F0F101112121314151516171818191A1B1B1C1D1E1F1F202122222324252526272828292A2B2C2C2D2E2F2F303132323334353536373839393A3B3C3C3D3E3F3F404142424344454546474849494A4B4C4C4D4E4F4F505152525354555656575859595A5B5C><00000000000000000000000000010101010101010101010101010101010101010101010101020202020202020202020202020202020202020202020202030303030303030303030303030303030303030303030303040404040404040404040404040404040404040404040404050505050505050505050505>1 %_Br<363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0.52 0 50 100 %_BS%_0.52 0 50 100 Bs1 0 23.8095 90.1099 %_BS%_1 0 23.8095 90.1099 Bs0.472656 0.371094 0.359375 0.019531 1 50 70.3297 %_BS%_0.472656 0.371094 0.359375 0.019531 1 50 70.3297 Bs0 0 0 0 1 50 50 %_BS%_0 0 0 0 1 50 50 Bs0.21 0 50 0 %_BS%_0.21 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 27)(Unnamed gradient 27) 0 2 Bd[<4D4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs0.3 0 50 0 %_BS%_0.3 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 28)(Unnamed gradient 28) 0 3 Bd[<C6C7C7C8C8C8C9C9CACACACBCBCCCCCDCDCDCECECFCFD0D0D0D1D1D2D2D3D3D3D4D4D5D5><48494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364656667696A6B6C>001 %_Br<8F90909091919192929393949495969697979899999A9B9B9C9D9D9E9FA0A0A1A2A3A4A4A5A6A7A8A8A9AAABACADAEAEAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C1C2C3C4C5C6><2F2F2F2F2F303030303031313131323232323333333434343535353636363737373838383939393A3A3B3B3B3C3C3C3D3D3E3E3F3F3F40404141414242434344444545454646474748>001 %_Br[0.835938 0.421875 0 0 1 50 100 %_BS%_0.835938 0.421875 0 0 1 50 100 Bs0.777344 0.28125 0 0 1 50 58.427 %_BS%_0.777344 0.28125 0 0 1 50 58.427 Bs0.5625 0.183594 0 0 1 59.5506 0 %_BS%_0.5625 0.183594 0 0 1 59.5506 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 29)(Unnamed gradient 29) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6>0 %_Br[0.9 0 50 100 %_BS%_0.9 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 3)(Unnamed gradient 3) 0 3 Bd[<000102030405060708090A0B0C0D0E0F1011131415161718191A1B1C1D1E1F><AAABABACADADAEAEAFAFB0B1B1B2B2B3B3B4B4B5B6B6B7B7B8B8B9BABABBBB><FCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9><00000000010101010101010102020202020202030303030303030304040404>1 %_Br0<8080818282838484858686878888898A8A8B8C8C8D8E8E8F9090919293939495959697979899999A9B9B9C9D9D9E9F9FA0A1A1A2A3A4A4A5A6A6A7A8A8A9AAAA><BCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC>01 %_Br[0.121094 0.734375 0.976563 0.015625 1 50 100 %_BS%_0.121094 0.734375 0.976563 0.015625 1 50 100 Bs0 0.667969 0.988281 0 1 50 50 %_BS%_0 0.667969 0.988281 0 1 50 50 Bs0 0.5 0.738281 0 1 50 0 %_BS%_0 0.5 0.738281 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 30)(Unnamed gradient 30) 0 3 Bd[<5B5B5C5D5E5E5F606161626364646566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F808081828383848586878788898A8A8B8C8D8D8E8F90909192939394959696><0000000001010101010101020202020202020203030303030303040404040404040505050505050506060606060606070707070707070708080808080808090909090909090A0A0A0A0A0A0A0B0B0B0B><AFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>01 %_Br<313132333434353636373838393A3A3B3C3C3D3E3E3F4040414242434444454646474848494A4A4B4C4C4D4E4E4F5051515253535455555657575859595A5B>0<7172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF>01 %_Br[0.589844 0.042969 1 0 1 50 100 %_BS%_0.589844 0.042969 1 0 1 50 100 Bs0.355469 0 0.6875 0 1 50 50 %_BS%_0.355469 0 0.6875 0 1 50 50 Bs0.191406 0 0.441406 0 1 50 0 %_BS%_0.191406 0 0.441406 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 31)(Unnamed gradient 31) 0 3 Bd[<000102030405060708090A0B0C0D0E0F1011131415161718191A1B1C1D1E1F><AAABABACADADAEAEAFAFB0B1B1B2B2B3B3B4B4B5B6B6B7B7B8B8B9BABABBBB><FCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9><00000000010101010101010102020202020202030303030303030304040404>1 %_Br0<8080818282838484858686878888898A8A8B8C8C8D8E8E8F9090919293939495959697979899999A9B9B9C9D9D9E9F9FA0A1A1A2A3A4A4A5A6A6A7A8A8A9AAAA><BCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC>01 %_Br[0.121094 0.734375 0.976563 0.015625 1 50 100 %_BS%_0.121094 0.734375 0.976563 0.015625 1 50 100 Bs0 0.667969 0.988281 0 1 50 50 %_BS%_0 0.667969 0.988281 0 1 50 50 Bs0 0.5 0.738281 0 1 50 0 %_BS%_0 0.5 0.738281 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 33)(Unnamed gradient 33) 0 3 Bd[<000000000000000000000001010101010101010101010101010101010101010202020202020202020202><333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051525354555758595A5B5C5D>0.99218801 %_Br<0202020202020202020202020202020202020202020202020202020202020202020202020101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000><1313131414141414151515151616161616171717171818181818191919191A1A1A1A1A1B1B1B1B1B1C1C1C1C1D1D1D1D1D1E1E1E1E1F1F1F1F1F2020202021212121212222222223232323232424242425252525252626262626272727272828282828292929292A2A2A2A2A2B2B2B2B2C2C2C2C2C2D2D2D2D2E2E2E2E2E2F2F2F2F30303030303131313131323232323333><6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFD>01 %_Br[0.007813 0.363281 0.992188 0 1 50 100 %_BS%_0.007813 0.363281 0.992188 0 1 50 100 Bs0 0.199219 0.992188 0 1 50 50 %_BS%_0 0.199219 0.992188 0 1 50 50 Bs0.007813 0.074219 0.421875 0 1 50 0 %_BS%_0.007813 0.074219 0.421875 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 4)(Unnamed gradient 4) 0 2 Bd[<4D4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs0.3 0 50 0 %_BS%_0.3 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 5)(Unnamed gradient 5) 0 3 Bd[<1919191A1A1A1A1A1B1B1B1B1B1C1C1C1C1C1C1D1D1D1D1D1E1E1E1E1E1E1F1F1F1F1F1F202020><46464747484849494A4A4B4B4C4C4D4D4E4E4F4F50505151525253535454555555565657575758><8082838485868788898A8B8C8D8E8F90909192939495969798999A9B9C9C9D9E9FA0A1A1A2A3A3>01 %_Br<0E0E0E0E0F0F0F0F0F0F10101010101011111111111112121212121212131313131313141414141414151515151515151616161616161717171717171718181818181819191919><3C3C3C3C3C3D3D3D3D3D3D3D3E3E3E3E3E3E3E3F3F3F3F3F3F3F404040404040404141414141414142424242424242434343434343434444444444444445454545454545454646><3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6A6B6C6D6E6F707172737475767778797A7A7B7C7D7E7F8080>01 %_Br[0.125 0.34375 0.640625 0 1 50 100 %_BS%_0.125 0.34375 0.640625 0 1 50 100 Bs0.097656 0.273438 0.503906 0 1 46.0674 50 %_BS%_0.097656 0.273438 0.503906 0 1 46.0674 50 Bs0.054688 0.234375 0.238281 0 1 48.3146 0 %_BS%_0.054688 0.234375 0.238281 0 1 48.3146 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 6)(Unnamed gradient 6) 0 3 Bd[<0C0D0E0F1011121314><0708090A0B0C0C0D0E><6F6E6D6C6B6A696868>01 %_Br<080808080808080808090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C><0606060606060606060606060606060606060606060606060606060606060606060606070707070707070707070707070707070707070707070707070707070707070707><2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646566676869696A6B6C6D6E6F>01 %_Br[0.078125 0.054688 0.40625 0 1 50 100 %_BS%_0.078125 0.054688 0.40625 0 1 50 100 Bs0.046875 0.027344 0.433594 0 1 46.0674 50 %_BS%_0.046875 0.027344 0.433594 0 1 46.0674 50 Bs0.03125 0.023438 0.179688 0 1 48.3146 0 %_BS%_0.03125 0.023438 0.179688 0 1 48.3146 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 7)(Unnamed gradient 7) 0 3 Bd[<000000000000000000000001010101010101010101010101010101010101010202020202020202020202><333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051525354555758595A5B5C5D>0.99218801 %_Br<0202020202020202020202020202020202020202020202020202020202020202020202020101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000><1313131414141414151515151616161616171717171818181818191919191A1A1A1A1A1B1B1B1B1B1C1C1C1C1D1D1D1D1D1E1E1E1E1F1F1F1F1F2020202021212121212222222223232323232424242425252525252626262626272727272828282828292929292A2A2A2A2A2B2B2B2B2C2C2C2C2C2D2D2D2D2E2E2E2E2E2F2F2F2F30303030303131313131323232323333><6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFD>01 %_Br[0.007813 0.363281 0.992188 0 1 50 100 %_BS%_0.007813 0.363281 0.992188 0 1 50 100 Bs0 0.199219 0.992188 0 1 50 50 %_BS%_0 0.199219 0.992188 0 1 50 50 Bs0.007813 0.074219 0.421875 0 1 50 0 %_BS%_0.007813 0.074219 0.421875 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 8)(Unnamed gradient 8) 1 3 Bd[<0B0B0B0C0C0C0C0D0D0D0D0D0E0E0E0E0F0F0F0F10101010101111111112121212121313131313141414141515151515161616><18181919191A1A1B1B1B1C1C1C1D1D1E1E1E1F1F1F202020212122222223232324242425252526262727272828282929292A2A><3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263646565666768696A6B6C6D>01 %_Br<16161617171717181818191919191A1A1A1A1B1B1B1B1B1C1C1C1C1D1D1D1D1E1E1E1E1E1F1F1F><2A2A2B2B2B2C2C2D2D2D2E2E2F2F2F303031313132323333333434343535353636363737373838><6D6E6F707172737475767778797A7B7C7D7E7E7F80818283848586878889898A8B8C8D8D8E8F8F>01 %_Br[0.042969 0.09375 0.234375 0 1 48.3146 0 %_BS%_0.042969 0.09375 0.234375 0 1 48.3146 0 Bs0.085938 0.164063 0.425781 0 1 46.0674 50 %_BS%_0.085938 0.164063 0.425781 0 1 46.0674 50 Bs0.121094 0.21875 0.5625 0 1 50 100 %_BS%_0.121094 0.21875 0.5625 0 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 9)(Unnamed gradient 9) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BF>0 %_Br[0.75 0 50 100 %_BS%_0.75 0 50 100 Bs1 0 50 53.8462 %_BS%_1 0 50 53.8462 BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 5 pt. ) -(Flat/ Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Callig) -(raphic Brush Tool/ 7 pt. Round/ Adobe Calligraphic Brush Tool/) -( 15 pt. Round/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(15 pt. Round)(1 15 15 100 100 15 15 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(2 pt. Oval)(1 2 2 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Oval)(1 5 5 10 90 -65 35 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(7 pt. Round)(1 7 7 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 1 255 79 79 0 50 Lb(Layer 2) Ln0 Au0 O0 J 0 j 1 w 4 M []0 d0 XR16.5825 240.5166 m16.2622 240.5073 15.7256 240.5083 15.3906 240.5181 c15.0557 240.5278 13.8047 240.6509 13.354 240.7036 c12.9033 240.7563 12.4644 241.0815 12.3789 241.4263 c12.2935 241.771 12.021 241.8442 11.7734 241.5898 c11.5259 241.3354 10.9829 241.2754 10.5674 241.4565 c10.1519 241.6377 9.33008 242.0303 8.74219 242.3281 c8.1543 242.626 6.4209 243.8081 6.05859 244.0796 c5.69629 244.3511 5.47998 244.8516 5.57813 245.1914 c5.67627 245.5313 5.47803 245.7305 5.1377 245.6343 c4.79736 245.5381 4.29785 245.7568 4.02832 246.1211 c3.75879 246.4854 3.24268 247.2339 2.88184 247.7852 c2.521 248.3364 1.60791 250.2256 1.42871 250.6426 c1.24951 251.0596 1.31201 251.6021 1.56836 251.8486 c1.82471 252.0952 1.75293 252.3682 1.40869 252.4551 c1.06445 252.542 0.741699 252.9824 0.690918 253.4336 c0.640137 253.8848 0.554199 254.7798 0.5 255.4229 c0.5 255.4229 0.5 256 v0.5 256.6025 0.5 256.6025 y0.559082 257.2754 0.650879 258.1953 0.703613 258.646 c0.756348 259.0967 1.08154 259.5356 1.42627 259.6211 c1.771 259.7065 1.84424 259.979 1.58984 260.2266 c1.33545 260.4741 1.27539 261.0171 1.45703 261.4326 c1.63867 261.8481 2.03076 262.6694 2.32861 263.2573 c2.62646 263.8452 3.80713 265.5781 4.07861 265.9409 c4.3501 266.3037 4.85059 266.52 5.19092 266.4219 c5.53125 266.3237 5.73047 266.522 5.63428 266.8623 c5.53809 267.2026 5.75684 267.7021 6.12109 267.9722 c6.48535 268.2422 7.23438 268.7578 7.78564 269.1187 c8.33691 269.4795 10.2266 270.3926 10.6436 270.5718 c11.0605 270.751 11.603 270.688 11.8491 270.4321 c12.0952 270.1763 12.3682 270.248 12.4551 270.5918 c12.542 270.9355 12.9824 271.2583 13.4336 271.3091 c13.8848 271.3599 14.7798 271.4458 15.4229 271.5 c15.4229 271.5 16 271.5 v16.6025 271.5 16.6025 271.5 y17.2754 271.4409 18.1953 271.3491 18.6465 271.2964 c19.0977 271.2437 19.5366 270.9185 19.6216 270.5737 c19.7065 270.229 19.979 270.1558 20.2266 270.4102 c20.4741 270.6646 21.0171 270.7246 21.4326 270.5435 c21.8481 270.3623 22.6694 269.9697 23.2573 269.6719 c23.8452 269.374 25.5791 268.1929 25.9414 267.9214 c26.3037 267.6499 26.5205 267.1494 26.4224 266.8091 c26.3242 266.4688 26.5225 266.2695 26.8628 266.3657 c27.2031 266.4619 27.7021 266.2432 27.9722 265.8789 c28.2422 265.5146 28.7583 264.7656 29.1191 264.2139 c29.48 263.6621 30.3926 261.7734 30.5718 261.3564 c30.751 260.9395 30.688 260.397 30.4321 260.1509 c30.1763 259.9048 30.248 259.6318 30.5923 259.5449 c30.9365 259.458 31.2593 259.0176 31.3096 258.5664 c31.3599 258.1152 31.4458 257.2202 31.5 256.5771 c31.5 256.5771 31.5 256 v31.5 255.3955 31.5 255.3955 y31.4409 254.7236 31.3491 253.8047 31.2964 253.3535 c31.2437 252.9023 30.9185 252.4634 30.5737 252.3784 c30.229 252.2935 30.1558 252.021 30.4102 251.7734 c30.6646 251.5259 30.7246 250.9829 30.5435 250.5674 c30.3623 250.1519 29.9697 249.3306 29.6719 248.7427 c29.374 248.1548 28.1919 246.4209 27.9204 246.0586 c27.6489 245.6963 27.1484 245.4795 26.8086 245.5776 c26.4688 245.6758 26.2695 245.4775 26.3657 245.1372 c26.4619 244.7969 26.2432 244.2979 25.8789 244.0278 c25.5146 243.7578 24.7656 243.2422 24.2144 242.8813 c23.6631 242.5205 21.7744 241.6074 21.3574 241.4282 c20.9404 241.249 20.3979 241.312 20.1514 241.5679 c19.9048 241.8237 19.6318 241.752 19.5449 241.4077 c19.458 241.0635 19.0176 240.7407 18.5664 240.6904 c18.1152 240.6401 16.9028 240.5259 16.5825 240.5166 CBb1 (Unnamed gradient 18) 0 0 0 1 15.4736 26.8011 26.8011 -15.4736 -344702.723 -80215.7656 Bg15.4736 -26.8011 134.06 77.3996 -58.7695 230.7046 Xm124686.5391 -215963.425 134.06 77.3996 -124745.3125 216194.138 Bc15.4736 -26.8011 134.06 77.3996 -58.7695 230.7046 Bm124686.5391 -215963.425 134.06 77.3996 -43.2959 203.9033 Bcf0 BB0 0 0 0.5 k16.5825 240.5166 m16.5679 241.0166 l16.4258 241.0122 16.2319 241.0103 16.0337 241.0103 c15.8081 241.0103 15.5762 241.0127 15.4053 241.0181 C15.4766 241.0156 L15.4053 241.0181 l15.1201 241.0249 13.8438 241.1489 13.4121 241.2002 c13.2861 241.2139 13.1348 241.2759 13.0273 241.3574 c12.916 241.4365 12.8628 241.5332 12.8643 241.5464 c12.8218 241.7158 12.7461 241.8799 12.6104 242.0156 c12.478 242.1519 12.272 242.2441 12.0703 242.2417 c11.7959 242.2393 11.5767 242.1045 11.415 241.9385 C11.415 241.9385 l11.4102 241.9214 11.2642 241.8467 11.0869 241.8521 c10.9751 241.8516 10.8574 241.875 10.7671 241.915 C10.6523 241.9648 L10.7671 241.915 l10.3691 242.0884 9.5459 242.4814 8.96826 242.7739 c8.72314 242.897 8.13477 243.269 7.59229 243.6304 c7.04785 243.9917 6.52002 244.3584 6.3584 244.4795 c6.18066 244.5991 6.04199 244.8979 6.05469 245.0137 C6.05859 245.0527 L6.06836 245.0869 L6.05859 245.0527 l6.08643 245.1504 6.10303 245.2505 6.10303 245.3545 c6.10547 245.5488 6.03662 245.771 5.87451 245.9312 c5.71436 246.0928 5.49219 246.1606 5.29834 246.1587 c5.19629 246.1587 5.09766 246.1426 5.00146 246.1152 C5.00195 246.1152 L4.96436 246.1118 l4.84961 246.0991 4.54932 246.2393 4.43018 246.4185 C4.43018 246.4185 l4.17188 246.7676 3.6543 247.5176 3.30029 248.0591 c3.14893 248.2876 2.82471 248.9038 2.53467 249.4873 c2.24268 250.0723 1.96777 250.6538 1.88818 250.8398 c1.84912 250.9297 1.82617 251.0459 1.82666 251.1567 c1.82129 251.3354 1.89746 251.4829 1.91504 251.4883 C1.73486 251.3149 L1.91504 251.4883 l2.08252 251.6499 2.21973 251.8701 2.22217 252.147 c2.2251 252.3481 2.13281 252.5532 1.99756 252.6855 c1.8623 252.8208 1.69922 252.897 1.53076 252.9399 C1.4502 252.9604 L1.53125 252.9399 l1.51807 252.9385 1.42139 252.9917 1.34277 253.1035 c1.26221 253.2114 1.20068 253.3628 1.18799 253.4897 c1.13818 253.9316 1.05176 254.8276 0.998047 255.4648 C0.5 255.4229 L1 255.4229 l1 255.4229 1 256 v1 256.6025 1 256.6021 Y0.5 256.6025 L0.998047 256.5586 l1.05664 257.2261 1.14844 258.147 1.2002 258.5879 c1.21387 258.7139 1.27588 258.8652 1.35693 258.9727 c1.43604 259.084 1.5332 259.1372 1.54639 259.1357 C1.78906 259.1958 L1.54639 259.1357 l1.71582 259.1782 1.87988 259.2544 2.01563 259.3896 c2.15186 259.522 2.24414 259.728 2.24121 259.9297 c2.23926 260.2041 2.10449 260.4238 1.93848 260.585 C1.96826 260.5562 L1.93848 260.585 l1.92139 260.5898 1.84717 260.7354 1.85205 260.9126 c1.85156 261.0244 1.875 261.1421 1.91504 261.2324 C1.91504 261.2324 l2.08936 261.6309 2.48193 262.4536 2.77441 263.0313 c2.89746 263.2769 3.26904 263.8647 3.62988 264.4072 c3.99121 264.9517 4.35742 265.4795 4.479 265.6416 c4.59863 265.8193 4.89697 265.958 5.01318 265.9453 C5.05176 265.9414 L5.02881 265.9482 L5.05273 265.9414 l5.1499 265.9136 5.25049 265.897 5.35449 265.897 c5.54834 265.8945 5.771 265.9634 5.93115 266.1255 c6.09277 266.2856 6.16064 266.5078 6.15869 266.7017 c6.1582 266.8037 6.14258 266.9023 6.11523 266.9985 C6.12256 266.9731 L6.11523 266.998 L6.11182 267.0356 l6.09912 267.1504 6.23926 267.4512 6.41895 267.5703 C6.61963 267.7192 L6.41895 267.5703 l6.76709 267.8291 7.51758 268.3457 8.05957 268.7002 c8.28809 268.8516 8.9043 269.1758 9.48779 269.4658 c10.0732 269.7578 10.6548 270.0327 10.8408 270.1123 C10.8408 270.1123 l10.9307 270.1514 11.0469 270.1743 11.1567 270.1738 c11.3359 270.1792 11.4839 270.103 11.4888 270.0854 C11.4888 270.0854 l11.6504 269.918 11.8706 269.7813 12.147 269.7788 c12.3477 269.7759 12.5527 269.8677 12.6851 270.0029 c12.8203 270.1377 12.897 270.3008 12.9399 270.4692 c12.9385 270.4819 12.9917 270.5786 13.1035 270.6572 c13.2114 270.7378 13.3628 270.7993 13.4897 270.812 c13.9316 270.8618 14.8276 270.9482 15.4648 271.002 C15.4229 271.5 L15.4229 271 l15.4229 271 16 271 v16.6025 271 16.6025 271 Y16.6025 271.5 L16.5586 271.002 l17.2261 270.9434 18.147 270.8516 18.5884 270.7998 c18.7148 270.7861 18.8662 270.7241 18.9736 270.6431 c19.085 270.564 19.1377 270.4668 19.1362 270.4541 c19.1782 270.2847 19.2539 270.1206 19.3896 269.9844 c19.522 269.8481 19.728 269.7559 19.9297 269.7588 c20.2041 269.7607 20.4233 269.8955 20.585 270.0615 C20.563 270.0391 L20.585 270.0615 l20.5898 270.0786 20.7358 270.1533 20.9131 270.1479 c21.0249 270.1484 21.1426 270.125 21.2324 270.0854 C21.2329 270.085 l21.6304 269.9121 22.4536 269.5186 23.0313 269.2261 c23.2769 269.103 23.8647 268.731 24.4077 268.3701 c24.9521 268.0088 25.4805 267.6426 25.6416 267.5215 c25.8193 267.4014 25.9585 267.1025 25.9458 266.9863 C25.9419 266.9473 l25.9141 266.8501 25.8975 266.75 25.8975 266.6455 c25.895 266.4517 25.9639 266.229 26.1255 266.0693 c26.2861 265.9072 26.5083 265.8394 26.7021 265.8418 c26.8042 265.8418 26.9023 265.8574 26.998 265.8843 C27.0127 265.8887 L26.999 265.8848 L27.0361 265.8887 l27.1509 265.9009 27.4507 265.7612 27.5703 265.5811 c27.8291 265.2324 28.3462 264.4824 28.7007 263.9404 c28.8521 263.7109 29.1763 263.0952 29.4663 262.5117 c29.7578 261.9263 30.0327 261.3452 30.1123 261.1592 c30.1514 261.0693 30.1743 260.9536 30.1738 260.8433 c30.1792 260.6641 30.103 260.5161 30.0854 260.5112 C30.1255 260.5498 L30.0854 260.5112 l29.918 260.3501 29.7813 260.1299 29.7788 259.8535 c29.7759 259.6523 29.8682 259.4473 30.0034 259.3149 c30.1382 259.1797 30.3013 259.103 30.4697 259.0601 C30.4697 259.0601 l30.4829 259.0615 30.5796 259.0083 30.6577 258.8965 c30.7383 258.7886 30.7998 258.6372 30.8125 258.5112 c30.8618 258.0684 30.9482 257.1729 31.002 256.5352 C31.5 256.5771 L31 256.5771 l31 256.5771 31 256 v31 255.3955 31 255.3955 Y31.5 255.3955 L31.002 255.4395 l30.9434 254.7729 30.8516 253.8535 30.7998 253.4116 c30.7861 253.2852 30.7241 253.1338 30.6431 253.0264 c30.564 252.915 30.4668 252.8623 30.4541 252.8638 c30.2847 252.8218 30.1206 252.7461 29.9844 252.6104 c29.8481 252.478 29.7559 252.272 29.7588 252.0703 c29.7607 251.7959 29.8955 251.5767 30.0615 251.415 c30.0786 251.4102 30.1533 251.2642 30.1479 251.0869 c30.1484 250.9756 30.125 250.8574 30.085 250.7671 c29.9121 250.3696 29.5186 249.5464 29.2261 248.9688 c29.103 248.7236 28.731 248.1353 28.3696 247.5928 c28.0083 247.0479 27.6416 246.52 27.5205 246.3584 c27.4004 246.1807 27.1011 246.0415 26.9858 246.0542 C26.9473 246.0581 L26.9263 246.064 L26.9473 246.0581 l26.8501 246.0859 26.7495 246.1025 26.6455 246.103 c26.4512 246.105 26.229 246.0361 26.0688 245.874 c25.9072 245.7139 25.8394 245.4917 25.8413 245.2983 c25.8418 245.1958 25.8574 245.0972 25.8848 245.0015 C25.8882 244.9639 l25.9009 244.8491 25.7612 244.5493 25.5811 244.4297 c25.2329 244.1709 24.4824 243.6543 23.9404 243.2998 c23.7119 243.1484 23.0962 242.8242 22.5122 242.5342 c21.9272 242.2422 21.3462 241.9673 21.1602 241.8877 c21.0703 241.8486 20.9546 241.8257 20.8438 241.8262 c20.665 241.8213 20.5166 241.897 20.5112 241.915 c20.3501 242.082 20.1299 242.2188 19.8535 242.2212 c19.6523 242.2241 19.4473 242.1323 19.3149 241.9966 c19.1797 241.8618 19.103 241.6987 19.0601 241.5303 c19.0615 241.5171 19.0083 241.4204 18.8965 241.3423 c18.7886 241.2617 18.6372 241.2002 18.5112 241.1875 c18.0776 241.1387 16.8413 241.0234 16.5679 241.0166 C16.5825 240.5166 L16.5972 240.0166 l16.9644 240.0283 18.1528 240.1416 18.6216 240.1934 c18.9468 240.231 19.2412 240.356 19.4878 240.5356 c19.731 240.7173 19.9414 240.9541 20.0298 241.2852 C20.0381 241.3105 L19.9126 241.3765 L19.9902 241.2632 L20.0381 241.3105 L19.9126 241.3765 L19.9902 241.2632 L19.8535 241.4634 L19.8535 241.2212 L19.9902 241.2632 L19.8535 241.4634 L19.8535 241.2212 L19.8535 241.3926 L19.7749 241.2373 L19.8535 241.2212 L19.8535 241.3926 L19.7749 241.2373 L19.7788 241.2456 L19.7729 241.2378 L19.7749 241.2373 L19.7788 241.2456 L19.7729 241.2378 L19.7915 241.2207 l20.0894 240.9243 20.4683 240.8311 20.8438 240.8262 c21.0811 240.8267 21.3232 240.8696 21.5547 240.9688 c21.7856 241.0684 22.3574 241.3394 22.9585 241.6392 c23.5615 241.9404 24.1655 242.2534 24.4883 242.4629 c25.0488 242.8301 25.7964 243.3447 26.1768 243.626 c26.6089 243.9604 26.876 244.4375 26.8882 244.9639 c26.8882 245.0645 26.8765 245.1689 26.8467 245.2734 C26.8413 245.2983 L26.6465 245.2983 L26.7769 245.168 L26.8413 245.2983 L26.6465 245.2983 L26.7769 245.168 L26.6455 245.2993 L26.6455 245.1025 L26.7769 245.168 L26.6455 245.2993 L26.6455 245.1025 L26.6699 245.0972 L26.6914 245.0908 L26.6699 245.0972 l26.7764 245.0664 26.8828 245.0542 26.9858 245.0542 c27.5098 245.0664 27.9858 245.3301 28.3203 245.7588 c28.4707 245.9595 28.8311 246.48 29.2026 247.0396 c29.5752 247.6016 29.9429 248.1738 30.1177 248.5166 c30.4209 249.1147 30.8125 249.9341 31.002 250.3677 c31.1035 250.6016 31.1475 250.8472 31.1479 251.0869 c31.1431 251.459 31.0518 251.835 30.7588 252.1318 C30.7422 252.1499 L30.7417 252.1509 L30.5986 252.0703 L30.7588 252.0703 L30.7417 252.1509 L30.5986 252.0703 L30.7588 252.0703 L30.5269 252.0703 L30.6929 251.9048 L30.7588 252.0703 L30.5269 252.0703 L30.6929 251.9048 L30.6196 251.978 L30.668 251.8848 L30.6929 251.9048 L30.6196 251.978 L30.668 251.8848 L30.6934 251.8931 l31.0254 251.9795 31.2632 252.1885 31.4463 252.4312 c31.627 252.6768 31.7539 252.9707 31.793 253.2954 c31.8467 253.7559 31.9385 254.6743 31.998 255.3516 C32 255.3735 L32 255.3955 l32 255.3955 32 256 v32 256.5767 32 256.5767 32 256.5771 C32 256.5981 L31.998 256.6191 l31.9434 257.2676 31.8579 258.1621 31.8066 258.6221 c31.769 258.9468 31.644 259.2412 31.4644 259.4878 c31.2827 259.731 31.0459 259.9414 30.7148 260.0298 C30.7148 260.0298 L30.6895 260.0381 L30.6235 259.9131 L30.7368 259.9902 L30.6895 260.0381 L30.6235 259.9131 L30.7368 259.9902 L30.5361 259.8535 L30.7788 259.8535 L30.7368 259.9902 L30.5361 259.8535 L30.7788 259.8535 L30.6064 259.8535 L30.7627 259.7744 L30.7788 259.8535 L30.6064 259.8535 L30.7627 259.7744 L30.7534 259.7793 L30.7622 259.7725 L30.7627 259.7744 L30.7534 259.7793 L30.7622 259.7725 L30.7788 259.7905 l31.0762 260.0884 31.1689 260.4673 31.1738 260.8433 c31.1733 261.0801 31.1304 261.3223 31.0313 261.5537 c30.9316 261.7847 30.6606 262.3564 30.3608 262.9575 c30.0596 263.5605 29.7471 264.165 29.5376 264.4873 c29.1704 265.0488 28.6553 265.7969 28.374 266.1768 c28.0396 266.6089 27.5625 266.876 27.0361 266.8887 c26.9351 266.8882 26.8311 266.8765 26.7266 266.8467 C26.7114 266.8428 L26.7271 266.8472 L26.7021 266.8418 L26.7021 266.6465 L26.832 266.7769 L26.7021 266.8418 L26.7021 266.6465 L26.832 266.7769 L26.7007 266.6455 L26.8975 266.6455 L26.832 266.7769 L26.7007 266.6455 L26.8975 266.6455 L26.9028 266.6704 l26.9336 266.7773 26.9458 266.8838 26.9458 266.9863 c26.9336 267.5107 26.6699 267.9868 26.2412 268.3213 c26.04 268.4717 25.52 268.8315 24.9604 269.2031 c24.3984 269.5752 23.8257 269.9429 23.4834 270.1182 c22.8853 270.4209 22.0659 270.8125 21.6323 271.002 C21.6328 271.002 l21.3984 271.1035 21.1528 271.1479 20.9131 271.1484 c20.541 271.1431 20.165 271.0518 19.8682 270.7588 C19.918 270.8101 L19.8682 270.7588 L19.8501 270.7427 L19.8491 270.7417 L19.9297 270.5986 L19.9297 270.7588 L19.8491 270.7417 L19.9297 270.5986 L19.9297 270.7588 L19.9297 270.5269 L20.0952 270.6934 L19.9297 270.7588 L19.9297 270.5269 L20.0952 270.6934 L20.022 270.6196 L20.1152 270.668 L20.0952 270.6934 L20.022 270.6196 L20.1152 270.668 L20.1069 270.6934 l20.0205 271.0254 19.8115 271.2632 19.5688 271.4463 c19.3232 271.627 19.0293 271.7539 18.7046 271.793 c18.2437 271.8467 17.3247 271.9385 16.6465 271.998 C16.6245 272 L16.6025 272 l16.6025 272 16 272 v15.4233 272 15.4233 272 15.4229 272 C15.4009 272 L15.3809 271.998 l14.7319 271.9434 13.8379 271.8579 13.3774 271.8062 c13.0532 271.7681 12.7588 271.6431 12.5122 271.4634 c12.269 271.2822 12.0586 271.0454 11.9702 270.7144 C11.9619 270.6895 L12.0874 270.6235 L12.0103 270.7373 L11.9619 270.6895 L12.0874 270.6235 L12.0103 270.7373 L12.147 270.5366 L12.147 270.7788 L12.0103 270.7373 L12.147 270.5366 L12.147 270.7788 L12.147 270.6069 L12.2256 270.7627 L12.147 270.7788 L12.147 270.6069 L12.2256 270.7627 L12.2207 270.7534 L12.2275 270.7622 L12.2256 270.7627 L12.2207 270.7534 L12.2275 270.7622 L12.2095 270.7788 L12.2529 270.7339 L12.2095 270.7788 l11.9116 271.0762 11.5327 271.1689 11.1567 271.1738 c10.9199 271.1733 10.6777 271.1304 10.4463 271.0313 C10.4463 271.0313 l10.2153 270.9316 9.64355 270.6606 9.04199 270.3608 c8.43896 270.0596 7.83447 269.7466 7.51172 269.5371 c6.95117 269.1699 6.20361 268.6553 5.82324 268.374 C5.82324 268.374 l5.39063 268.0396 5.12402 267.562 5.11182 267.0356 c5.11182 266.9351 5.12354 266.8311 5.15332 266.7266 C5.15332 266.7261 L5.15869 266.7017 L5.35352 266.7017 L5.22314 266.8315 L5.15869 266.7017 L5.35352 266.7017 L5.22314 266.8315 L5.35449 266.7007 L5.35449 266.897 L5.22314 266.8315 L5.35449 266.7007 L5.35449 266.897 L5.3291 266.9023 L5.33008 266.9023 l5.22266 266.9331 5.11621 266.9453 5.01318 266.9453 c4.48975 266.9331 4.01318 266.6699 3.67822 266.2402 c3.52832 266.0396 3.16846 265.5195 2.79688 264.96 c2.42529 264.3984 2.05762 263.8257 1.88281 263.4834 c1.57959 262.8853 1.18799 262.0654 0.999023 261.6328 C0.983398 261.5977 L0.999023 261.6328 l0.896973 261.3984 0.852539 261.1528 0.852051 260.9126 c0.856934 260.5405 0.948242 260.165 1.24121 259.8682 C1.26855 259.8413 L1.24121 259.8682 L1.25781 259.8501 L1.2583 259.8491 L1.40137 259.9297 L1.24121 259.9297 L1.2583 259.8491 L1.40137 259.9297 L1.24121 259.9297 L1.47266 259.9297 L1.30664 260.0947 L1.24121 259.9297 L1.47266 259.9297 L1.30664 260.0947 L1.37988 260.0225 L1.33154 260.1147 L1.30664 260.0947 L1.37988 260.0225 L1.33154 260.1147 L1.30615 260.1064 L1.14404 260.0664 L1.30615 260.1064 l0.974609 260.0195 0.736816 259.8105 0.553711 259.5684 c0.373047 259.3223 0.246094 259.0288 0.207031 258.7041 c0.15332 258.2441 0.061523 257.3247 0.001953 256.6465 C0 256.6245 L0 256.6025 l0 256.6025 0 256 V0 256 l0 255.4229 0 255.4229 Y0 255.4019 L0.001953 255.3809 l0.056641 254.7319 0.14209 253.8379 0.193848 253.3774 c0.231934 253.0532 0.356934 252.7588 0.536621 252.5122 c0.718262 252.269 0.955078 252.0586 1.28613 251.9702 C1.28662 251.9702 L1.31152 251.9619 L1.37744 252.0874 L1.26416 252.0098 L1.31152 251.9619 L1.37744 252.0874 L1.26416 252.0098 L1.46436 252.147 L1.22217 252.147 L1.26416 252.0098 L1.46436 252.147 L1.22217 252.147 L1.39355 252.147 L1.23828 252.2256 L1.22217 252.147 L1.39355 252.147 L1.23828 252.2256 L1.24658 252.2217 L1.23877 252.2275 L1.23828 252.2256 L1.24658 252.2217 L1.23877 252.2275 L1.22168 252.209 L1.40186 252.3823 L1.22168 252.209 l0.924316 251.9111 0.831543 251.5322 0.82666 251.1567 c0.82666 250.9194 0.870117 250.6768 0.969238 250.4453 c1.06885 250.2144 1.33984 249.6426 1.63965 249.041 c1.94092 248.4385 2.25391 247.834 2.46338 247.5112 c2.83105 246.9502 3.3457 246.2031 3.62646 245.8237 C3.72559 245.6899 L3.62646 245.8237 l3.96045 245.3906 4.43799 245.1245 4.96436 245.1118 c5.06494 245.1118 5.16895 245.1235 5.27344 245.1533 C5.27393 245.1533 L5.29834 245.1587 L5.29834 245.3535 L5.16846 245.2231 L5.29834 245.1587 L5.29834 245.3535 L5.16846 245.2231 L5.2998 245.3545 L5.10303 245.3545 L5.16846 245.2231 L5.2998 245.3545 L5.10303 245.3545 L5.09766 245.3301 L5.09766 245.3301 l5.06689 245.2236 5.05469 245.1172 5.05469 245.0137 c5.06689 244.4907 5.33008 244.0142 5.75879 243.6797 c5.95947 243.5293 6.47949 243.1689 7.03906 242.7974 c7.60107 242.4248 8.17334 242.0571 8.51611 241.8823 c9.11426 241.5791 9.93457 241.187 10.3677 240.998 C10.5205 240.9316 L10.3677 240.998 l10.6016 240.897 10.8472 240.8525 11.0869 240.8521 c11.459 240.8569 11.835 240.9482 12.1318 241.2412 C12.1318 241.2412 L12.1499 241.2578 L12.1509 241.2583 L12.0703 241.4014 L12.0703 241.2417 L12.1509 241.2583 L12.0703 241.4014 L12.0703 241.2417 L12.0703 241.4727 L11.9053 241.3066 L12.0703 241.2417 L12.0703 241.4727 L11.9053 241.3066 L11.9775 241.3799 L11.8853 241.3315 L11.9053 241.3066 L11.9775 241.3799 L11.8853 241.3315 L11.8936 241.3062 l11.9805 240.9746 12.1895 240.7368 12.4316 240.5537 c12.6777 240.373 12.9712 240.2461 13.2959 240.207 c13.7656 240.1528 14.9912 240.0308 15.376 240.0181 C15.376 240.0181 l15.5615 240.0127 15.7998 240.0103 16.0337 240.0103 c16.2388 240.0103 16.4395 240.0122 16.5972 240.0166 C16.5825 240.5166 Lf*u1 D0 g28.5 256 m28.5 256.4766 28.4727 256.9473 28.4209 257.4111 C24.7871 258.3301 L27.4902 260.9297 l27.1064 261.8223 26.6211 262.6621 26.0508 263.4316 C22.4453 262.4111 L23.4844 266.0137 l22.7168 266.5879 21.8809 267.0752 20.9902 267.4629 C18.376 264.7754 L17.4746 268.4141 l16.9912 268.4707 16.5 268.5 16 268.5 c15.5234 268.5 15.0527 268.4727 14.5889 268.4209 C13.6699 264.7871 L11.0703 267.4893 l10.1777 267.1055 9.33789 266.6211 8.56836 266.0508 C9.58789 262.4453 L5.98633 263.4844 l5.41211 262.7168 4.9248 261.8789 4.53711 260.9902 C7.22461 258.375 L3.58594 257.4746 l3.5293 256.9912 3.5 256.499 3.5 256 c3.5 255.5225 3.52734 255.0527 3.5791 254.5889 C7.21289 253.6699 L4.51074 251.0684 l4.89453 250.1777 5.37891 249.3379 5.94922 248.5684 C9.55566 249.5879 L8.51563 245.9863 l9.2832 245.4121 10.1211 244.9238 11.0098 244.5361 C13.625 247.2246 L14.5254 243.5859 l15.0088 243.5293 15.501 243.5 16 243.5 c16.4775 243.5 16.9473 243.5273 17.4111 243.5791 C18.3301 247.2129 L20.9316 244.5098 l21.8223 244.8936 22.6621 245.3789 23.4316 245.9492 C22.4121 249.5547 L26.0137 248.5156 l26.5879 249.2832 27.0762 250.1191 27.4639 251.0098 C24.7754 253.624 L28.4141 254.5254 l28.4707 255.0088 28.5 255.5 28.5 256 Cf0 D16 251.4541 m13.4902 251.4541 11.4541 253.4902 11.4541 256 c11.4541 258.5098 13.4902 260.5459 16 260.5459 c18.5098 260.5459 20.5459 258.5098 20.5459 256 c20.5459 253.4902 18.5098 251.4541 16 251.4541 CBb1 (Unnamed gradient 19) 0 0 0 1 12.5014 21.6531 21.6531 -12.5014 -276918.722 -63234.5469 Bg12.5014 -21.6531 108.314 62.5351 -44.4082 235.5601 Xm100736.6875 -174481.0625 108.314 62.5351 -100781.0938 174716.625 Bc7.30422 -12.6513 108.314 62.5351 -44.4082 235.5601 Bm5.19723 -9.00186 108.314 62.5351 -37.104 222.9087 Bm100736.6875 -174481.0625 108.314 62.5351 -31.9067 213.9067 Bcf0 BB*U*u1 D0.902344 0.652344 0.34375 0.164063 k28.5 256 m28.75 256 l28.75 256.4863 28.7222 256.9663 28.6694 257.439 c28.6577 257.5425 28.583 257.6279 28.4824 257.6533 C25.2852 258.4619 L27.6636 260.7495 l27.7388 260.8218 27.7612 260.9326 27.7197 261.0283 c27.3286 261.939 26.8335 262.7954 26.2515 263.5806 c26.1895 263.6641 26.083 263.7007 25.9829 263.6724 C22.8101 262.7744 L23.7246 265.9443 l23.7534 266.0444 23.7178 266.1514 23.6343 266.2139 c22.8511 266.7998 21.9985 267.2969 21.0898 267.6924 c20.9946 267.7339 20.8838 267.7119 20.811 267.6372 C18.5103 265.2725 L17.7173 268.4741 l17.6924 268.5752 17.6069 268.6504 17.5039 268.6626 c17.0107 268.7202 16.5098 268.75 16 268.75 c15.5137 268.75 15.0337 268.7222 14.561 268.6694 c14.4575 268.6577 14.3721 268.583 14.3467 268.4824 C13.5381 265.2852 L11.2505 267.6626 l11.1782 267.7378 11.0674 267.7603 10.9717 267.7188 c10.061 267.3276 9.20459 266.8335 8.41943 266.2515 c8.33594 266.1895 8.29932 266.083 8.32764 265.9829 C9.2251 262.8101 L6.05566 263.7246 l5.95557 263.7534 5.84863 263.7178 5.78613 263.6343 c5.2002 262.8511 4.70313 261.9966 4.30811 261.0903 c4.26611 260.9946 4.28809 260.8838 4.36279 260.811 C6.72754 258.5098 L3.52588 257.7173 l3.4248 257.6924 3.34961 257.6074 3.3374 257.5039 c3.27979 257.0107 3.25 256.5088 3.25 256 c3.25 255.5127 3.27783 255.0337 3.33057 254.561 c3.34229 254.4575 3.41699 254.3721 3.51758 254.3467 C6.71533 253.5381 L4.3374 251.2485 l4.26221 251.1763 4.23975 251.0649 4.28125 250.9692 c4.67236 250.061 5.1665 249.2046 5.74854 248.4194 c5.81055 248.3359 5.91699 248.2993 6.01709 248.3276 C9.19043 249.2251 L8.27539 246.0557 l8.24658 245.9556 8.28223 245.8486 8.36572 245.7861 c9.14893 245.2002 10.0034 244.7026 10.9097 244.3071 c11.0054 244.2651 11.1162 244.2871 11.189 244.3618 C13.4902 246.7275 L14.2827 243.5259 l14.3076 243.4248 14.3931 243.3496 14.4961 243.3379 c14.9893 243.2798 15.4912 243.25 16 243.25 c16.4873 243.25 16.9663 243.2778 17.439 243.3306 c17.5425 243.3423 17.6279 243.417 17.6533 243.5176 C18.4619 246.7153 L20.7515 244.3364 l20.8237 244.2612 20.9351 244.2388 21.0308 244.2803 c21.939 244.6719 22.7954 245.1665 23.5806 245.7485 c23.6641 245.8105 23.7007 245.917 23.6724 246.0171 C22.7749 249.1899 L25.9443 248.2754 l26.0444 248.2466 26.1514 248.2822 26.2139 248.3657 c26.7993 249.1489 27.2974 250.0015 27.6929 250.9102 c27.7349 251.0054 27.7129 251.1162 27.6382 251.189 C25.2725 253.4897 L28.4741 254.2827 l28.5752 254.3076 28.6504 254.3931 28.6626 254.4961 c28.7202 254.9893 28.75 255.4902 28.75 256 C28.5 256 L28.25 256 l28.25 255.5098 28.2212 255.0283 28.1655 254.5547 C28.4141 254.5254 L28.354 254.7681 L24.7153 253.8667 L24.5342 253.6895 L24.6011 253.4448 L27.2896 250.8306 L27.4639 251.0098 L27.2349 251.1094 l26.855 250.2368 26.3765 249.4175 25.8135 248.6655 C26.0137 248.5156 L26.083 248.7559 L22.4814 249.7949 L22.2358 249.7319 L22.1714 249.4868 L23.1909 245.8813 L23.4316 245.9492 L23.2827 246.1499 l22.5288 245.5913 21.7056 245.1152 20.8325 244.7393 C20.9316 244.5098 L21.1118 244.6831 L18.5103 247.3862 L18.2661 247.4546 L18.0879 247.2744 L17.1689 243.6406 L17.4111 243.5791 L17.3833 243.8276 l16.9282 243.7769 16.4678 243.75 16 243.75 c15.5107 243.75 15.0283 243.7788 14.5547 243.8345 C14.5254 243.5859 L14.7681 243.646 L13.8677 247.2847 L13.6904 247.4658 L13.4458 247.3989 L10.8306 244.7104 L11.0098 244.5361 L11.1099 244.7651 l10.2388 245.145 9.41748 245.624 8.66553 246.1865 C8.51563 245.9863 L8.75586 245.917 L9.7959 249.5186 L9.73291 249.7642 L9.48779 249.8286 L5.88135 248.8091 L5.94922 248.5684 L6.1499 248.7173 l5.59131 249.4712 5.1167 250.2944 4.74023 251.1675 C4.51074 251.0684 L4.68408 250.8882 L7.38623 253.4897 L7.45459 253.7339 L7.27441 253.9121 L3.64063 254.8311 L3.5791 254.5889 L3.82764 254.6167 l3.77686 255.0718 3.75 255.5322 3.75 256 c3.75 256.4893 3.77881 256.9717 3.83447 257.4453 C3.58594 257.4746 L3.646 257.2319 L7.28467 258.1323 L7.46582 258.3096 L7.39893 258.5542 L4.71143 261.1694 L4.53711 260.9902 L4.76611 260.8901 l5.14648 261.7612 5.62402 262.5825 6.18652 263.3345 C5.98633 263.4844 L5.91699 263.2441 L9.51855 262.2051 L9.76416 262.2681 L9.82861 262.5132 L8.80908 266.1187 L8.56836 266.0508 L8.71729 265.8501 l9.47119 266.4087 10.2944 266.8833 11.1689 267.2598 C11.0703 267.4893 L10.8901 267.3159 L13.4897 264.6138 L13.7339 264.5454 L13.9121 264.7256 L14.8311 268.3594 L14.5889 268.4209 L14.6167 268.1724 l15.0718 268.2231 15.5332 268.25 16 268.25 c16.4902 268.25 16.9717 268.2212 17.4453 268.166 C17.4746 268.4141 L17.2319 268.354 L18.1333 264.7153 L18.3105 264.5342 L18.5552 264.6011 L21.1694 267.2886 L20.9902 267.4629 L20.8906 267.2339 l21.7632 266.8535 22.5825 266.376 23.3345 265.8135 C23.4844 266.0137 L23.2441 266.083 L22.2051 262.4805 L22.2681 262.2349 L22.5132 262.1704 L26.1187 263.1909 L26.0508 263.4316 L25.8501 263.2827 l26.4087 262.5288 26.8843 261.7056 27.2607 260.8311 C27.4902 260.9297 L27.3169 261.1099 L24.6138 258.5103 L24.5454 258.2661 L24.7256 258.0879 L28.3594 257.1689 L28.4209 257.4111 L28.1724 257.3833 l28.2231 256.9282 28.25 256.4668 28.25 256 C28.5 256 Lf16 251.4541 m16 251.7041 l14.8135 251.7041 13.7412 252.1846 12.9629 252.9629 c12.1846 253.7412 11.7041 254.8135 11.7041 256 c11.7041 257.1865 12.1846 258.2588 12.9629 259.0371 c13.7412 259.8154 14.8135 260.2959 16 260.2959 c17.1865 260.2959 18.2588 259.8154 19.0371 259.0371 c19.8154 258.2588 20.2959 257.1865 20.2959 256 c20.2959 254.8135 19.8154 253.7412 19.0371 252.9629 c18.2588 252.1846 17.1865 251.7041 16 251.7041 C16 251.4541 L16 251.2041 l18.6479 251.2041 20.7959 253.3521 20.7959 256 c20.7959 258.6479 18.6479 260.7959 16 260.7959 c13.3521 260.7959 11.2041 258.6479 11.2041 256 c11.2041 253.3521 13.3521 251.2041 16 251.2041 C16 251.4541 Lf*UULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF